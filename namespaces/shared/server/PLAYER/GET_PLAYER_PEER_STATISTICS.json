{
    "0x9A928294": {
        "name": "GET_PLAYER_PEER_STATISTICS",
        "params": [
            {
                "name": "playerSrc",
                "type": "const char*",
                "description": "The player to get the stats of"
            },
            {
                "name": "peerStatistic",
                "type": "int",
                "description": "The statistic to get, this will error if its out of range"
            }
        ],
        "return_type": "int",
        "description": "```cpp\nconst int ENET_PACKET_LOSS_SCALE = 65536;\r\n\r\nenum PeerStatistics\r\n{\r\n\t// PacketLoss will only update once every 10 seconds, use PacketLossEpoch if you want the time\r\n\t// since the last time the packet loss was updated.\r\n\r\n\t// the amount of packet loss the player has, needs to be scaled with PACKET_LOSS_SCALE\r\n\tPacketLoss = 0,\r\n\t// The variance in the packet loss\r\n\tPacketLossVariance = 1,\r\n\t// The time since the last packet update in ms, relative to the peers connection time\r\n\tPacketLossEpoch = 2,\r\n\t// The mean amount of time it takes for a packet to get to the client (ping)\r\n\tRoundTripTime = 3,\r\n\t// The variance in the round trip time\r\n\tRoundTripTimeVariance = 4,\r\n\t// Despite their name, these are only updated once every 5 seconds, you can get the last time this was updated with PacketThrottleEpoch\r\n\t// The last recorded round trip time of a packet\r\n\tLastRoundTripTime = 5,\r\n\t// The last round trip time variance\r\n\tLastRoundTripTimeVariance = 6,\r\n\t// The time since the last packet throttle update, relative to the peers connection time\r\n\tPacketThrottleEpoch = 7,\r\n};\n```\n\nThese statistics only update once every 10 seconds.",
        "examples": [
            {
                "lang": "js",
                "code": "\r\nsetInterval(() => {\r\n\tconst ENET_PACKET_LOSS_SCALE = 65536;\r\n\r\n\tconst PLAYER_SERVER_ID = 1;\r\n\r\n\tconst packetLoss = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 0 /* PacketLoss */);\r\n\tconst packetLossVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 1 /* PacketLossVariance */);\r\n\tconst packetLossEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 2 /* PacketLossEpoch */)\r\n\tconst rtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 3 /* RoundTripTime */);\r\n\tconst rttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 4 /* RoundTripTimeVariance */);\r\n\tconst lastRtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 5 /* LastRoundTripTime */);\r\n\tconst lastRttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 6 /* LastRoundTripTimeVariance */);\r\n\tconst packetThrottleEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 7 /* PacketThrottleEpoch */);\r\n\r\n\tconsole.log(`packetLoss: ${packetLoss}`);\r\n\tconsole.log(`packetLossVariance: ${packetLossVariance}`);\r\n\tconsole.log(`packetLossEpch: ${packetLossEpoch}`);\r\n\r\n\tconsole.log(`packetLossScaled: ${packetLoss / ENET_PACKET_LOSS_SCALE}`);\r\n\tconsole.log(`packetLossVarianceScaled: ${packetLossVariance / ENET_PACKET_LOSS_SCALE}`);\r\n\r\n\tconsole.log(`rtt: ${rtt}`);\r\n\tconsole.log(`rttVariance: ${rttVariance}`);\r\n\r\n\tconsole.log(`lastRtt: ${lastRtt}`);\r\n\tconsole.log(`lastRttVariance: ${lastRttVariance}`);\r\n\tconsole.log(`packetThrottleEpoch: ${packetThrottleEpoch}`);\r\n}, 10000)"
            }
        ],
        "hash": "0x9A928294",
        "ns": "CFX",
        "apiset": "server",
        "resultsDescription": "See `ENetStatisticType` for what this will return."
    }
}