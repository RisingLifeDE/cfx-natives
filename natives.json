{
    "AUDIO": {
        "0x8AA1F3C2": {
            "name": "SET_EMITTER_PROBE_LENGTH",
            "params": [
                {
                    "name": "probeLength",
                    "type": "float",
                    "description": "The desired probe length (20.0 - 150.0)"
                }
            ],
            "return_type": "void",
            "description": "Allows StaticEmitter's without a linked entity to make use of environment features like occlusion and reverb even if they are located higher than 20.0 units above any static collision inside interiors.\n\nThis native allows you to extend the probe range up to 150.0 units.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"setEmitterProbeLength\", function(src, args, raw)\r\n    local probeLength = (tonumber(args[1]) + 0.0)\r\n\r\n    print(\"Extending emitter probes to: \", probeLength)\r\n    SetEmitterProbeLength(probeLength)\r\nend)\r\n\r\nRegisterCommand(\"resetEmitterProbeLength\", function()\r\n    print(\"Resetting emitter probes to default settings\")\r\n    SetEmitterProbeLength(20.0)\r\nend)"
                }
            ],
            "hash": "0x8AA1F3C2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xAC6E290D": {
            "name": "ADD_AUDIO_SUBMIX_OUTPUT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The input submix."
                },
                {
                    "name": "outputSubmixId",
                    "type": "int",
                    "description": "The output submix. Use `0` for the master game submix."
                }
            ],
            "return_type": "void",
            "description": "Adds an output for the specified audio submix.",
            "examples": [],
            "hash": "0xAC6E290D",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x658D2BC8": {
            "name": "CREATE_AUDIO_SUBMIX",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The audio submix name."
                }
            ],
            "return_type": "int",
            "description": "Creates an audio submix with the specified name, or gets the existing audio submix by that name.",
            "examples": [],
            "hash": "0x658D2BC8",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A submix ID, or -1 if the submix could not be created."
        },
        "0x9A209B3C": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_FLOAT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
                },
                {
                    "name": "paramIndex",
                    "type": "int",
                    "description": "The parameter index for the effect."
                },
                {
                    "name": "paramValue",
                    "type": "float",
                    "description": "The parameter value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a floating-point parameter for a submix effect.",
            "examples": [],
            "hash": "0x9A209B3C",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x77FAE2B8": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_INT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
                },
                {
                    "name": "paramIndex",
                    "type": "int",
                    "description": "The parameter index for the effect."
                },
                {
                    "name": "paramValue",
                    "type": "int",
                    "description": "The parameter value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets an integer parameter for a submix effect.",
            "examples": [],
            "hash": "0x77FAE2B8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xAAA94D53": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_RADIO_FX",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix."
                }
            ],
            "return_type": "void",
            "description": "Assigns a RadioFX effect to a submix effect slot.\n\nThe parameter values for this effect are as follows (backticks are used to represent hashes):\n\n| Index | Type | Description |\r\n|-|-|-|\r\n| \\`enabled\\` | int | Enables or disables RadioFX on this DSP. |\r\n| \\`default\\` | int | Sets default parameters for the RadioFX DSP and enables it. |\r\n| \\`freq_low\\` | float |  |\r\n| \\`freq_hi\\` | float |  |\r\n| \\`fudge\\` | float |  |\r\n| \\`rm_mod_freq\\` | float |  |\r\n| \\`rm_mix\\` | float |  |\r\n| \\`o_freq_lo\\` | float |  |\r\n| \\`o_freq_hi\\` | float |  |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- we want to change the master output\r\nlocal submix = 0\r\n\r\n-- add a RadioFX effect to slot 0\r\nSetAudioSubmixEffectRadioFx(submix, 0)\r\n\r\n-- set the default values\r\nSetAudioSubmixEffectParamInt(submix, 0, `default`, 1)"
                }
            ],
            "hash": "0xAAA94D53",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x825DC0D1": {
            "name": "SET_AUDIO_SUBMIX_OUTPUT_VOLUMES",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "outputSlot",
                    "type": "int",
                    "description": "The output slot index."
                },
                {
                    "name": "frontLeftVolume",
                    "type": "float",
                    "description": "The volume for the front left channel."
                },
                {
                    "name": "frontRightVolume",
                    "type": "float",
                    "description": "The volume for the front right channel."
                },
                {
                    "name": "rearLeftVolume",
                    "type": "float",
                    "description": "The volume for the rear left channel."
                },
                {
                    "name": "rearRightVolume",
                    "type": "float",
                    "description": "The volume for the rear right channel."
                },
                {
                    "name": "channel5Volume",
                    "type": "float",
                    "description": "The volume for channel 5."
                },
                {
                    "name": "channel6Volume",
                    "type": "float",
                    "description": "The volume for channel 6."
                }
            ],
            "return_type": "void",
            "description": "Sets the volumes for the sound channels in a submix effect.\r\nValues can be between 0.0 and 1.0.\r\nChannel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.\r\nOutput slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.",
            "examples": [],
            "hash": "0x825DC0D1",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "ENTITY": {
        "0x47B870F5": {
            "name": "GET_ENTITY_ARCHETYPE_NAME",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns entity's archetype name, if available.",
            "examples": [],
            "hash": "0x47B870F5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Entity's archetype name"
        },
        "0xEE43540D": {
            "name": "GET_ENTITY_INDEX_FROM_MAPDATA",
            "params": [
                {
                    "name": "mapdata",
                    "type": "int",
                    "description": "The input map data index from GET_MAPDATA_FROM_HASH_KEY."
                },
                {
                    "name": "entity",
                    "type": "int",
                    "description": "The input entity handle from GET_ENTITY_MAPDATA_OWNER."
                }
            ],
            "return_type": "int",
            "description": "Returns the transient entity index for a specified mapdata/entity pair.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xEE43540D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A transient (non-persistable) index to the requested entity, or -1."
        },
        "0xF6B815C5": {
            "name": "GET_ENTITY_MAPDATA_OWNER",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "An entity owned by map data."
                },
                {
                    "name": "mapdataHandle",
                    "type": "int*",
                    "description": "The output map data handle."
                },
                {
                    "name": "entityHandle",
                    "type": "int*",
                    "description": "The output entity handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Retrieves the map data and entity handles from a specific entity.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xF6B815C5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "True if successful, false if not."
        },
        "0x8143FA4F": {
            "name": "RESET_MAPDATA_ENTITY_MATRIX",
            "params": [
                {
                    "name": "mapDataHash",
                    "type": "int",
                    "description": "A mapdata hash from `mapDataLoaded` event."
                },
                {
                    "name": "entityInternalIdx",
                    "type": "int",
                    "description": "An internal entity's index."
                }
            ],
            "return_type": "BOOL",
            "description": "Resets mapdata entity transform matrix to its original state.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0x8143FA4F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "True if successful, false if not."
        },
        "0x3DD8130F": {
            "name": "SELECT_ENTITY_AT_CURSOR",
            "params": [
                {
                    "name": "hitFlags",
                    "type": "int",
                    "description": "A bit mask of entity types to match."
                },
                {
                    "name": "precise",
                    "type": "BOOL",
                    "description": "Whether to do a *precise* test, i.e. of visual coordinates, too."
                }
            ],
            "return_type": "Entity",
            "description": "Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0x3DD8130F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An entity handle, or zero."
        },
        "0xAFE8D405": {
            "name": "SELECT_ENTITY_AT_POS",
            "params": [
                {
                    "name": "fracX",
                    "type": "float",
                    "description": "Mouse cursor X fraction."
                },
                {
                    "name": "fracY",
                    "type": "float",
                    "description": "Mouse cursor Y fraction."
                },
                {
                    "name": "hitFlags",
                    "type": "int",
                    "description": "A bit mask of entity types to match."
                },
                {
                    "name": "precise",
                    "type": "BOOL",
                    "description": "Whether to do a *precise* test, i.e. of visual coordinates, too."
                }
            ],
            "return_type": "Entity",
            "description": "Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xAFE8D405",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An entity handle, or zero."
        },
        "0xFB0639B": {
            "name": "SET_ENTITY_MATRIX",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "A valid entity handle."
                },
                {
                    "name": "forwardX",
                    "type": "float"
                },
                {
                    "name": "forwardY",
                    "type": "float"
                },
                {
                    "name": "forwardZ",
                    "type": "float"
                },
                {
                    "name": "rightX",
                    "type": "float"
                },
                {
                    "name": "rightY",
                    "type": "float"
                },
                {
                    "name": "rightZ",
                    "type": "float"
                },
                {
                    "name": "upX",
                    "type": "float"
                },
                {
                    "name": "upY",
                    "type": "float"
                },
                {
                    "name": "upZ",
                    "type": "float"
                },
                {
                    "name": "atX",
                    "type": "float"
                },
                {
                    "name": "atY",
                    "type": "float"
                },
                {
                    "name": "atZ",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX.",
            "examples": [],
            "hash": "0xFB0639B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x91B38FB6": {
            "name": "GET_ENTITY_REMOTE_SYNCED_SCENES_ALLOWED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the flag for."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x91B38FB6",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns if the entity is allowed to participate in network-synchronized scenes initiated by clients that do not own the entity."
        },
        "0xD3FC9D88": {
            "name": "SET_ENTITY_REMOTE_SYNCED_SCENES_ALLOWED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set the flag for."
                },
                {
                    "name": "allow",
                    "type": "BOOL",
                    "description": "Whether to allow remote synced scenes for the entity."
                }
            ],
            "return_type": "void",
            "description": "Enables or disables the owner check for the specified entity in network-synchronized scenes. When set to `false`, the entity cannot participate in synced scenes initiated by clients that do not own the entity.\n\nBy default, this is `false` for all entities, meaning only the entity's owner can include it in networked synchronized scenes.",
            "examples": [],
            "hash": "0xD3FC9D88",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5"
        },
        "0xEDBE6ADD": {
            "name": "IS_ENTITY_POSITION_FROZEN",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check for"
                }
            ],
            "return_type": "BOOL",
            "description": "A getter for [FREEZE_ENTITY_POSITION](#\\_0x428CA6DBD1094446).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local isFrozen = IsEntityPositionFrozen(PlayerPedId())"
                },
                {
                    "lang": "js",
                    "code": "const isFrozen = IsEntityPositionFrozen(PlayerPedId());"
                }
            ],
            "hash": "0xEDBE6ADD",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "Boolean stating if it is frozen or not."
        },
        "0x9A3144BC": {
            "name": "GET_ENTITY_ADDRESS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The handle of the entity to get the address of."
                }
            ],
            "return_type": "Any*",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns the memory address of an entity.\n\nThis native is intended for singleplayer debugging, and may not be available during multiplayer.",
            "examples": [],
            "hash": "0x9A3144BC",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A pointer containing the memory address of the entity."
        },
        "0xC1C0855A": {
            "name": "APPLY_FORCE_TO_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle"
                },
                {
                    "name": "forceType",
                    "type": "int",
                    "description": "The force type"
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x component of the force to apply"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y component of the force to apply"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z component of the force to apply"
                },
                {
                    "name": "offX",
                    "type": "float",
                    "description": "Offset from center of entity (X)"
                },
                {
                    "name": "offY",
                    "type": "float",
                    "description": "Offset from center of entity (Y)"
                },
                {
                    "name": "offZ",
                    "type": "float",
                    "description": "Offset from center of entity (Z)"
                },
                {
                    "name": "nComponent",
                    "type": "int",
                    "description": "Component of the entity to apply the force too. Only matters for breakable or articulated (ragdoll) physics. 0 means the root or parent component"
                },
                {
                    "name": "bLocalForce",
                    "type": "BOOL",
                    "description": "Specifies whether the force vector passed in is in local or world coordinates. `true` means the force will get automatically transformed into world space before being applied"
                },
                {
                    "name": "bLocalOffset",
                    "type": "BOOL",
                    "description": "Specifies whether the offset passed in is in local or world coordinates"
                },
                {
                    "name": "bScaleByMass",
                    "type": "BOOL",
                    "description": "Specifies whether to scale the force by mass"
                },
                {
                    "name": "bPlayAudio",
                    "type": "BOOL",
                    "description": "Specifies whether to play audio events related to the force being applied. The audio will depend on the entity type. Currently vehicles are the only entity types supported, and will play a suspension squeal depending on the magnitude of the force"
                },
                {
                    "name": "bScaleByTimeWarp",
                    "type": "BOOL",
                    "description": "Specifies whether to scale the force by time warp. Default is `true`"
                }
            ],
            "return_type": "void",
            "description": "```cpp\nenum eApplyForceTypes {\r\nAPPLY_TYPE_FORCE = 0,\r\nAPPLY_TYPE_IMPULSE = 1,\r\nAPPLY_TYPE_EXTERNAL_FORCE = 2,\r\nAPPLY_TYPE_EXTERNAL_IMPULSE = 3,\r\nAPPLY_TYPE_TORQUE = 4,\r\nAPPLY_TYPE_ANGULAR_IMPULSE = 5\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [APPLY_FORCE_TO_ENTITY](?\\_0xC5F68BE9613E2D18).**",
            "examples": [],
            "hash": "0xC1C0855A",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xFAA3D236": {
            "name": "DELETE_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to delete."
                }
            ],
            "return_type": "void",
            "description": "Deletes the specified entity.\n\n**NOTE**: For trains this will only work if called on the train engine, it will not work on its carriages.",
            "examples": [],
            "hash": "0xFAA3D236",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x3AC90869": {
            "name": "DOES_ENTITY_EXIST",
            "params": [
                {
                    "name": "entity",
                    "type": "Object"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3AC90869",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x65C16D57": {
            "name": "FREEZE_ENTITY_POSITION",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to freeze/unfreeze."
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Freeze or unfreeze entity."
                }
            ],
            "return_type": "void",
            "description": "Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using [`SET_ENTITY_COORDS`](#\\_0x06843DA7060A026B).\n\n**This is the server-side RPC native equivalent of the client native [FREEZE_ENTITY_POSITION](?\\_0x428CA6DBD1094446).**",
            "examples": [],
            "hash": "0x65C16D57",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xFE1589F9": {
            "name": "GET_ENTITY_ATTACHED_TO",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check."
                }
            ],
            "return_type": "Entity",
            "description": "Gets the entity that this entity is attached to.",
            "examples": [],
            "hash": "0xFE1589F9",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The attached entity handle. 0 returned if the entity is not attached."
        },
        "0xE8C0C629": {
            "name": "GET_ENTITY_COLLISION_DISABLED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The target entity."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE8C0C629",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns whether or not entity collisions are disabled."
        },
        "0x1647F1CB": {
            "name": "GET_ENTITY_COORDS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the coordinates from."
                }
            ],
            "return_type": "Vector3",
            "description": "Gets the current coordinates for a specified entity. This native is used server side when using OneSync.\n\nSee [GET_ENTITY_COORDS](#\\_0x3FEF770D40960D5A) for client side.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local function ShowCoordinates()\r\n    local player = source\r\n    local ped = GetPlayerPed(player)\r\n    local playerCoords = GetEntityCoords(ped)\r\n\r\n    print(playerCoords) -- vector3(...)\r\nend\r\n\r\nRegisterNetEvent(\"myCoordinates\")\r\nAddEventHandler(\"myCoordinates\", ShowCoordinates)"
                },
                {
                    "lang": "js",
                    "code": "onNet('myCoordinates', () => {\r\n  const player = global.source; // use (global as any).source for Typescript\r\n  const ped = GetPlayerPed(player);\r\n  const [playerX, playerY, playerZ] = GetEntityCoords(ped);\r\n\r\n  console.log(`${playerX}, ${playerY}, ${playerZ}`);\r\n});"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\r\n// ...\r\n\r\n// In class constructor\r\nEventHandlers[\"myCoordinates\"] += new Action<Player>(ShowCoordinates);\r\n\r\n// Delegate method\r\nprivate void ShowCoordinates([FromSource]Player player) {\r\n    Vector3 playerCoords = GetEntityCoords(player.Character);\r\n\r\n    // or the preferred use of C# wrapper\r\n    Vector3 playerCoords = player.Character.Position;\r\n\r\n    Debug.WriteLine($\"{playerCoords}\");\r\n}\r\n"
                }
            ],
            "hash": "0x1647F1CB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The current entity coordinates."
        },
        "0x972CC383": {
            "name": "GET_ENTITY_HEADING",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x972CC383",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x8E3222B7": {
            "name": "GET_ENTITY_HEALTH",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check the health of"
                }
            ],
            "return_type": "int",
            "description": "Only works for vehicle and peds",
            "examples": [],
            "hash": "0x8E3222B7",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "If the entity is a vehicle it will return 0-1000\r\nIf the entity is a ped it will return 0-200\r\nIf the entity is an object it will return 0"
        },
        "0xC7AE6AA1": {
            "name": "GET_ENTITY_MAX_HEALTH",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "int",
            "description": "Currently it only works with peds.",
            "examples": [],
            "hash": "0xC7AE6AA1",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xDAFCB3EC": {
            "name": "GET_ENTITY_MODEL",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "Hash",
            "description": "",
            "examples": [],
            "hash": "0xDAFCB3EC",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xD16EA02F": {
            "name": "GET_ENTITY_ORPHAN_MODE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the orphan mode of"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xD16EA02F",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns the entities current orphan mode, refer to enum in [SET_ENTITY_ORPHAN_MODE](#\\_0x489E9162)"
        },
        "0xFC30DDFF": {
            "name": "GET_ENTITY_POPULATION_TYPE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "the entity to obtain the population type from"
                }
            ],
            "return_type": "int",
            "description": "This native gets an entity's population type.",
            "examples": [],
            "hash": "0xFC30DDFF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns the population type ID, defined by the below enumeration:```cpp\nenum ePopulationType\r\n{\r\n\tPOPTYPE_UNKNOWN = 0,\r\n\tPOPTYPE_RANDOM_PERMANENT,\r\n\tPOPTYPE_RANDOM_PARKED,\r\n\tPOPTYPE_RANDOM_PATROL,\r\n\tPOPTYPE_RANDOM_SCENARIO,\r\n\tPOPTYPE_RANDOM_AMBIENT,\r\n\tPOPTYPE_PERMANENT,\r\n\tPOPTYPE_MISSION,\r\n\tPOPTYPE_REPLAY,\r\n\tPOPTYPE_CACHE,\r\n\tPOPTYPE_TOOL\r\n};\n```"
        },
        "0x8FF45B04": {
            "name": "GET_ENTITY_ROTATION",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x8FF45B04",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x9BF8A73F": {
            "name": "GET_ENTITY_ROTATION_VELOCITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x9BF8A73F",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xED4B0486": {
            "name": "GET_ENTITY_ROUTING_BUCKET",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the routing bucket for."
                }
            ],
            "return_type": "int",
            "description": "Gets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
            "examples": [],
            "hash": "0xED4B0486",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The routing bucket ID."
        },
        "0xB7F70784": {
            "name": "GET_ENTITY_SCRIPT",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xB7F70784",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x9E1E4798": {
            "name": "GET_ENTITY_SPEED",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the speed of"
                }
            ],
            "return_type": "float",
            "description": "Gets the current speed of the entity in meters per second.\n\n```\nTo convert to MPH: speed * 2.236936\r\nTo convert to KPH: speed * 3.6\n```",
            "examples": [],
            "hash": "0x9E1E4798",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The speed of the entity in meters per second"
        },
        "0xB1BD08D": {
            "name": "GET_ENTITY_TYPE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the type of."
                }
            ],
            "return_type": "int",
            "description": "Gets the entity type (as an integer), which can be one of the following defined down below:\n\n**The following entities will return type `1`:**\n\n*   Ped\n*   Player\n*   Animal (Red Dead Redemption 2)\n*   Horse (Red Dead Redemption 2)\n\n**The following entities will return type `2`:**\n\n*   Automobile\n*   Bike\n*   Boat\n*   Heli\n*   Plane\n*   Submarine\n*   Trailer\n*   Train\n*   DraftVeh (Red Dead Redemption 2)\n\n**The following entities will return type `3`:**\n\n*   Object\n*   Door\n*   Pickup\n\nOtherwise, a value of `0` will be returned.",
            "examples": [],
            "hash": "0xB1BD08D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The entity type returned as an integer value."
        },
        "0xC14C9B6B": {
            "name": "GET_ENTITY_VELOCITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xC14C9B6B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x23B2A641": {
            "name": "GET_NET_TYPE_FROM_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the specific type of."
                }
            ],
            "return_type": "int",
            "description": "Gets the specific entity type (as an integer), which can be one of the following defined down below:\n\n#### FiveM:\n\n```cpp\nenum eNetObjEntityType\r\n{\r\n    Automobile = 0,\r\n    Bike = 1,\r\n    Boat = 2,\r\n    Door = 3,\r\n    Heli = 4,\r\n    Object = 5,\r\n    Ped = 6,\r\n    Pickup = 7,\r\n    PickupPlacement = 8,\r\n    Plane = 9,\r\n    Submarine = 10,\r\n    Player = 11,\r\n    Trailer = 12,\r\n    Train = 13\r\n};\n```\n\n#### RedM:\n\n```cpp\nenum eNetObjEntityType\r\n{\r\n    Animal = 0,\r\n    Automobile = 1,\r\n    Bike = 2,\r\n    Boat = 3,\r\n    Door = 4,\r\n    Heli = 5,\r\n    Object = 6,\r\n    Ped = 7,\r\n    Pickup = 8,\r\n    PickupPlacement = 9,\r\n    Plane = 10,\r\n    Submarine = 11,\r\n    Player = 12,\r\n    Trailer = 13,\r\n    Train = 14,\r\n    DraftVeh = 15,\r\n    StatsTracker = 16,\r\n    PropSet = 17,\r\n    AnimScene = 18,\r\n    GroupScenario = 19,\r\n    Herd = 20,\r\n    Horse = 21,\r\n    WorldState = 22,\r\n    WorldProjectile = 23,\r\n    Incident = 24,\r\n    Guardzone = 25,\r\n    PedGroup = 26,\r\n    CombatDirector = 27,\r\n    PedSharedTargeting = 28,\r\n    Persistent = 29\r\n};\n```",
            "examples": [],
            "hash": "0x23B2A641",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The specific entity type returned as an integer value or -1 if the entity is invalid."
        },
        "0x9C9A3BE0": {
            "name": "HAS_ENTITY_BEEN_MARKED_AS_NO_LONGER_NEEDED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9C9A3BE0",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x120B4ED5": {
            "name": "IS_ENTITY_VISIBLE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "BOOL",
            "description": "This native checks if the given entity is visible.",
            "examples": [],
            "hash": "0x120B4ED5",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns `true` if the entity is visible, `false` otherwise."
        },
        "0xDF70B41B": {
            "name": "SET_ENTITY_COORDS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to change coordinates for."
                },
                {
                    "name": "xPos",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "yPos",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "zPos",
                    "type": "float",
                    "description": "The Z coordinate, ground level."
                },
                {
                    "name": "alive",
                    "type": "BOOL",
                    "description": "Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive."
                },
                {
                    "name": "deadFlag",
                    "type": "BOOL",
                    "description": "Whether to disable physics for dead peds, too, and not just living peds."
                },
                {
                    "name": "ragdollFlag",
                    "type": "BOOL",
                    "description": "A special flag used for ragdolling peds."
                },
                {
                    "name": "clearArea",
                    "type": "BOOL",
                    "description": "Whether to clear any entities in the target area."
                }
            ],
            "return_type": "void",
            "description": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_COORDS](?\\_0x06843DA7060A026B).**",
            "examples": [],
            "hash": "0xDF70B41B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD3A183A3": {
            "name": "SET_ENTITY_DISTANCE_CULLING_RADIUS",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to override the distance culling radius."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The new distance culling radius."
                }
            ],
            "return_type": "void",
            "description": "It overrides the default distance culling radius of an entity. Set to `0.0` to reset.\r\nIf you want to interact with an entity outside of your players' scopes set the radius to a huge number.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)",
            "examples": [],
            "hash": "0xD3A183A3",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xE0FF064D": {
            "name": "SET_ENTITY_HEADING",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set the heading for."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "The heading in degrees."
                }
            ],
            "return_type": "void",
            "description": "Set the heading of an entity in degrees also known as \"Yaw\".\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_HEADING](?\\_0x8E2530AA8ADA980E).**",
            "examples": [],
            "hash": "0xE0FF064D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9F7F8D36": {
            "name": "SET_ENTITY_IGNORE_REQUEST_CONTROL_FILTER",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to ignore the request control filter."
                },
                {
                    "name": "ignore",
                    "type": "BOOL",
                    "description": "Define if the entity ignores the request control filter policy."
                }
            ],
            "return_type": "void",
            "description": "It allows to flag an entity to ignore the request control filter policy.",
            "examples": [],
            "hash": "0x9F7F8D36",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x489E9162": {
            "name": "SET_ENTITY_ORPHAN_MODE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set the orphan mode of"
                },
                {
                    "name": "orphanMode",
                    "type": "int",
                    "description": "The mode that the server should use for determining if an entity should be removed."
                }
            ],
            "return_type": "void",
            "description": "```cpp\nenum EntityOrphanMode {\r\n    // Default, this will delete the entity when it isn't relevant to any players\r\n    // NOTE: this *doesn't* mean when they're no longer in scope\r\n    DeleteWhenNotRelevant = 0,\r\n    // The entity will be deleted whenever its original owner disconnects\r\n    // NOTE: if this is set when the entities original owner has already left it will be\r\n    // marked for deletion (similar to just calling DELETE_ENTITY)\r\n    DeleteOnOwnerDisconnect = 1,\r\n    // The entity will never be deleted by the server when it does relevancy checks\r\n    // you should only use this on entities that need to be relatively persistent\r\n    KeepEntity = 2\r\n}\n```\n\nSets what the server will do when the entity no longer has its original owner. By default the server will cleanup entities that it considers \"no longer relevant\".\n\nWhen used on trains, this native will recursively call onto all attached carriages.\n\n**NOTE**: When used with `KeepEntity` (2) this native only guarantees that the ***server*** will not delete the entity, client requests to delete the entity will still work perfectly fine.",
            "examples": [],
            "hash": "0x489E9162",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA345EFE": {
            "name": "SET_ENTITY_ROTATION",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to rotate."
                },
                {
                    "name": "pitch",
                    "type": "float",
                    "description": "The pitch (X-axis) rotation in degrees."
                },
                {
                    "name": "roll",
                    "type": "float",
                    "description": "The roll (Y-axis) rotation in degrees."
                },
                {
                    "name": "yaw",
                    "type": "float",
                    "description": "The yaw (Z-axis) rotation in degrees."
                },
                {
                    "name": "rotationOrder",
                    "type": "int",
                    "description": "Specifies the order in which yaw, pitch, and roll are applied, see [`GET_ENTITY_ROTATION`](#\\_0xAFBD61CC738D9EB9) for the available rotation orders."
                },
                {
                    "name": "bDeadCheck",
                    "type": "BOOL",
                    "description": "Usually set to `true`. Determines whether to check if the entity is dead before applying the rotation."
                }
            ],
            "return_type": "void",
            "description": "Sets the rotation of a specified entity in the game world.\n\n```\nNativeDB Introduced: v323\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_ROTATION](?\\_0x8524A8B0171D5E07).**",
            "examples": [],
            "hash": "0xA345EFE",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x635E5289": {
            "name": "SET_ENTITY_ROUTING_BUCKET",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to set the routing bucket for."
                },
                {
                    "name": "bucket",
                    "type": "int",
                    "description": "The bucket ID."
                }
            ],
            "return_type": "void",
            "description": "Sets the routing bucket for the specified entity.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
            "examples": [],
            "hash": "0x635E5289",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xFF5A1988": {
            "name": "SET_ENTITY_VELOCITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "```\nNote that the third parameter(denoted as z) is \"up and down\" with positive numbers encouraging upwards movement.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_ENTITY_VELOCITY](?\\_0x1C99BB7B6E96D16F).**",
            "examples": [],
            "hash": "0xFF5A1988",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x3BB78F05": {
            "name": "ENSURE_ENTITY_STATE_BAG",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "void",
            "description": "Internal function for ensuring an entity has a state bag.",
            "examples": [],
            "hash": "0x3BB78F05",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xDFFBA12F": {
            "name": "GET_ENTITIES_IN_RADIUS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Max distance from coordinate to entity"
                },
                {
                    "name": "entityType",
                    "type": "int",
                    "description": "Entity types see list below"
                },
                {
                    "name": "sortByDistance",
                    "type": "BOOL",
                    "description": "Sort output entites by distance from nearest to farthest"
                },
                {
                    "name": "models",
                    "type": "Object",
                    "description": "List of allowed models its also optional"
                }
            ],
            "return_type": "Object",
            "description": "### Supported types\n\n*   \\[1] : Peds (including animals) and players.\n*   \\[2] : Vehicles.\n*   \\[3] : Objects (props), doors, and projectiles.\n\n### Coordinates need to be send unpacked (x,y,z)\n\n```lua\n\r\n-- Define the allowed model hashes\r\nlocal allowedModelHashes = { GetHashKey(\"p_crate03x\"), GetHashKey(\"p_crate22x\") }\r\n\r\n-- Get the player's current coordinates\r\nlocal playerCoords = GetEntityCoords(PlayerPedId())\r\n\r\n-- Retrieve all entities of type Object (type 3) within a radius of 10.0 units\r\n-- that match the allowed model hashes\r\n-- and sort output entities by distance\r\nlocal entities = GetEntitiesInRadius(playerCoords.x, playerCoords.y, playerCoords.z, 10.0, 3, true, allowedModelHashes)\r\n\r\n-- Iterate through the list of entities and print their ids\r\nfor i = 1, #entities do\r\n    local entity = entities[i]\r\n    print(entity)\r\nend\r\n\n```",
            "examples": [],
            "hash": "0xDFFBA12F",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An array containing entity handles for each entity."
        },
        "0x4BDF1867": {
            "name": "GET_ENTITY_FROM_STATE_BAG_NAME",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "An internal state bag ID from the argument to a state bag change handler."
                }
            ],
            "return_type": "Entity",
            "description": "Returns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](#\\_0x5BA35AAF).",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we were don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity == 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
                }
            ],
            "hash": "0x4BDF1867",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The entity handle or 0 if the state bag name did not refer to an entity, or the entity does not exist."
        }
    },
    "GRAPHICS": {
        "0x4AFD2499": {
            "name": "ADD_MINIMAP_OVERLAY",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The path to a `.gfx` file in the current resource. It has to be specified as a `file`."
                }
            ],
            "return_type": "int",
            "description": "Loads a minimap overlay from a GFx file in the current resource.\n\nIf you need to control the depth of overlay use [`ADD_MINIMAP_OVERLAY_WITH_DEPTH`](#\\_0xED0935B5).",
            "examples": [],
            "hash": "0x4AFD2499",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A minimap overlay ID."
        },
        "0xED0935B5": {
            "name": "ADD_MINIMAP_OVERLAY_WITH_DEPTH",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The path to a `.gfx` file in the current resource. It has to be specified as a `file`."
                },
                {
                    "name": "depth",
                    "type": "int",
                    "description": "The depth of new overlay on the minimap. Pass `-1` for game to figure out the highest depth itself. Should not be greater than `0x7EFFFFFD`."
                }
            ],
            "return_type": "int",
            "description": "Loads a minimap overlay from a GFx file in the current resource.",
            "examples": [],
            "hash": "0xED0935B5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A minimap overlay ID."
        },
        "0xA66F8F75": {
            "name": "ADD_REPLACE_TEXTURE",
            "params": [
                {
                    "name": "origTxd",
                    "type": "const char*"
                },
                {
                    "name": "origTxn",
                    "type": "const char*"
                },
                {
                    "name": "newTxd",
                    "type": "const char*"
                },
                {
                    "name": "newTxn",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "Experimental natives, please do not use in a live environment.",
            "examples": [],
            "hash": "0xA66F8F75",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4C89C0ED": {
            "name": "CALL_MINIMAP_SCALEFORM_FUNCTION",
            "params": [
                {
                    "name": "miniMap",
                    "type": "int",
                    "description": "The minimap overlay ID."
                },
                {
                    "name": "fnName",
                    "type": "const char*",
                    "description": "A function in the overlay's TIMELINE."
                }
            ],
            "return_type": "BOOL",
            "description": "This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.",
            "examples": [],
            "hash": "0x4C89C0ED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x19D81F4E": {
            "name": "COMMIT_RUNTIME_TEXTURE",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "The runtime texture handle."
                }
            ],
            "return_type": "void",
            "description": "Commits the backing pixels to the specified runtime texture.",
            "examples": [],
            "hash": "0x19D81F4E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFEC3766D": {
            "name": "CREATE_RUNTIME_TEXTURE",
            "params": [
                {
                    "name": "txd",
                    "type": "long",
                    "description": "A handle to the runtime TXD to create the runtime texture in."
                },
                {
                    "name": "txn",
                    "type": "const char*",
                    "description": "The name for the texture in the runtime texture dictionary."
                },
                {
                    "name": "width",
                    "type": "int",
                    "description": "The width of the new texture."
                },
                {
                    "name": "height",
                    "type": "int",
                    "description": "The height of the new texture."
                }
            ],
            "return_type": "long",
            "description": "Creates a blank runtime texture.",
            "examples": [],
            "hash": "0xFEC3766D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A runtime texture handle."
        },
        "0xB135472B": {
            "name": "CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE",
            "params": [
                {
                    "name": "txd",
                    "type": "long",
                    "description": "A handle to the runtime TXD to create the runtime texture in."
                },
                {
                    "name": "txn",
                    "type": "const char*",
                    "description": "The name for the texture in the runtime texture dictionary."
                },
                {
                    "name": "duiHandle",
                    "type": "const char*",
                    "description": "The DUI handle returned from GET_DUI_HANDLE."
                }
            ],
            "return_type": "long",
            "description": "Creates a runtime texture from a DUI handle.",
            "examples": [],
            "hash": "0xB135472B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The runtime texture handle."
        },
        "0x786D8BC3": {
            "name": "CREATE_RUNTIME_TEXTURE_FROM_IMAGE",
            "params": [
                {
                    "name": "txd",
                    "type": "long",
                    "description": "A handle to the runtime TXD to create the runtime texture in."
                },
                {
                    "name": "txn",
                    "type": "const char*",
                    "description": "The name for the texture in the runtime texture dictionary."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The file name of an image to load or a base64 data URL. This should preferably be a PNG, and has to be specified as a `file` in the resource manifest."
                }
            ],
            "return_type": "long",
            "description": "Creates a runtime texture from the specified file in the current resource or a base64 data URL.",
            "examples": [],
            "hash": "0x786D8BC3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A runtime texture handle."
        },
        "0x1F3AC778": {
            "name": "CREATE_RUNTIME_TXD",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name for the runtime TXD."
                }
            ],
            "return_type": "long",
            "description": "Creates a runtime texture dictionary with the specified name.\r\nExample:\n\n```lua\nlocal txd = CreateRuntimeTxd('meow')\n```",
            "examples": [],
            "hash": "0x1F3AC778",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A handle to the runtime TXD."
        },
        "0xFF44780E": {
            "name": "DRAW_CORONA",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The X position of the corona origin."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The Y position of the corona origin."
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The Z position of the corona origin."
                },
                {
                    "name": "size",
                    "type": "float",
                    "description": "The size of the corona."
                },
                {
                    "name": "red",
                    "type": "int",
                    "description": "The red component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "green",
                    "type": "int",
                    "description": "The green component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "blue",
                    "type": "int",
                    "description": "The blue component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "The alpha component of the marker color, on a scale from 0-255."
                },
                {
                    "name": "intensity",
                    "type": "float",
                    "description": "The intensity of the corona."
                },
                {
                    "name": "zBias",
                    "type": "float",
                    "description": "zBias slightly shifts the depth of surfaces to make sure they donâ€™t overlap or cause visual glitches when they are very close together. The zBias value are usually in the range of 0.0 to 1.0."
                },
                {
                    "name": "dirX",
                    "type": "float",
                    "description": "The X direction of the corona."
                },
                {
                    "name": "dirY",
                    "type": "float",
                    "description": "The Y direction of the corona."
                },
                {
                    "name": "dirZ",
                    "type": "float",
                    "description": "The Z direction of the corona."
                },
                {
                    "name": "viewThreshold",
                    "type": "float",
                    "description": "The view threshold is to determine the fading of the corona based on the distance."
                },
                {
                    "name": "innerAngle",
                    "type": "float",
                    "description": "The inner angle of the corona."
                },
                {
                    "name": "outerAngle",
                    "type": "float",
                    "description": "The outer angle of the corona."
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "The corona flags."
                }
            ],
            "return_type": "void",
            "description": "Allows drawing advanced light effects, known as coronas, which support flares, volumetric lighting, and customizable glow properties.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local pedCoords = GetEntityCoords(PlayerPedId())\r\nCitizen.CreateThread(function()\r\n    while true do\r\n        DrawCorona(pedCoords.x, pedCoords.y, pedCoords.z, 5.0, 255, 255, 255, 255, 4.0, 0.2, pedCoords.x, pedCoords.y, pedCoords.z, 1.0, 0.0, 90.0, 2)\r\n        Wait(0)\r\n    end\r\nend)"
                }
            ],
            "hash": "0xFF44780E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEB2EDCA2": {
            "name": "DRAW_GIZMO",
            "params": [
                {
                    "name": "matrixPtr",
                    "type": "long",
                    "description": "A mutable pointer to a 64-byte buffer of floating-point values, representing an XMFLOAT4X4 in layout."
                },
                {
                    "name": "id",
                    "type": "const char*",
                    "description": "A unique identifier of what the gizmo is affecting."
                }
            ],
            "return_type": "BOOL",
            "description": "Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1].",
            "examples": [],
            "hash": "0xEB2EDCA2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Whether or not the matrix was modified."
        },
        "0xBD25EC89": {
            "name": "DRAW_GLOW_SPHERE",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Position X."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Position Y."
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "Position Z."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Sphere radius."
                },
                {
                    "name": "colorR",
                    "type": "int",
                    "description": "Red."
                },
                {
                    "name": "colorG",
                    "type": "int",
                    "description": "Green."
                },
                {
                    "name": "colorB",
                    "type": "int",
                    "description": "Blue."
                },
                {
                    "name": "intensity",
                    "type": "float",
                    "description": "Intensity."
                },
                {
                    "name": "invert",
                    "type": "BOOL",
                    "description": "Invert rendering."
                },
                {
                    "name": "marker",
                    "type": "BOOL",
                    "description": "Draw as a marker, otherwise as an overlay."
                }
            ],
            "return_type": "void",
            "description": "Draw a glow sphere this frame. Up to 256 per single frame.",
            "examples": [],
            "hash": "0xBD25EC89",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB856A90": {
            "name": "DRAW_LINE_2D",
            "params": [
                {
                    "name": "x1",
                    "type": "float",
                    "description": "First x."
                },
                {
                    "name": "y1",
                    "type": "float",
                    "description": "First y."
                },
                {
                    "name": "x2",
                    "type": "float",
                    "description": "Second x."
                },
                {
                    "name": "y2",
                    "type": "float",
                    "description": "Second y."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of line."
                },
                {
                    "name": "r",
                    "type": "int",
                    "description": "Red."
                },
                {
                    "name": "g",
                    "type": "int",
                    "description": "Green."
                },
                {
                    "name": "b",
                    "type": "int",
                    "description": "Blue."
                },
                {
                    "name": "a",
                    "type": "int",
                    "description": "Alpha."
                }
            ],
            "return_type": "void",
            "description": "Like DRAW_RECT, but it's a line.",
            "examples": [],
            "hash": "0xB856A90",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEC37C168": {
            "name": "DRAW_RECT_ROTATED",
            "params": [
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "width",
                    "type": "float"
                },
                {
                    "name": "height",
                    "type": "float"
                },
                {
                    "name": "rotation",
                    "type": "float"
                },
                {
                    "name": "r",
                    "type": "int"
                },
                {
                    "name": "g",
                    "type": "int"
                },
                {
                    "name": "b",
                    "type": "int"
                },
                {
                    "name": "a",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "DRAW_RECT, but with a rotation. Seems to be broken.",
            "examples": [],
            "hash": "0xEC37C168",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xE6E16170": {
            "name": "FORCE_SNOW_PASS",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Whether or not to force rendering to use a snow pass."
                }
            ],
            "return_type": "void",
            "description": "Forces the game snow pass to render.",
            "examples": [],
            "hash": "0xE6E16170",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xE5AF7A82": {
            "name": "GET_PAUSE_MAP_POINTER_WORLD_POSITION",
            "params": [],
            "return_type": "Vector3",
            "description": "Returns the world position the pointer is hovering on the pause map.",
            "examples": [],
            "hash": "0xE5AF7A82",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A Vector3 with the pause map pointer world position X and Y values."
        },
        "0x3574AACE": {
            "name": "GET_RUNTIME_TEXTURE_HEIGHT",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "A handle to the runtime texture."
                }
            ],
            "return_type": "int",
            "description": "Gets the height of the specified runtime texture.",
            "examples": [],
            "hash": "0x3574AACE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The height in pixels."
        },
        "0xCA0A085F": {
            "name": "GET_RUNTIME_TEXTURE_PITCH",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "A handle to the runtime texture."
                }
            ],
            "return_type": "int",
            "description": "Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.",
            "examples": [],
            "hash": "0xCA0A085F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The row pitch in bytes."
        },
        "0xC9F55558": {
            "name": "GET_RUNTIME_TEXTURE_WIDTH",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "A handle to the runtime texture."
                }
            ],
            "return_type": "int",
            "description": "Gets the width of the specified runtime texture.",
            "examples": [],
            "hash": "0xC9F55558",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The width in pixels."
        },
        "0xF7535F32": {
            "name": "HAS_MINIMAP_OVERLAY_LOADED",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "A minimap overlay ID."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not the specific minimap overlay has loaded.",
            "examples": [],
            "hash": "0xF7535F32",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A boolean indicating load status."
        },
        "0xA896B20A": {
            "name": "REMOVE_REPLACE_TEXTURE",
            "params": [
                {
                    "name": "origTxd",
                    "type": "const char*"
                },
                {
                    "name": "origTxn",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "Experimental natives, please do not use in a live environment.",
            "examples": [],
            "hash": "0xA896B20A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x8EB6EC38": {
            "name": "RESET_ENTITY_DRAW_OUTLINE_RENDER_TECHNIQUE",
            "params": [],
            "return_type": "void",
            "description": "This function undoes changes made by [`SET_ENTITY_DRAW_OUTLINE_RENDER_TECHNIQUE`](#\\_0x68DFF2DD), restoring the original outline rendering behavior. The default render technique group is `unlit`.",
            "examples": [],
            "hash": "0x8EB6EC38",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x76180407": {
            "name": "SET_ENTITY_DRAW_OUTLINE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "A valid entity handle."
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Whether or not to draw an outline."
                }
            ],
            "return_type": "void",
            "description": "Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0x76180407",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB41A56C2": {
            "name": "SET_ENTITY_DRAW_OUTLINE_COLOR",
            "params": [
                {
                    "name": "red",
                    "type": "int",
                    "description": "Red component of color."
                },
                {
                    "name": "green",
                    "type": "int",
                    "description": "Green component of color."
                },
                {
                    "name": "blue",
                    "type": "int",
                    "description": "Blue component of color."
                },
                {
                    "name": "alpha",
                    "type": "int",
                    "description": "Alpha component of color, ignored for shader `0`."
                }
            ],
            "return_type": "void",
            "description": "Sets color for entity outline. `255, 0, 255, 255` by default.",
            "examples": [],
            "hash": "0xB41A56C2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x68DFF2DD": {
            "name": "SET_ENTITY_DRAW_OUTLINE_RENDER_TECHNIQUE",
            "params": [
                {
                    "name": "techniqueGroup",
                    "type": "const char*",
                    "description": "Technique group name."
                }
            ],
            "return_type": "void",
            "description": "Sets the render technique for drawing an entity's outline. This function allows you to specify a technique group name to control how the entity's outline is rendered in the game.\n\nList of known technique group's:\n\n```\nalt0\r\nalt1\r\nalt2\r\nalt3\r\nalt4\r\nalt5\r\nalt6\r\nalt7\r\nalt8\r\nblit\r\ncube\r\ndefault\r\ngeometry\r\nimposter\r\nimposterdeferred\r\nlightweight0\r\nlightweight0CutOut\r\nlightweight0CutOutTint\r\nlightweight0WaterRefractionAlpha\r\nlightweight4\r\nlightweight4CutOut\r\nlightweight4CutOutTint\r\nlightweight4WaterRefractionAlpha\r\nlightweight8\r\nlightweight8CutOut\r\nlightweight8CutOutTint\r\nlightweight8WaterRefractionAlpha\r\nlightweightHighQuality0\r\nlightweightHighQuality0CutOut\r\nlightweightHighQuality0WaterRefractionAlpha\r\nlightweightHighQuality4\r\nlightweightHighQuality4CutOut\r\nlightweightHighQuality4WaterRefractionAlpha\r\nlightweightHighQuality8\r\nlightweightHighQuality8CutOut\r\nlightweightHighQuality8WaterRefractionAlpha\r\nlightweightNoCapsule4\r\nlightweightNoCapsule8\r\nmultilight\r\ntessellate\r\nui\r\nunlit\r\nwaterreflection\r\nwaterreflectionalphaclip\r\nwaterreflectionalphacliptint\r\nwdcascade\n```",
            "examples": [],
            "hash": "0x68DFF2DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x5261A01A": {
            "name": "SET_ENTITY_DRAW_OUTLINE_SHADER",
            "params": [
                {
                    "name": "shader",
                    "type": "int",
                    "description": "An outline shader variant."
                }
            ],
            "return_type": "void",
            "description": "Sets variant of shader that will be used to draw entity outline.\n\nVariants are:\n\n*   **0**: Default value, gauss shader.\n*   **1**: 2px wide solid color outline.\n*   **2**: Fullscreen solid color except for entity.",
            "examples": [],
            "hash": "0x5261A01A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFBC64DA3": {
            "name": "SET_FOG_VOLUME_RENDER_DISABLED",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggle on or off."
                }
            ],
            "return_type": "void",
            "description": "This completely disables rendering of fog volumes (vfxfogvolumeinfo.ymt).",
            "examples": [],
            "hash": "0xFBC64DA3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB8B4490C": {
            "name": "SET_MINIMAP_CLIP_TYPE",
            "params": [
                {
                    "name": "type",
                    "type": "int",
                    "description": "0 for rectangular, 1 for rounded."
                }
            ],
            "return_type": "void",
            "description": "Sets the type for the minimap blip clipping object to be either rectangular or rounded.",
            "examples": [],
            "hash": "0xB8B4490C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3E882B23": {
            "name": "SET_MINIMAP_COMPONENT_POSITION",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name of the minimap component to override."
                },
                {
                    "name": "alignX",
                    "type": "const char*",
                    "description": "Equivalent to the `alignX` field in `frontend.xml`."
                },
                {
                    "name": "alignY",
                    "type": "const char*",
                    "description": "Equivalent to the `alignY` field in `frontend.xml`."
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Equivalent to the `posX` field in `frontend.xml`."
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Equivalent to the `posY` field in `frontend.xml`."
                },
                {
                    "name": "sizeX",
                    "type": "float",
                    "description": "Equivalent to the `sizeX` field in `frontend.xml`."
                },
                {
                    "name": "sizeY",
                    "type": "float",
                    "description": "Equivalent to the `sizeY` field in `frontend.xml`."
                }
            ],
            "return_type": "void",
            "description": "Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.",
            "examples": [],
            "hash": "0x3E882B23",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x6A48B3CA": {
            "name": "SET_MINIMAP_OVERLAY_DISPLAY",
            "params": [
                {
                    "name": "miniMap",
                    "type": "int",
                    "description": "The minimap overlay ID."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X position for the overlay. This is equivalent to a game coordinate X."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y position for the overlay. This is equivalent to a game coordinate Y, except that it's inverted (gfxY = -gameY)."
                },
                {
                    "name": "xScale",
                    "type": "float",
                    "description": "The X scale for the overlay. This is equivalent to the Flash \\_xscale property, therefore 100 = 100%."
                },
                {
                    "name": "yScale",
                    "type": "float",
                    "description": "The Y scale for the overlay. This is equivalent to the Flash \\_yscale property."
                },
                {
                    "name": "alpha",
                    "type": "float",
                    "description": "The alpha value for the overlay. This is equivalent to the Flash \\_alpha property, therefore 100 = 100%."
                }
            ],
            "return_type": "void",
            "description": "Sets the display info for a minimap overlay.",
            "examples": [],
            "hash": "0x6A48B3CA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3963D527": {
            "name": "SET_RUNTIME_TEXTURE_ARGB_DATA",
            "params": [
                {
                    "name": "tex",
                    "type": "long"
                },
                {
                    "name": "buffer",
                    "type": "const char*"
                },
                {
                    "name": "length",
                    "type": "int"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3963D527",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x28FC4ECB": {
            "name": "SET_RUNTIME_TEXTURE_IMAGE",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "A runtime texture handle."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The file name of an image to load, or a base64 \"data:\" URL. This should preferably be a PNG, and has to be specified as a `file` in the resource manifest."
                }
            ],
            "return_type": "BOOL",
            "description": "Replaces the pixel data in a runtime texture with the image data from a file in the current resource, or a data URL.\n\nIf the bitmap is a different size compared to the existing texture, it will be resampled.\n\nThis command may end up executed asynchronously, and only update the texture data at a later time.",
            "examples": [],
            "hash": "0x28FC4ECB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "TRUE for success, FALSE for failure."
        },
        "0xAB65ACEE": {
            "name": "SET_RUNTIME_TEXTURE_PIXEL",
            "params": [
                {
                    "name": "tex",
                    "type": "long",
                    "description": "A handle to the runtime texture."
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The X position of the pixel to change."
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The Y position of the pixel to change."
                },
                {
                    "name": "r",
                    "type": "int",
                    "description": "The new R value (0-255)."
                },
                {
                    "name": "g",
                    "type": "int",
                    "description": "The new G value (0-255)."
                },
                {
                    "name": "b",
                    "type": "int",
                    "description": "The new B value (0-255)."
                },
                {
                    "name": "a",
                    "type": "int",
                    "description": "The new A value (0-255)."
                }
            ],
            "return_type": "void",
            "description": "Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.",
            "examples": [],
            "hash": "0xAB65ACEE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF1BD2CEF": {
            "name": "SET_WET_CLOTH_PIN_RADIUS_SCALE",
            "params": [
                {
                    "name": "scale",
                    "type": "float",
                    "description": "A value that controls the wet cloth radius scale, default: 0.3, maximum: 1.0(used for dry cloth by default), lower values increase the adhesion effect of wet cloth, making it cling more tightly to the surface."
                }
            ],
            "return_type": "void",
            "description": "Modifies the radius scale used in the simulation of wet cloth physics.\r\nThis affects how cloth behaves when wet, changing how it sticks or reacts to movement.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetWetClothPinRadiusScale(1.0)"
                }
            ],
            "hash": "0xF1BD2CEF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xDD76B263": {
            "name": "CLEAR_DRAW_ORIGIN",
            "params": [],
            "return_type": "void",
            "description": "Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\\_0xE10198D5) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\\_0xE10198D5) for further information.",
            "examples": [],
            "hash": "0xDD76B263",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x8B25BC20": {
            "name": "DOES_TEXTURE_EXIST",
            "params": [
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "texture id created by `0xC5E7204F322E49EB`."
                }
            ],
            "return_type": "BOOL",
            "description": "In compare to `0x31DC8D3F216D8509` return true if texture its created when `0x31DC8D3F216D8509` return true if you put there any id in valid range",
            "examples": [],
            "hash": "0x8B25BC20",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xCD4D9DD5": {
            "name": "DRAW_BOX",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD4D9DD5",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xB3426BCC": {
            "name": "DRAW_LINE",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3426BCC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xABD19253": {
            "name": "DRAW_POLY",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "x3",
                    "type": "float"
                },
                {
                    "name": "y3",
                    "type": "float"
                },
                {
                    "name": "z3",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xABD19253",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x2CA8F641": {
            "name": "GET_ASPECT_RATIO",
            "params": [],
            "return_type": "float",
            "description": "Gets the current aspect ratio\n\n```lua\nlocal ratio = GetAspectRatio()\r\nprint(string.format(\"%.2f\", ratio))\n```",
            "examples": [],
            "hash": "0x2CA8F641",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x337F0116": {
            "name": "GET_CURRENT_SCREEN_RESOLUTION",
            "params": [
                {
                    "name": "width",
                    "type": "int*"
                },
                {
                    "name": "height",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "Gets the current screen resolution.\n\n```lua\nlocal  width, height = GetCurrentScreenResolution()\r\nprint(string.format(\"Current screen resolution: %dx%d\", width, height))\r\n\n```",
            "examples": [],
            "hash": "0x337F0116",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x1582C7F2": {
            "name": "REMOVE_TEXTURE",
            "params": [
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "texture id created by `0xC5E7204F322E49EB`."
                }
            ],
            "return_type": "void",
            "description": "Removes the specified texture and remove it from the ped.\r\nUnlike `0x6BEFAA907B076859` which only marks the texture as \"can be reused\" (and keeps it until will be reused), this function deletes it right away. Can fix some sync issues. `DOES_TEXTURE_EXIST` can be use to wait until fully unloaded by game\n\n```lua\nRemoveTexture(textureId)\r\nwhile DoesTextureExist(textureId) do \r\n    Wait(0)\r\nend\n```",
            "examples": [],
            "hash": "0x1582C7F2",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xE10198D5": {
            "name": "SET_DRAW_ORIGIN",
            "params": [
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                },
                {
                    "name": "is2d",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Sets the on-screen drawing origin for draw-functions in world coordinates.\n\nThe effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\\_0xDD76B263) and is limited to 32 different origins each frame.",
            "examples": [],
            "hash": "0xE10198D5",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xADA9255D": {
            "name": "SET_TEXT_FONT_FOR_CURRENT_COMMAND",
            "params": [
                {
                    "name": "fontId",
                    "type": "int",
                    "description": "The index of the font."
                }
            ],
            "return_type": "void",
            "description": "Sets the text font for the current text drawing command.",
            "examples": [],
            "hash": "0xADA9255D",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x68CDFA60": {
            "name": "SET_TEXT_JUSTIFICATION",
            "params": [
                {
                    "name": "justifyType",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x68CDFA60",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x6F60AB54": {
            "name": "SET_TEXT_WRAP",
            "params": [
                {
                    "name": "start",
                    "type": "float"
                },
                {
                    "name": "end",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F60AB54",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x15346B4D": {
            "name": "GET_VISUAL_SETTING_FLOAT",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name of the value to get, such as `pedLight.color.red`."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_VISUAL_SETTING_FLOAT](#\\_0xD1D31681).",
            "examples": [],
            "hash": "0x15346B4D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns the floating point value of the specified visual setting on success."
        },
        "0xD1D31681": {
            "name": "SET_VISUAL_SETTING_FLOAT",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name of the value to set, such as `pedLight.color.red`."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write."
                }
            ],
            "return_type": "void",
            "description": "Overrides a floating point value from `visualsettings.dat` temporarily.",
            "examples": [],
            "hash": "0xD1D31681",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "HUD": {
        "0xCD949E20": {
            "name": "GET_HUD_COMPONENT_ALIGN",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "The hud component id."
                },
                {
                    "name": "horizontalAlign",
                    "type": "int*"
                },
                {
                    "name": "verticalAlign",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "See [SET_SCRIPT_GFX_ALIGN](#\\_0xB8A850F20A067EB6) for details about how gfx align works.",
            "examples": [],
            "hash": "0xCD949E20",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xA91866BC": {
            "name": "GET_HUD_COMPONENT_NAME",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "The hud component id."
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xA91866BC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The hud component name."
        },
        "0x12217D33": {
            "name": "GET_HUD_COMPONENT_SIZE",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "The hud component id."
                }
            ],
            "return_type": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0x12217D33",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A Vector3 with the hud component size X and size Y values."
        },
        "0x1363A998": {
            "name": "GET_MAP_ZOOM_DATA_LEVEL",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "Zoom level index."
                },
                {
                    "name": "zoomScale",
                    "type": "float*",
                    "description": "fZoomScale value."
                },
                {
                    "name": "zoomSpeed",
                    "type": "float*",
                    "description": "fZoomSpeed value."
                },
                {
                    "name": "scrollSpeed",
                    "type": "float*",
                    "description": "fScrollSpeed value."
                },
                {
                    "name": "tilesX",
                    "type": "float*",
                    "description": "vTiles X."
                },
                {
                    "name": "tilesY",
                    "type": "float*",
                    "description": "vTiles Y."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns the zoom level data by index from mapzoomdata.meta file.",
            "examples": [],
            "hash": "0x1363A998",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A boolean indicating TRUE if the data was received successfully."
        },
        "0xFFF65C63": {
            "name": "IS_BIGMAP_ACTIVE",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns true if the minimap is currently expanded. False if it's the normal minimap state.\r\nUse [`IsBigmapFull`](#\\_0x66EE14B2) to check if the full map is currently revealed on the minimap.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"
                },
                {
                    "lang": "cs",
                    "code": "bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"
                }
            ],
            "hash": "0xFFF65C63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A bool indicating if the minimap is currently expanded or normal state."
        },
        "0x66EE14B2": {
            "name": "IS_BIGMAP_FULL",
            "params": [],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"
                },
                {
                    "lang": "cs",
                    "code": "bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"
                }
            ],
            "hash": "0x66EE14B2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true if the full map is currently revealed on the minimap.\r\nUse [`IsBigmapActive`](#\\_0xFFF65C63) to check if the minimap is currently expanded or in it's normal state."
        },
        "0x11A5B7ED": {
            "name": "RESET_MAP_ZOOM_DATA_LEVEL",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "Zoom level index."
                }
            ],
            "return_type": "void",
            "description": "Resets values from the zoom level data by index to defaults from mapzoomdata.meta.",
            "examples": [],
            "hash": "0x11A5B7ED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEED219F2": {
            "name": "SET_HUD_COMPONENT_ALIGN",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "The hud component id."
                },
                {
                    "name": "horizontalAlign",
                    "type": "int",
                    "description": "The horizontal alignment."
                },
                {
                    "name": "verticalAlign",
                    "type": "int",
                    "description": "The vertical alignment."
                }
            ],
            "return_type": "void",
            "description": "See [SET_SCRIPT_GFX_ALIGN](#\\_0xB8A850F20A067EB6) for details about how gfx align works.",
            "examples": [],
            "hash": "0xEED219F2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x7644A9FA": {
            "name": "SET_HUD_COMPONENT_SIZE",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "The hud component id."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "New size X."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "New size Y."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x7644A9FA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x447C718E": {
            "name": "SET_MAP_ZOOM_DATA_LEVEL",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "Zoom level index."
                },
                {
                    "name": "zoomScale",
                    "type": "float",
                    "description": "fZoomScale value."
                },
                {
                    "name": "zoomSpeed",
                    "type": "float",
                    "description": "fZoomSpeed value."
                },
                {
                    "name": "scrollSpeed",
                    "type": "float",
                    "description": "fScrollSpeed value."
                },
                {
                    "name": "tilesX",
                    "type": "float",
                    "description": "vTiles X."
                },
                {
                    "name": "tilesY",
                    "type": "float",
                    "description": "vTiles Y."
                }
            ],
            "return_type": "void",
            "description": "Sets values to the zoom level data by index.",
            "examples": [],
            "hash": "0x447C718E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xA6FF71C9": {
            "name": "GET_MINIMAP_TYPE",
            "params": [],
            "return_type": "int",
            "description": "Get the minimap type:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```",
            "examples": [],
            "hash": "0xA6FF71C9",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x5FB53015": {
            "name": "SET_MINIMAP_TYPE",
            "params": [
                {
                    "name": "type",
                    "type": "int",
                    "description": "Type to set the minimap to."
                }
            ],
            "return_type": "void",
            "description": "Possible Types:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```",
            "examples": [],
            "hash": "0x5FB53015",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xC6F43D0E": {
            "name": "ADD_BLIP_FOR_COORD",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate to create the blip on."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate."
                }
            ],
            "return_type": "Blip",
            "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_COORD](?\\_0x5A039BB0BCA604B6).**",
            "examples": [],
            "hash": "0xC6F43D0E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A blip handle."
        },
        "0x30822554": {
            "name": "ADD_BLIP_FOR_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to create the blip."
                }
            ],
            "return_type": "Blip",
            "description": "Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\\_0xC6F43D0E) to make it blue (friend).\\\nCan be used for objects, vehicles and peds.\r\nExample of enemy:\r\n![enemy](https://i.imgur.com/fl78svv.png)\r\nExample of friend:\r\n![friend](https://i.imgur.com/Q16ho5d.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_ENTITY](?\\_0x5CDE92C702A8FCE7).**",
            "examples": [],
            "hash": "0x30822554",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A blip handle."
        },
        "0x4626756C": {
            "name": "ADD_BLIP_FOR_RADIUS",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The x position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The y position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The z position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The number that defines the radius of the blip circle"
                }
            ],
            "return_type": "Blip",
            "description": "Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\\_0xC6F43D0E))\r\nExample image:\r\n![example](https://i.imgur.com/9hQl3DB.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_RADIUS](?\\_0x46818D79B1F7499A).**",
            "examples": [],
            "hash": "0x4626756C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The blip handle that can be manipulated with every `SetBlip` natives"
        },
        "0xD8C3C1CD": {
            "name": "REMOVE_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "const Blip*",
                    "description": "Blip handle to remove."
                }
            ],
            "return_type": "void",
            "description": "Removes the blip from your map.\r\n**Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see [`SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`](#\\_0x86A652570E5F25DD).\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_BLIP](?\\_0x86A652570E5F25DD).**",
            "examples": [],
            "hash": "0xD8C3C1CD",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DBBB0B9": {
            "name": "SET_BLIP_SPRITE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change."
                },
                {
                    "name": "spriteId",
                    "type": "int",
                    "description": "The sprite ID to set."
                }
            ],
            "return_type": "void",
            "description": "Sets the displayed sprite for a specific blip.\r\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.\n\n**This is the server-side RPC native equivalent of the client native [SET_BLIP_SPRITE](?\\_0xDF735600A4696DAF).**",
            "examples": [],
            "hash": "0x8DBBB0B9",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x6228F159": {
            "name": "_ADD_BLIP_FOR_AREA",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the center of the blip."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the center of the blip."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the center of the blip."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "The width of the blip."
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "The height of the blip."
                }
            ],
            "return_type": "Blip",
            "description": "Adds a rectangular blip for the specified coordinates/area.\r\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\r\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\r\nExample image:\r\n![minimap](https://i.imgur.com/qLbXWcQ.png)\r\n![big map](https://i.imgur.com/0j7O7Rh.png)\r\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\n\n**This is the server-side RPC native equivalent of the client native [\\_ADD_BLIP_FOR_AREA](?\\_0xCE5D0E5E315DB238).**",
            "examples": [],
            "hash": "0x6228F159",
            "ns": "CFX",
            "aliases": [
                "0xCE5D0E5E315DB238"
            ],
            "apiset": "server",
            "resultsDescription": "A handle to the blip."
        }
    },
    "MISC": {
        "0x8AC7AE9": {
            "name": "ADD_AUTHORIZED_PARACHUTE_MODEL",
            "params": [
                {
                    "name": "modelNameHash",
                    "type": "int",
                    "description": "Name hash of the model to allow to be used for the player ped's parachute"
                }
            ],
            "return_type": "void",
            "description": "Adds the given model name hash to the list of valid models for the player ped's parachute.",
            "examples": [],
            "hash": "0x8AC7AE9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "None."
        },
        "0x2E86DEA5": {
            "name": "ADD_AUTHORIZED_PARACHUTE_PACK_MODEL",
            "params": [
                {
                    "name": "modelNameHash",
                    "type": "int",
                    "description": "Name hash of the model to allow to be used for the player ped's parachute pack"
                }
            ],
            "return_type": "void",
            "description": "Adds the given model name hash to the list of valid models for the player ped's parachute pack.",
            "examples": [],
            "hash": "0x2E86DEA5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "None."
        },
        "0x9CBFD5C1": {
            "name": "ADD_HEALTH_CONFIG",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config. Cannot be default game health config name."
                },
                {
                    "name": "defaultHealth",
                    "type": "float",
                    "description": "Default health value."
                },
                {
                    "name": "defaultArmor",
                    "type": "float",
                    "description": "Default armor value."
                },
                {
                    "name": "defaultEndurance",
                    "type": "float"
                },
                {
                    "name": "fatiguedHealthThreshold",
                    "type": "float",
                    "description": "Fatigued health threshold value."
                },
                {
                    "name": "injuredHealthThreshold",
                    "type": "float",
                    "description": "Injured health threshold value."
                },
                {
                    "name": "dyingHealthThreshold",
                    "type": "float",
                    "description": "Dying health threshold value."
                },
                {
                    "name": "hurtHealthThreshold",
                    "type": "float",
                    "description": "Hurt health threshold value."
                },
                {
                    "name": "dogTakedownThreshold",
                    "type": "float",
                    "description": "Dog takedown threshold value."
                },
                {
                    "name": "writheFromBulletThreshold",
                    "type": "float",
                    "description": "Writhe from bulled threshold value."
                },
                {
                    "name": "meleeCardinalFatalAttack",
                    "type": "BOOL",
                    "description": "Melee cardinal fatal attack check value."
                },
                {
                    "name": "invincible",
                    "type": "BOOL",
                    "description": "Invincible value."
                }
            ],
            "return_type": "void",
            "description": "Adds new health config.",
            "examples": [],
            "hash": "0x9CBFD5C1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB1622B17": {
            "name": "DISABLE_EDITOR_RUNTIME",
            "params": [],
            "return_type": "void",
            "description": "Disables the editor runtime mode, changing game behavior to not track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xB1622B17",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3D5AB7F0": {
            "name": "DISABLE_IDLE_CAMERA",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables the game's afk camera that starts panning around after 30 seconds of inactivity.",
            "examples": [],
            "hash": "0x3D5AB7F0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC383871D": {
            "name": "ENABLE_EDITOR_RUNTIME",
            "params": [],
            "return_type": "void",
            "description": "Enables the editor runtime mode, changing game behavior to track entity metadata.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xC383871D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x780DA86": {
            "name": "ENTER_CURSOR_MODE",
            "params": [],
            "return_type": "void",
            "description": "Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports\r\nSDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0x780DA86",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB550232D": {
            "name": "GET_AMBIENT_PED_RANGE_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x0B919E1FB47CC4E0).",
            "examples": [],
            "hash": "0xB550232D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ambient ped range multiplier value."
        },
        "0x870E8B40": {
            "name": "GET_CALMING_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a calming quad if the given point is inside its bounds.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal calmingQuadIndex = GetCalmingQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x870E8B40",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The calming quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xFF60E63": {
            "name": "GET_CALMING_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The calming quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetCalmingQuadBounds(1)"
                }
            ],
            "hash": "0xFF60E63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0xCEBFC42": {
            "name": "GET_CALMING_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local calmingQuadCount = GetCalmingQuadCount()"
                }
            ],
            "hash": "0xCEBFC42",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of calming quads loaded."
        },
        "0xB0E3A058": {
            "name": "GET_CALMING_QUAD_DAMPENING",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The calming quad index"
                },
                {
                    "name": "calmingQuadDampening",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, dampening = GetCalmingQuadDampening(1)"
                }
            ],
            "hash": "0xB0E3A058",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Dampening value is undefined on failure"
        },
        "0x5550BF9F": {
            "name": "GET_FUEL_CONSUMPTION_RATE_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x5550BF9F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Current fuel consumption rate multiplier. 0 means that fuel is not consumed."
        },
        "0xC66CD90C": {
            "name": "GET_FUEL_CONSUMPTION_STATE",
            "params": [],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC66CD90C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "True if fuel consumption is turned on. False otherwise."
        },
        "0x78951816": {
            "name": "GET_GLOBAL_PASSENGER_MASS_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_GLOBAL_PASSENGER_MASS_MULTIPLIER](#\\_0x3422291C).",
            "examples": [],
            "hash": "0x78951816",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the mass of each passenger (not counting the driver) as a percentage of vehicle mass. Default value is 0.05"
        },
        "0x30AA6911": {
            "name": "GET_MAPDATA_ENTITY_HANDLE",
            "params": [
                {
                    "name": "mapDataHash",
                    "type": "int",
                    "description": "A mapdata hash from `mapDataLoaded` event."
                },
                {
                    "name": "entityInternalIdx",
                    "type": "int",
                    "description": "An internal entity's index."
                },
                {
                    "name": "entityHandle",
                    "type": "int*",
                    "description": "The output entity handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Retrieves the map data entity handle.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0x30AA6911",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "True if successful, false if not."
        },
        "0x2C3CDA93": {
            "name": "GET_MAPDATA_ENTITY_MATRIX",
            "params": [
                {
                    "name": "mapDataHash",
                    "type": "int",
                    "description": "A mapdata hash from `mapDataLoaded` event."
                },
                {
                    "name": "entityInternalIdx",
                    "type": "int",
                    "description": "An internal entity's index."
                },
                {
                    "name": "matrixPtr",
                    "type": "long",
                    "description": "A mutable pointer to a 64-byte buffer of floating-point values, representing an XMFLOAT4X4 in layout."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code.\n\nThis should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.\n\nMatrix layout is as follows:\n\n*   Element \\[0], \\[1] and \\[2] should represent the right vector.\n*   Element \\[4], \\[5] and \\[6] should represent the forward vector.\n*   Element \\[8], \\[9] and \\[10] should represent the up vector.\n*   Element \\[12], \\[13] and \\[14] should represent X, Y and Z translation coordinates.\n*   All other elements should be \\[0, 0, 0, 1].",
            "examples": [],
            "hash": "0x2C3CDA93",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Whether or not the matrix was retrieved."
        },
        "0xD29D8EDD": {
            "name": "GET_MAPDATA_FROM_HASH_KEY",
            "params": [
                {
                    "name": "mapdataHandle",
                    "type": "Hash",
                    "description": "The input map data handle."
                }
            ],
            "return_type": "int",
            "description": "Returns the transient map data index for a specified hash.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xD29D8EDD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A transient (non-persistable) index to the requested mapdata, or -1."
        },
        "0xFF72DF84": {
            "name": "GET_PARKED_VEHICLE_DENSITY_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xEAE6DCC7EEE3DB1D).",
            "examples": [],
            "hash": "0xFF72DF84",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns parked vehicle density multiplier value."
        },
        "0x7B0D00C5": {
            "name": "GET_RANDOM_VEHICLE_DENSITY_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xB3B3359379FE77D3).\r\nSame as vehicle density multiplier.",
            "examples": [],
            "hash": "0x7B0D00C5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns random vehicle density multiplier value."
        },
        "0x77C598B2": {
            "name": "GET_SCENARIO_PED_DENSITY_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x7A556143A1C03898).",
            "examples": [],
            "hash": "0x77C598B2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns scenario ped density multiplier value."
        },
        "0xA194934D": {
            "name": "IS_STREAMING_FILE_READY",
            "params": [
                {
                    "name": "registerAs",
                    "type": "const char*",
                    "description": "The file name to check, for example `asset.ydr`."
                }
            ],
            "return_type": "BOOL",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns whether an asynchronous streaming file registration completed.",
            "examples": [],
            "hash": "0xA194934D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Whether or not the streaming file has been registered."
        },
        "0xADECF19E": {
            "name": "LEAVE_CURSOR_MODE",
            "params": [],
            "return_type": "void",
            "description": "Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xADECF19E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x30CE39D8": {
            "name": "ONESYNC_ENABLE_REMOTE_ATTACHMENT_SANITIZATION",
            "params": [
                {
                    "name": "enable",
                    "type": "BOOL",
                    "description": "Whether to enable sanitization."
                }
            ],
            "return_type": "void",
            "description": "Toggles a check that prevents attaching (networked) entities to remotely owned peds. This is disabled by default.",
            "examples": [],
            "hash": "0x30CE39D8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xD3BC438F": {
            "name": "OVERRIDE_POP_GROUPS",
            "params": [
                {
                    "name": "path",
                    "type": "const char*",
                    "description": "The file path to load (`popgroups`, `@resource/popgroups`), or `null` to reload the default population groups file."
                }
            ],
            "return_type": "void",
            "description": "Replaces the `popgroups` (CPopGroupList) meta file with the file in the specified path.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- fxmanifest.lua:\r\nfile 'popgroups_dlc.xml'\r\n\r\n-- client.lua:\r\nOverridePopGroups('popgroups_dlc.xml')\r\n\r\n-- restore the original after five minutes\r\nWait(1000 * 60 * 5)\r\nOverridePopGroups(nil)"
                }
            ],
            "hash": "0xD3BC438F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3C2F9037": {
            "name": "REGISTER_ARCHETYPES",
            "params": [
                {
                    "name": "factory",
                    "type": "func",
                    "description": "A function returning a list of archetypes."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterArchetypes(function()\r\n\treturn {\r\n\t\t{\r\n\t\t\tflags = 32,\r\n\t\t\tbbMin = vector3(-39.99570000, -8.00155600, -2.56818800),\r\n\t\t\tbbMax = vector3(40.00439000, 7.99858000, 1.44575100),\r\n\t\t\tbsCentre = vector3(0.00434110, -0.00148870, -0.56121830),\r\n\t\t\tbsRadius = 40.84160000,\r\n\t\t\tname = 'my_asset',\r\n\t\t\ttextureDictionary = 'my_asset',\r\n\t\t\tphysicsDictionary = 'my_asset',\r\n\t\t\tassetName = 'my_asset',\r\n\t\t\tassetType = 'ASSET_TYPE_DRAWABLE',\r\n\t\t\tlodDist = 450.45,\r\n\t\t\tspecialAttribute = 0\r\n\t\t}\r\n\t}\r\nend)"
                }
            ],
            "hash": "0x3C2F9037",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1B3A363": {
            "name": "REGISTER_FONT_FILE",
            "params": [
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The name of the .gfx file, without extension."
                }
            ],
            "return_type": "void",
            "description": "Registers a specified .gfx file as GFx font library.\r\nThe .gfx file has to be registered with the streamer already.",
            "examples": [],
            "hash": "0x1B3A363",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xACF6D8EE": {
            "name": "REGISTER_FONT_ID",
            "params": [
                {
                    "name": "fontName",
                    "type": "const char*",
                    "description": "The name of the font in the GFx font library."
                }
            ],
            "return_type": "int",
            "description": "Registers a specified font name for use with text draw commands.",
            "examples": [],
            "hash": "0xACF6D8EE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An index to use with [SET_TEXT_FONT](#\\_0x66E0276CC5F6B9DA) and similar natives."
        },
        "0xD7664FD1": {
            "name": "REGISTER_KEY_MAPPING",
            "params": [
                {
                    "name": "commandString",
                    "type": "const char*",
                    "description": "The command to execute, and the identifier of the binding."
                },
                {
                    "name": "description",
                    "type": "const char*",
                    "description": "A description for in the settings menu."
                },
                {
                    "name": "defaultMapper",
                    "type": "const char*",
                    "description": "The [mapper ID](https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/) to use for the default binding, e.g. `keyboard`."
                },
                {
                    "name": "defaultParameter",
                    "type": "const char*",
                    "description": "The [IO parameter ID](https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/) to use for the default binding, e.g. `f3`."
                }
            ],
            "return_type": "void",
            "description": "Registers a key mapping for the current resource.\n\nSee the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information.\n\nBelow you can find some examples on how to create these keybindings as well as the alternate keybinding syntax, which is preceded by `~!` to indicate that it's an alternate key.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local handsUp = false\r\nCreateThread(function()\r\n    while true do\r\n        Wait(0)\r\n        if handsUp then\r\n            TaskHandsUp(PlayerPedId(), 250, PlayerPedId(), -1, true)\r\n        end\r\n    end\r\nend)\r\nRegisterCommand('+handsup', function()\r\n    handsUp = true\r\nend, false)\r\nRegisterCommand('-handsup', function()\r\n    handsUp = false\r\nend, false)\r\n\r\nRegisterKeyMapping('+handsup', 'Hands Up', 'keyboard', 'i')\r\n\r\n-- Alternate keybinding syntax\r\nRegisterKeyMapping('~!+handsup', 'Hands Up - Alternate Key', 'keyboard', 'o')"
                }
            ],
            "hash": "0xD7664FD1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xCEAD2D4B": {
            "name": "REGISTER_STREAMING_FILE_FROM_CACHE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource to add the asset to."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "A file name in the resource."
                },
                {
                    "name": "cacheString",
                    "type": "const char*",
                    "description": "The string returned from `REGISTER_RESOURCE_ASSET` on the server."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a dynamic streaming asset from the server with the GTA streaming module system.",
            "examples": [],
            "hash": "0xCEAD2D4B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1493DCC1": {
            "name": "REGISTER_STREAMING_FILE_FROM_KVS",
            "params": [
                {
                    "name": "kvsKey",
                    "type": "const char*",
                    "description": "The KVP key in the current resource to register as an asset."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a KVP value as an asset with the GTA streaming module system. This function currently won't work.",
            "examples": [],
            "hash": "0x1493DCC1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF44BFB95": {
            "name": "REGISTER_STREAMING_FILE_FROM_URL",
            "params": [
                {
                    "name": "registerAs",
                    "type": "const char*",
                    "description": "The file name to register as, for example `asset.ydr`."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The URL to fetch the asset from."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.\n\nUse `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.",
            "examples": [],
            "hash": "0xF44BFB95",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xE0ED5FB": {
            "name": "REMOVE_HEALTH_CONFIG",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Removes config name. Cannot be default game health config name."
                }
            ],
            "return_type": "void",
            "description": "Removes health config.",
            "examples": [],
            "hash": "0xE0ED5FB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xA42A3DBF": {
            "name": "SET_AIM_COOLDOWN",
            "params": [
                {
                    "name": "value",
                    "type": "int",
                    "description": "Number of milliseconds between allowed aiming"
                }
            ],
            "return_type": "void",
            "description": "Adds a cooldown between instances of moving and then aiming.\r\nCan be optionally used to hinder 'speedboosting'\r\nTo turn off, set value to 0",
            "examples": [],
            "hash": "0xA42A3DBF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC5945BD9": {
            "name": "SET_CALMING_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The calming quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetCalmingQuadBounds(1, -500, -500, 500, 500)"
                }
            ],
            "hash": "0xC5945BD9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x67977501": {
            "name": "SET_CALMING_QUAD_DAMPENING",
            "params": [
                {
                    "name": "calmingQuad",
                    "type": "int",
                    "description": "The calming quad"
                },
                {
                    "name": "dampening",
                    "type": "float",
                    "description": "The dampening value"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetCalmingQuadDampening(0, 1.0)"
                }
            ],
            "hash": "0x67977501",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x7635B349": {
            "name": "SET_FLASH_LIGHT_KEEP_ON_WHILE_MOVING",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming.",
            "examples": [],
            "hash": "0x7635B349",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x845F3E5C": {
            "name": "SET_FUEL_CONSUMPTION_RATE_MULTIPLIER",
            "params": [
                {
                    "name": "multiplier",
                    "type": "float",
                    "description": "Global fuel consumption multiplier. If negative - 0 will be used instead."
                }
            ],
            "return_type": "void",
            "description": "Sets fuel consumption rate multiplier for all vehicles operated by a player. This is a way to slow down or speed up fuel consumption for all vehicles at a time. If 0 - it practically means that fuel will not be consumed. By default is set to 1.\n\nWhen the multiplier is set to 1 a default 65 litre gas tank car with average fuel consumption can stay idle for ~16.67 hours or run with max RPM for ~2.5 hours.\n\nTo customize fuel consumption per vehicle / vehicle class use [`SET_HANDLING_FLOAT`](#\\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\\_0x488C86D2) natives with `fieldName` equal to `fPetrolConsumptionRate`. By default it is set to 0.5 for all vehicles.",
            "examples": [],
            "hash": "0x845F3E5C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x81DAD03E": {
            "name": "SET_FUEL_CONSUMPTION_STATE",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "True to turn on. False to turn off."
                }
            ],
            "return_type": "void",
            "description": "Turns on and off fuel consumption in all vehicles operated by a player. NPC operated vehicles will not consume fuel to avoid traffic disruptions.\n\nThe default Gta5 behaviour is fuel consumption turned off.",
            "examples": [],
            "hash": "0x81DAD03E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1C47F6AC": {
            "name": "SET_GLOBAL_PASSENGER_MASS_MULTIPLIER",
            "params": [
                {
                    "name": "massMul",
                    "type": "float",
                    "description": "Weight of each passenger (not counting the driver) as a percentage of vehicle mass. Is applied to all vehicles. Default value is 0.05"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1C47F6AC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x20A1E6A2": {
            "name": "SET_HEALTH_CONFIG_DEFAULT_ARMOR",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default armor value for specific health config.",
            "examples": [],
            "hash": "0x20A1E6A2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x60F20B81": {
            "name": "SET_HEALTH_CONFIG_DEFAULT_ENDURANCE",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default endurance value for specific health config.",
            "examples": [],
            "hash": "0x60F20B81",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC705C778": {
            "name": "SET_HEALTH_CONFIG_DEFAULT_HEALTH",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default health value for specific health config.",
            "examples": [],
            "hash": "0xC705C778",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9A995E96": {
            "name": "SET_HEALTH_CONFIG_DOG_TAKEDOWN_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default dog takedown threshold value for specific health config.",
            "examples": [],
            "hash": "0x9A995E96",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9B00FD77": {
            "name": "SET_HEALTH_CONFIG_DYING_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default dying health threshold value for specific health config.",
            "examples": [],
            "hash": "0x9B00FD77",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC58953FD": {
            "name": "SET_HEALTH_CONFIG_FATIGUED_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default fatigued health threshold value for specific health config.",
            "examples": [],
            "hash": "0xC58953FD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x98DF1A83": {
            "name": "SET_HEALTH_CONFIG_HURT_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default hurt health threshold value for specific health config.",
            "examples": [],
            "hash": "0x98DF1A83",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF9D9B647": {
            "name": "SET_HEALTH_CONFIG_INJURED_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default injured health threshold value for specific health config.",
            "examples": [],
            "hash": "0xF9D9B647",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4A9EEDE6": {
            "name": "SET_HEALTH_CONFIG_INVINCIBLE",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "BOOL",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default invincible value for specific health config.",
            "examples": [],
            "hash": "0x4A9EEDE6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xDD443E53": {
            "name": "SET_HEALTH_CONFIG_MELEE_FATAL_ATTACK",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "BOOL",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default melee cardinal fatal attack value for specific health config.",
            "examples": [],
            "hash": "0xDD443E53",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xE97633CB": {
            "name": "SET_HEALTH_CONFIG_WRITHE_FROM_BULLET_THRESHOLD",
            "params": [
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                },
                {
                    "name": "newValue",
                    "type": "float",
                    "description": "Value"
                }
            ],
            "return_type": "void",
            "description": "Sets default writhe from bullet threshold value for specific health config.",
            "examples": [],
            "hash": "0xE97633CB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x36CA2554": {
            "name": "SET_MILLISECONDS_PER_GAME_MINUTE",
            "params": [
                {
                    "name": "value",
                    "type": "int",
                    "description": "Milliseconds."
                }
            ],
            "return_type": "void",
            "description": "Overrides how many real ms are equal to one game minute.\r\nA setter for [`GetMillisecondsPerGameMinute`](#\\_0x2F8B4D1C595B11DB).",
            "examples": [],
            "hash": "0x36CA2554",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x7F6B8D75": {
            "name": "SET_MODEL_HEADLIGHT_CONFIGURATION",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash"
                },
                {
                    "name": "ratePerSecond",
                    "type": "float"
                },
                {
                    "name": "headlightRotation",
                    "type": "float"
                },
                {
                    "name": "invertRotation",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "**This native is deprecated and does nothing!**",
            "examples": [],
            "hash": "0x7F6B8D75",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x7A27BC93": {
            "name": "SET_MP_GAMER_TAGS_USE_VEHICLE_BEHAVIOR",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Whether tags should use normal game behavior. Default is true."
                }
            ],
            "return_type": "void",
            "description": "Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle.",
            "examples": [],
            "hash": "0x7A27BC93",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xD61676B3": {
            "name": "SET_MP_GAMER_TAGS_VISIBLE_DISTANCE",
            "params": [
                {
                    "name": "distance",
                    "type": "float",
                    "description": "The visible distance. Default is 100.0f."
                }
            ],
            "return_type": "void",
            "description": "Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position.",
            "examples": [],
            "hash": "0xD61676B3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x49C1F6DC": {
            "name": "REGISTER_RAW_KEYMAP",
            "params": [
                {
                    "name": "keymapName",
                    "type": "const char*",
                    "description": "A **unique** name that the keymap will be bound to, duplicates will result in the keymap not being registered."
                },
                {
                    "name": "onKeyDown",
                    "type": "func",
                    "description": "The function to run when the key is being pressed, or `nil`."
                },
                {
                    "name": "onKeyUp",
                    "type": "func",
                    "description": "The function to run when the key is no longer being pressed, or `nil`."
                },
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "The virtual key to bind this keymap to, see a list [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)"
                },
                {
                    "name": "canBeDisabled",
                    "type": "BOOL",
                    "description": "If calls to [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014) will disable this keymap, if a keymap was disabled when the key was pressed down it will still call `onKeyUp` on release."
                }
            ],
            "return_type": "void",
            "description": "Registers a keymap that will be triggered whenever `rawKeyIndex` is pressed or released.\n\n`onKeyUp` and `onKeyDown` will not provide any arguments.\n\n```ts\nfunction onStateChange();\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "function on_key_up()\r\n\tprint(\"key no longer pressed\")\r\nend\r\n\r\nfunction on_key_down()\r\n\tprint(\"key is pressed\")\r\nend\r\n\r\nlocal KEY_E = 69\r\nlocal canBeDisabled = false\r\n\r\n\r\nRegisterRawKeymap(\"our_keymap\", on_key_up, on_key_down, KEY_E, canBeDisabled)"
                }
            ],
            "hash": "0x49C1F6DC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x6E38C1B9": {
            "name": "REMAP_RAW_KEYMAP",
            "params": [
                {
                    "name": "keymapName",
                    "type": "const char*",
                    "description": "the name given to the keymap in [REGISTER_RAW_KEYMAP](#\\_0x49C1F6DC)"
                },
                {
                    "name": "newRawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "void",
            "description": "Remaps the keymap bound to `keymapName` to `newRawKeyIndex`\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "\r\nfunction on_key_up()\r\n\tprint(\"key no longer pressed\")\r\nend\r\n\r\nfunction on_key_down()\r\n\tprint(\"key is pressed\")\r\nend\r\n\r\nlocal KEY_SPACE = 32\r\nlocal canBeDisabled = false\r\n\r\nlocal KEY_E = 69\r\n\r\nRegisterRawKeymap(\"our_keymap\", on_key_up, on_key_down, KEY_SPACE, canBeDisabled)\r\n\r\nRemapRawKeymap(\"our_keymap\", KEY_E)"
                }
            ],
            "hash": "0x6E38C1B9",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xC44C2F44": {
            "name": "SET_BACKFACECULLING",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC44C2F44",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x8A7A8DAC": {
            "name": "SET_CURSOR_LOCATION",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "X position."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Y position."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A7A8DAC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "A boolean."
        },
        "0x85A10FFD": {
            "name": "SET_IGNORE_VEHICLE_OWNERSHIP_FOR_STOWING",
            "params": [
                {
                    "name": "ignore",
                    "type": "BOOL",
                    "description": "true to let the local player stow carriables on any hunting wagon, false to use the default behaviour."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.",
            "examples": [],
            "hash": "0x85A10FFD",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xEEB9B76A": {
            "name": "ACTIVATE_TIMECYCLE_EDITOR",
            "params": [],
            "return_type": "void",
            "description": "Activates built-in timecycle editing tool.",
            "examples": [],
            "hash": "0xEEB9B76A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3422291C": {
            "name": "APPLY_WEATHER_CYCLES",
            "params": [
                {
                    "name": "numEntries",
                    "type": "int",
                    "description": "The number of cycle entries. Must be between 1 and 256"
                },
                {
                    "name": "msPerCycle",
                    "type": "int",
                    "description": "The duration in milliseconds of each cycle. Must be between 1000 and 86400000 (24 hours)"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Cycle between XMAS weather for 30 seconds (3 * 10000 milliseconds), and SMOG weather for 20 seconds (2 * 10000 milliseconds)\r\nlocal success = SetWeatherCycleEntry(0, \"XMAS\", 3) and\r\n                SetWeatherCycleEntry(1, \"SMOG\", 2) and\r\n                ApplyWeatherCycles(2, 10000)"
                }
            ],
            "hash": "0x3422291C",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns true if all parameters were valid, otherwise false."
        },
        "0x54D636B3": {
            "name": "CLONE_TIMECYCLE_MODIFIER",
            "params": [
                {
                    "name": "sourceModifierName",
                    "type": "const char*",
                    "description": "The source timecycle name."
                },
                {
                    "name": "clonedModifierName",
                    "type": "const char*",
                    "description": "The clone timecycle name, must be unique."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local sourceName = \"underwater\"\r\nlocal cloneName = \"my_awesome_timecycle\"\r\n\r\nlocal clonedIndex = CloneTimecycleModifier(sourceName, cloneName)\r\nif clonedIndex ~= -1 then\r\n  SetTimecycleModifier(cloneName)\r\nend"
                }
            ],
            "hash": "0x54D636B3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The cloned timecycle modifier index, or -1 if failed."
        },
        "0x70FA2AFA": {
            "name": "CREATE_TIMECYCLE_MODIFIER",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The new timecycle name, must be unique."
                }
            ],
            "return_type": "int",
            "description": "Create a clean timecycle modifier. See [`SET_TIMECYCLE_MODIFIER_VAR`](#\\_0x6E0A422B) to add variables.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"my_awesome_timecycle\"\r\nlocal createdIndex = CreateTimecycleModifier(modifierName)\r\n\r\nif createdIndex ~= -1 then\r\n  SetTimecycleModifier(modifierName)\r\nend"
                }
            ],
            "hash": "0x70FA2AFA",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The created timecycle modifier index, or -1 if failed."
        },
        "0xA9C92CDC": {
            "name": "DISABLE_WORLDHORIZON_RENDERING",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables the game's world horizon lods rendering (see `farlods.#dd`).\r\nUsing the island hopper natives might also affect this state.",
            "examples": [],
            "hash": "0xA9C92CDC",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xC53BB6D3": {
            "name": "DOES_TIMECYCLE_MODIFIER_HAS_VAR",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The name of timecycle modifier."
                },
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The name of timecycle variable."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
                }
            ],
            "hash": "0xC53BB6D3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Whether or not variable by name was found on the specified timecycle modifier."
        },
        "0xDEDA4E50": {
            "name": "END_FIND_OBJECT",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xDEDA4E50",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x9615C2AD": {
            "name": "END_FIND_PED",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x9615C2AD",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3C407D53": {
            "name": "END_FIND_PICKUP",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3C407D53",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x9227415A": {
            "name": "END_FIND_VEHICLE",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x9227415A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD2CB95A3": {
            "name": "EXPERIMENTAL_LOAD_CLONE_CREATE",
            "params": [
                {
                    "name": "data",
                    "type": "const char*"
                },
                {
                    "name": "objectId",
                    "type": "int"
                },
                {
                    "name": "tree",
                    "type": "const char*"
                }
            ],
            "return_type": "Entity",
            "description": "This native is not implemented.",
            "examples": [],
            "hash": "0xD2CB95A3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x6BC189AC": {
            "name": "EXPERIMENTAL_LOAD_CLONE_SYNC",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "data",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "This native is not implemented.",
            "examples": [],
            "hash": "0x6BC189AC",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x9D65CAD2": {
            "name": "EXPERIMENTAL_SAVE_CLONE_CREATE",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "const char*",
            "description": "This native is not implemented.",
            "examples": [],
            "hash": "0x9D65CAD2",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x38D19210": {
            "name": "EXPERIMENTAL_SAVE_CLONE_SYNC",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "const char*",
            "description": "This native is not implemented.",
            "examples": [],
            "hash": "0x38D19210",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0xFAA6CB5D": {
            "name": "FIND_FIRST_OBJECT",
            "params": [
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xFAA6CB5D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0xFB012961": {
            "name": "FIND_FIRST_PED",
            "params": [
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xFB012961",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x3FF9D340": {
            "name": "FIND_FIRST_PICKUP",
            "params": [
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x3FF9D340",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x15E55694": {
            "name": "FIND_FIRST_VEHICLE",
            "params": [
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x15E55694",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x4E129DBF": {
            "name": "FIND_NEXT_OBJECT",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                },
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4E129DBF",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0xAB09B548": {
            "name": "FIND_NEXT_PED",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                },
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xAB09B548",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x4107EF0F": {
            "name": "FIND_NEXT_PICKUP",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                },
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x4107EF0F",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x8839120D": {
            "name": "FIND_NEXT_VEHICLE",
            "params": [
                {
                    "name": "findHandle",
                    "type": "int"
                },
                {
                    "name": "outEntity",
                    "type": "Entity*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8839120D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0xACA18ECD": {
            "name": "GET_CURRENT_GAME_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "This native returns the currently used game's name.",
            "examples": [],
            "hash": "0xACA18ECD",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The game name as a string, one of the following values: gta4, gta5, rdr3"
        },
        "0xEA11BFBA": {
            "name": "GET_CURRENT_SERVER_ENDPOINT",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the peer address of the remote game server that the user is currently connected to.",
            "examples": [],
            "hash": "0xEA11BFBA",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The peer address of the game server (e.g. `127.0.0.1:30120`), or NULL if not available."
        },
        "0xFE2A1D4D": {
            "name": "GET_TIMECYCLE_MODIFIER_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local count = GetTimecycleModifierCount()\r\nprint(\"we have  \" .. count .. \"timecycle modifiers loaded\")"
                }
            ],
            "hash": "0xFE2A1D4D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns the amount of timecycle modifiers loaded."
        },
        "0x5F4CD0E2": {
            "name": "GET_TIMECYCLE_MODIFIER_INDEX_BY_NAME",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The timecycle modifier name."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierIndex = GetTimecycleModifierIndexByName(\"underwater\")\r\nlocal currentIndex = GetTimecycleModifierIndex()\r\n\r\nif currentIndex ~= -1 and currentIndex == modifierIndex then\r\n  print(\"we're actually using 'underwater' timecycle!\")\r\nend"
                }
            ],
            "hash": "0x5F4CD0E2",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The timecycle modifier index."
        },
        "0x28CB8608": {
            "name": "GET_TIMECYCLE_MODIFIER_NAME_BY_INDEX",
            "params": [
                {
                    "name": "modifierIndex",
                    "type": "int",
                    "description": "The timecycle modifier index."
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierIndex = GetTimecycleModifierIndex()\r\n\r\nif modifierIndex ~= -1 then\r\n  local modifierName = GetTimecycleModifierNameByIndex(modifierIndex)\r\n  print(\"current timecycle name is \" .. modifierName)\r\nend"
                }
            ],
            "hash": "0x28CB8608",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The timecycle modifier name."
        },
        "0xBE54124A": {
            "name": "GET_TIMECYCLE_MODIFIER_STRENGTH",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_TIMECYCLE_MODIFIER_STRENGTH](#\\_0x82E7FFCD5B2326B3).",
            "examples": [],
            "hash": "0xBE54124A",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns current timecycle modifier strength."
        },
        "0xA7109E12": {
            "name": "GET_TIMECYCLE_MODIFIER_VAR",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The name of timecycle modifier."
                },
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The name of timecycle variable."
                },
                {
                    "name": "value1",
                    "type": "float*"
                },
                {
                    "name": "value2",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
                }
            ],
            "hash": "0xA7109E12",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Whether or not variable by name was found on the specified timecycle modifier."
        },
        "0x60FB60FE": {
            "name": "GET_TIMECYCLE_MODIFIER_VAR_COUNT",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The timecycle modifier name."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local varCount = GetTimecycleModifierVarCount(\"underwater\")\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleModifierVarNameByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s\", index, varName))\r\n  end\r\nend"
                }
            ],
            "hash": "0x60FB60FE",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The amount of variables used on a specified timecycle modifier."
        },
        "0xE874AB1D": {
            "name": "GET_TIMECYCLE_MODIFIER_VAR_NAME_BY_INDEX",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The name of timecycle modifier."
                },
                {
                    "name": "modifierVarIndex",
                    "type": "int",
                    "description": "The index of a variable on the specified timecycle modifier."
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local varCount = GetTimecycleModifierVarCount(\"underwater\")\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleModifierVarNameByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s\", index, varName))\r\n  end\r\nend"
                }
            ],
            "hash": "0xE874AB1D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The name of a variable by index."
        },
        "0x838B34D8": {
            "name": "GET_TIMECYCLE_VAR_COUNT",
            "params": [],
            "return_type": "int",
            "description": "Returns the amount of variables available to be applied on timecycle modifiers.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
                }
            ],
            "hash": "0x838B34D8",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The amount of available variables for timecycle modifiers."
        },
        "0x3B90238": {
            "name": "GET_TIMECYCLE_VAR_DEFAULT_VALUE_BY_INDEX",
            "params": [
                {
                    "name": "varIndex",
                    "type": "int",
                    "description": "The index of variable."
                }
            ],
            "return_type": "float",
            "description": "See [GET_TIMECYCLE_VAR_COUNT](#\\_0x838B34D8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
                }
            ],
            "hash": "0x3B90238",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The default value of a timecycle variable."
        },
        "0xC6C55AAF": {
            "name": "GET_TIMECYCLE_VAR_NAME_BY_INDEX",
            "params": [
                {
                    "name": "varIndex",
                    "type": "int",
                    "description": "The index of variable."
                }
            ],
            "return_type": "const char*",
            "description": "See [GET_TIMECYCLE_VAR_COUNT](#\\_0x838B34D8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local varCount = GetTimecycleVarCount()\r\n\r\nif varCount ~= 0 then\r\n  for index = 0, varCount - 1 do\r\n    local varName = GetTimecycleVarNameByIndex(index)\r\n    local varDefault = GetTimecycleVarDefaultValueByIndex(index)\r\n\r\n    print(string.format(\"[%d] %s (%f)\", index, varName, varDefault))\r\n  end\r\nend"
                }
            ],
            "hash": "0xC6C55AAF",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The name of a timecycle variable."
        },
        "0xC81D0659": {
            "name": "GET_WORLD_COORD_FROM_SCREEN_COORD",
            "params": [
                {
                    "name": "screenX",
                    "type": "float",
                    "description": "A screen horizontal axis coordinate (0.0 - 1.0)."
                },
                {
                    "name": "screenY",
                    "type": "float",
                    "description": "A screen vertical axis coordinate (0.0 - 1.0)."
                },
                {
                    "name": "worldVector",
                    "type": "Vector3*",
                    "description": "The world coord vector pointer."
                },
                {
                    "name": "normalVector",
                    "type": "Vector3*",
                    "description": "The screen normal vector pointer."
                }
            ],
            "return_type": "void",
            "description": "Converts a screen coordinate into its relative world coordinate.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "CreateThread(function()\r\n  while true do\r\n    local screenX = GetDisabledControlNormal(0, 239)\r\n    local screenY = GetDisabledControlNormal(0, 240)\r\n\r\n    local world, normal = GetWorldCoordFromScreenCoord(screenX, screenY)\r\n\r\n    local depth = 10\r\n\r\n    local target = world + normal * depth\r\n\r\n    DrawSphere(target.x, target.y, target.z, 0.5, 255, 0, 0, 0.5)\r\n\r\n    Wait(0)\r\n  end\r\nend)"
                }
            ],
            "hash": "0xC81D0659",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A Vector3 representing the world coordinates relative to the specified screen coordinates and a screen plane normal Vector3 (normalised)."
        },
        "0x36DF8612": {
            "name": "REMOVE_TIMECYCLE_MODIFIER",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The timecycle modifier name."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"my_awesome_timecycle\"\r\nRemoveTimecycleModifier(modifierName)"
                }
            ],
            "hash": "0x36DF8612",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5A5E0D05": {
            "name": "REMOVE_TIMECYCLE_MODIFIER_VAR",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The name of timecycle modifier."
                },
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The name of timecycle variable."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
                }
            ],
            "hash": "0x5A5E0D05",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xE7490533": {
            "name": "REQUEST_RESOURCE_FILE_SET",
            "params": [
                {
                    "name": "setName",
                    "type": "const char*",
                    "description": "The name of the file set as specified in `fxmanifest.lua`."
                }
            ],
            "return_type": "BOOL",
            "description": "Requests a resource file set with the specified name to be downloaded and mounted on top of the current resource.\n\nResource file sets are specified in `fxmanifest.lua` with the following syntax:\n\n```lua\nfile_set 'addon_ui' {\r\n    'ui/addon/index.html',\r\n    'ui/addon/**.js',\r\n}\n```\n\nThis command will trigger a script error if the request failed.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- fxmanifest.lua\r\nfile_set 'dummies' {\r\n    'dummy/**.txt',\r\n    'potato.txt',\r\n}\r\n\r\n-- main script\r\nlocal function PrintTest()\r\n    local tests = { 'potato.txt', 'dummy/1.txt', 'dummy/b/2.txt' }\r\n\r\n    for _, v in ipairs(tests) do\r\n        local data = LoadResourceFile(GetCurrentResourceName(), v)\r\n        print(v, data)\r\n    end\r\nend\r\n\r\nRegisterCommand('fileset', function()\r\n    PrintTest()\r\n\r\n    while not RequestResourceFileSet('dummies') do\r\n        Wait(100)\r\n    end\r\n\r\n    PrintTest()\r\nend)"
                }
            ],
            "hash": "0xE7490533",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "`TRUE` if the set is mounted, `FALSE` if the request is still pending."
        },
        "0x8BBE6CC0": {
            "name": "SEND_LOADING_SCREEN_MESSAGE",
            "params": [
                {
                    "name": "jsonString",
                    "type": "const char*",
                    "description": "The JSON-encoded message."
                }
            ],
            "return_type": "BOOL",
            "description": "Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources.",
            "examples": [],
            "hash": "0x8BBE6CC0",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A success value."
        },
        "0xCB0241B5": {
            "name": "SET_KEY_MAPPING_HIDE_RESOURCES",
            "params": [
                {
                    "name": "hide",
                    "type": "BOOL",
                    "description": "`true` will disable the display of resource names, and `false` will enable it."
                }
            ],
            "return_type": "void",
            "description": "Toggles the visibility of resource names in the FiveM key mapping page.",
            "examples": [],
            "hash": "0xCB0241B5",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xA7DD3209": {
            "name": "SET_SNAKEOIL_FOR_ENTRY",
            "params": [
                {
                    "name": "name",
                    "type": "const char*"
                },
                {
                    "name": "path",
                    "type": "const char*"
                },
                {
                    "name": "data",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xA7DD3209",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x97B2F9F8": {
            "name": "SET_TEXT_CHAT_ENABLED",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x97B2F9F8",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x6E0A422B": {
            "name": "SET_TIMECYCLE_MODIFIER_VAR",
            "params": [
                {
                    "name": "modifierName",
                    "type": "const char*",
                    "description": "The name of timecycle modifier."
                },
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The name of timecycle variable."
                },
                {
                    "name": "value1",
                    "type": "float",
                    "description": "The first value of variable."
                },
                {
                    "name": "value2",
                    "type": "float",
                    "description": "The second value of variable."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local modifierName = \"superDARK\"\r\nlocal varName = \"postfx_noise\"\r\n\r\nif DoesTimecycleModifierHasVar(modifierName, varName) then\r\n  local success, value1, value2 = GetTimecycleModifierVar(modifierName, varName)\r\n\r\n  if success then\r\n    print(string.format(\"[%s] removed var %s with values: %f %f\", modifierName, varName, value1, value2))\r\n    RemoveTimecycleModifierVar(modifierName, varName)\r\n  end\r\nelse\r\n    SetTimecycleModifierVar(modifierName, varName, 1.0, 1.0)\r\n    print(string.format(\"[%s] created var %s\", modifierName, varName))\r\nend"
                }
            ],
            "hash": "0x6E0A422B",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD264D4E1": {
            "name": "SET_WEATHER_CYCLE_ENTRY",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "The index of the entry to set. Must be between 0 and 255"
                },
                {
                    "name": "typeName",
                    "type": "const char*",
                    "description": "The name of the weather type for this cycle"
                },
                {
                    "name": "timeMult",
                    "type": "int",
                    "description": "The relative duration of this cycle, which is multiplied by `msPerCycle` during ['APPLY_WEATHER_CYCLES'](#\\_0x3422291C). Must be between 1 and 255"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD264D4E1",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns true if all parameters were valid, otherwise false."
        },
        "0x2703D582": {
            "name": "SET_WEATHER_OWNED_BY_NETWORK",
            "params": [
                {
                    "name": "network",
                    "type": "BOOL",
                    "description": "true to let the network control weather, false to not use network weather behavior."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not the weather should be owned by the network subsystem.\n\nTo be able to use [\\_SET_WEATHER_TYPE_TRANSITION](#\\_0x578C752848ECFA0C), this has to be set to false.",
            "examples": [],
            "hash": "0x2703D582",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x128737EA": {
            "name": "TRIGGER_LATENT_SERVER_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                },
                {
                    "name": "bps",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerLatentServerEvent.",
            "examples": [],
            "hash": "0x128737EA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x7FDD1128": {
            "name": "TRIGGER_SERVER_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerServerEvent.",
            "examples": [],
            "hash": "0x7FDD1128",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF97B1C93": {
            "name": "ENABLE_ENHANCED_HOST_SUPPORT",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xF97B1C93",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x13B6855D": {
            "name": "FLAG_SERVER_AS_PRIVATE",
            "params": [
                {
                    "name": "private_",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x13B6855D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xE57429FA": {
            "name": "GET_CONSOLE_BUFFER",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the current console output buffer.",
            "examples": [],
            "hash": "0xE57429FA",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The most recent game console output, as a string."
        },
        "0xA4EA0691": {
            "name": "GET_GAME_TIMER",
            "params": [],
            "return_type": "long",
            "description": "Gets the current game timer in milliseconds.",
            "examples": [],
            "hash": "0xA4EA0691",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The game time."
        },
        "0x98EFF6F1": {
            "name": "GET_HASH_KEY",
            "params": [
                {
                    "name": "model",
                    "type": "const char*"
                }
            ],
            "return_type": "Hash",
            "description": "This native converts the passed string to a hash.",
            "examples": [],
            "hash": "0x98EFF6F1",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xF01E2AAB": {
            "name": "GET_HELI_MAIN_ROTOR_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF01E2AAB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "See the client-side [GET_HELI_MAIN_ROTOR_HEALTH](#\\_0xE4CB7541F413D2C5) for the return value."
        },
        "0x5F70F5A3": {
            "name": "GET_HOST_ID",
            "params": [],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x5F70F5A3",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x23473EA4": {
            "name": "GET_PASSWORD_HASH",
            "params": [
                {
                    "name": "password",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x23473EA4",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x76876154": {
            "name": "IS_FLASH_LIGHT_ON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x76876154",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped's flash light is on."
        },
        "0x8E8CC653": {
            "name": "PERFORM_HTTP_REQUEST_INTERNAL",
            "params": [
                {
                    "name": "requestData",
                    "type": "const char*"
                },
                {
                    "name": "requestDataLength",
                    "type": "int"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x8E8CC653",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x6B171E87": {
            "name": "PERFORM_HTTP_REQUEST_INTERNAL_EX",
            "params": [
                {
                    "name": "requestData",
                    "type": "Object"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x6B171E87",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x90892DED": {
            "name": "PRINT_STRUCTURED_TRACE",
            "params": [
                {
                    "name": "jsonString",
                    "type": "const char*",
                    "description": "JSON data to submit as `payload` in the `script_structured_trace` event."
                }
            ],
            "return_type": "void",
            "description": "Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of\r\nserver monitoring utilities.",
            "examples": [],
            "hash": "0x90892DED",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x281B5448": {
            "name": "REGISTER_CONSOLE_LISTENER",
            "params": [
                {
                    "name": "listener",
                    "type": "func",
                    "description": "A function of `(channel: string, message: string) => void`. The message might contain `\\n`."
                }
            ],
            "return_type": "void",
            "description": "Registers a listener for console output messages.",
            "examples": [],
            "hash": "0x281B5448",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x341B16D2": {
            "name": "SET_CONVAR",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*"
                },
                {
                    "name": "value",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x341B16D2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF292858C": {
            "name": "SET_CONVAR_REPLICATED",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable name."
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to set for the given console variable."
                }
            ],
            "return_type": "void",
            "description": "Used to replicate a server variable onto clients.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetConvarReplicated('voice_useNativeAudio', 'true')"
                }
            ],
            "hash": "0xF292858C",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9338D547": {
            "name": "SET_CONVAR_SERVER_INFO",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*"
                },
                {
                    "name": "value",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x9338D547",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF90B7469": {
            "name": "SET_GAME_TYPE",
            "params": [
                {
                    "name": "gametypeName",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xF90B7469",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF5C6330C": {
            "name": "SET_HTTP_HANDLER",
            "params": [
                {
                    "name": "handler",
                    "type": "func",
                    "description": "The handler function."
                }
            ],
            "return_type": "void",
            "description": "Sets the handler for HTTP requests made to the executing resource.\n\nExample request URL: `http://localhost:30120/http-test/ping` - this request will be sent to the `http-test` resource with the `/ping` path.\n\nThe handler function assumes the following signature:\n\n```ts\nfunction HttpHandler(\r\n  request: {\r\n    address: string;\r\n    headers: Record<string, string>;\r\n    method: string;\r\n    path: string;\r\n    setDataHandler(handler: (data: string) => void): void;\r\n    setDataHandler(handler: (data: ArrayBuffer) => void, binary: 'binary'): void;\r\n    setCancelHandler(handler: () => void): void;\r\n  },\r\n  response: {\r\n    writeHead(code: number, headers?: Record<string, string | string[]>): void;\r\n    write(data: string): void;\r\n    send(data?: string): void;\r\n  }\r\n): void;\n```\n\n*   **request**: The request object.\n    *   **address**: The IP address of the request sender.\n    *   **path**: The path to where the request was sent.\n    *   **headers**: The headers sent with the request.\n    *   **method**: The request method.\n    *   **setDataHandler**: Sets the handler for when a data body is passed with the request. Additionally you can pass the `'binary'` argument to receive a `BufferArray` in JavaScript or `System.Byte[]` in C# (has no effect in Lua).\n    *   **setCancelHandler**: Sets the handler for when the request is cancelled.\n*   **response**: An object to control the response.\n    *   **writeHead**: Sets the status code & headers of the response. Can be only called once and won't work if called after running other response functions.\n    *   **write**: Writes to the response body without sending it. Can be called multiple times.\n    *   **send**: Writes to the response body and then sends it along with the status code & headers, finishing the request.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetHttpHandler(function(request, response)\r\n  if request.method == 'GET' and request.path == '/ping' then -- if a GET request was sent to the `/ping` path\r\n      response.writeHead(200, { ['Content-Type'] = 'text/plain' }) -- set the response status code to `200 OK` and the body content type to plain text\r\n      response.send('pong') -- respond to the request with `pong`\r\n  else -- otherwise\r\n      response.writeHead(404) -- set the response status code to `404 Not Found`\r\n      response.send() -- respond to the request with no data\r\n  end\r\nend)"
                }
            ],
            "hash": "0xF5C6330C",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB7BA82DC": {
            "name": "SET_MAP_NAME",
            "params": [
                {
                    "name": "mapName",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB7BA82DC",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA0F2201F": {
            "name": "SET_ROUTING_BUCKET_ENTITY_LOCKDOWN_MODE",
            "params": [
                {
                    "name": "bucketId",
                    "type": "int",
                    "description": "The routing bucket ID to adjust."
                },
                {
                    "name": "mode",
                    "type": "const char*",
                    "description": "One of aforementioned modes."
                }
            ],
            "return_type": "void",
            "description": "Sets the entity lockdown mode for a specific routing bucket.\n\nLockdown modes are:\n\n| Mode       | Meaning                                                    |\r\n| ---------- | ---------------------------------------------------------- |\r\n| `strict`   | No entities can be created by clients at all.              |\r\n| `relaxed`  | Only script-owned entities created by clients are blocked. |\r\n| `inactive` | Clients can create any entity they want.                   |",
            "examples": [],
            "hash": "0xA0F2201F",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCE51AC2C": {
            "name": "SET_ROUTING_BUCKET_POPULATION_ENABLED",
            "params": [
                {
                    "name": "bucketId",
                    "type": "int",
                    "description": "The routing bucket ID to adjust."
                },
                {
                    "name": "mode",
                    "type": "BOOL",
                    "description": "`true` to enable population, `false` to disable population."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not the specified routing bucket has automatically-created population enabled.",
            "examples": [],
            "hash": "0xCE51AC2C",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2F7A49E6": {
            "name": "TRIGGER_CLIENT_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventTarget",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerClientEvent.",
            "examples": [],
            "hash": "0x2F7A49E6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x70B35890": {
            "name": "TRIGGER_LATENT_CLIENT_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventTarget",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                },
                {
                    "name": "bps",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerLatentClientEvent.",
            "examples": [],
            "hash": "0x70B35890",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2E310ACD": {
            "name": "VERIFY_PASSWORD_HASH",
            "params": [
                {
                    "name": "password",
                    "type": "const char*"
                },
                {
                    "name": "hash",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2E310ACD",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xAB7F7241": {
            "name": "ADD_CONVAR_CHANGE_LISTENER",
            "params": [
                {
                    "name": "conVarFilter",
                    "type": "const char*",
                    "description": "The Console Variable to listen for, this can be a pattern like \"test:\\*\", or null for any"
                },
                {
                    "name": "handler",
                    "type": "func",
                    "description": "The handler function."
                }
            ],
            "return_type": "int",
            "description": "Adds a listener for Console Variable changes.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction ConVarChangeListener(conVarName: string, reserved: any);\n```\n\n*   **conVarName**: The ConVar that changed.\n*   **reserved**: Currently unused.",
            "examples": [
                {
                    "lang": "js",
                    "code": "// listen for all convar changes\r\nAddConvarChangeListener(null, (conVarName, reserved) => {\r\n    print(GetConvarInt(conVarName))\r\n})\r\n\r\n// listen to convars that start with \"script:\"\r\nAddConvarChangeListener(\"script:*\", (conVarName, reserved) => {\r\n    print(GetConvarInt(conVarName))\r\n})"
                }
            ],
            "hash": "0xAB7F7241",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A cookie to remove the change handler."
        },
        "0x5BA35AAF": {
            "name": "ADD_STATE_BAG_CHANGE_HANDLER",
            "params": [
                {
                    "name": "keyFilter",
                    "type": "const char*",
                    "description": "The key to check for, or null for no filter."
                },
                {
                    "name": "bagFilter",
                    "type": "const char*",
                    "description": "The bag ID to check for such as `entity:65535`, or null for no filter."
                },
                {
                    "name": "handler",
                    "type": "func",
                    "description": "The handler function."
                }
            ],
            "return_type": "int",
            "description": "Adds a handler for changes to a state bag.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);\n```\n\n*   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`\r\n    or `localEntity:Handle`.\n*   **key**: The changed key.\n*   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.\n*   **reserved**: Currently unused.\n*   **replicated**: Whether the set is meant to be replicated.\n\nAt this time, the change handler can't opt to reject changes.\n\nIf bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](#\\_0x4BDF1867) to get the entity handle\r\nIf bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](#\\_0xA56135E0) to get the player handle",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity == 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
                },
                {
                    "lang": "cs",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null,\r\n    new Action<string, string, object, int, bool>\r\n    (async (bagName, key, value, res, rep) =>\r\n    {\r\n        bool val = (bool)value;\r\n\r\n        var entity = GetEntityFromStateBagName(bagName);\r\n        //-- Whoops, we don't have a valid entity!\r\n        if (entity == 0) return;\r\n        //-- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n        while (!HasCollisionLoadedAroundEntity(entity))\r\n        {\r\n            //--The entity went out of our scope before the collision loaded\r\n            if (!DoesEntityExist(entity)) return;\r\n\r\n            await Delay(250);\r\n        }\r\n        SetEntityInvincible(entity, val);\r\n        FreezeEntityPosition(entity, val);\r\n        TaskSetBlockingOfNonTemporaryEvents(entity, val);\r\n    }));"
                }
            ],
            "hash": "0x5BA35AAF",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A cookie to remove the change handler."
        },
        "0xFA29D35D": {
            "name": "CANCEL_EVENT",
            "params": [],
            "return_type": "void",
            "description": "Cancels the currently executing event.",
            "examples": [],
            "hash": "0xFA29D35D",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x1E86F206": {
            "name": "DELETE_FUNCTION_REFERENCE",
            "params": [
                {
                    "name": "referenceIdentity",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E86F206",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xF4E2079D": {
            "name": "DUPLICATE_FUNCTION_REFERENCE",
            "params": [
                {
                    "name": "referenceIdentity",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xF4E2079D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x561C060B": {
            "name": "EXECUTE_COMMAND",
            "params": [
                {
                    "name": "commandString",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "Depending on your use case you may need to use `add_acl resource.<your_resource_name> command.<command_name> allow` to use this native in your resource.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\r\n  -- stop the server after 1 minute\r\n  Citizen.Wait(60000)\r\n  ExecuteCommand(\"quit Shortlived\")\r\nend)"
                }
            ],
            "hash": "0x561C060B",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xD70C3BCA": {
            "name": "FORMAT_STACK_TRACE",
            "params": [
                {
                    "name": "traceData",
                    "type": "Object"
                }
            ],
            "return_type": "const char*",
            "description": "An internal function for converting a stack trace object to a string.",
            "examples": [],
            "hash": "0xD70C3BCA",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x6CCD2564": {
            "name": "GET_CONVAR",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "default_",
                    "type": "const char*",
                    "description": "The default value to set if none is found."
                }
            ],
            "return_type": "const char*",
            "description": "Can be used to get a console variable of type `char*`, for example a string.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvar('voice_useNativeAudio', 'false') == 'true' then\r\n    Citizen.Trace('Native Audio is enabled.')\r\nend"
                }
            ],
            "hash": "0x6CCD2564",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x7E8EBFE5": {
            "name": "GET_CONVAR_BOOL",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "defaultValue",
                    "type": "BOOL",
                    "description": "The default value to set if none is found."
                }
            ],
            "return_type": "BOOL",
            "description": "Can be used to get a console variable casted back to `bool`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvarBool('dev_mode', false) then\r\n    print(\"Dev Mode is eanbled, load dev mode menus\")\r\nend"
                }
            ],
            "hash": "0x7E8EBFE5",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x9E666D": {
            "name": "GET_CONVAR_FLOAT",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to get"
                },
                {
                    "name": "defaultValue",
                    "type": "float",
                    "description": "The default value to set, if none are found."
                }
            ],
            "return_type": "float",
            "description": "This will have floating point inaccuracy.",
            "examples": [],
            "hash": "0x9E666D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the value set in varName, or `default` if none are specified"
        },
        "0x935C0AB2": {
            "name": "GET_CONVAR_INT",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "default_",
                    "type": "int",
                    "description": "The default value to set if none is found (variable not set using [SET_CONVAR](#\\_0x341B16D2), or not accessible)."
                }
            ],
            "return_type": "int",
            "description": "Can be used to get a console variable casted back to `int` (an integer value).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvarInt('remainingRounds', 0) < 900 then\r\n    Citizen.Trace(\"Less than 900 rounds remaining...\")\r\nend"
                }
            ],
            "hash": "0x935C0AB2",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x804B9F7B": {
            "name": "GET_GAME_BUILD_NUMBER",
            "params": [],
            "return_type": "int",
            "description": "Returns the internal build number of the current game being executed.\n\nPossible values:\n\n*   FiveM\n    *   1604\n    *   2060\n    *   2189\n    *   2372\n    *   2545\n    *   2612\n    *   2699\n    *   2802\n    *   2944\n    *   3095\n    *   3258\n    *   3323\n    *   3407\n    *   3570\n*   RedM\n    *   1311\n    *   1355\n    *   1436\n    *   1491\n*   LibertyM\n    *   43\n*   FXServer\n    *   0",
            "examples": [],
            "hash": "0x804B9F7B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The build number, or **0** if no build number is known."
        },
        "0xE8EAA18B": {
            "name": "GET_GAME_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the current game being executed.\n\nPossible values:\n\n| Return value | Meaning                        |\r\n| ------------ | ------------------------------ |\r\n| `fxserver`   | Server-side code ('Duplicity') |\r\n| `fivem`      | FiveM for GTA V                |\r\n| `libertym`   | LibertyM for GTA IV            |\r\n| `redm`       | RedM for Red Dead Redemption 2 |",
            "examples": [],
            "hash": "0xE8EAA18B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The game the script environment is running in."
        },
        "0x2B9D4F50": {
            "name": "GET_GAME_POOL",
            "params": [
                {
                    "name": "poolName",
                    "type": "const char*",
                    "description": "The pool name to get a list of entities from."
                }
            ],
            "return_type": "Object",
            "description": "Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as\r\nfollows:\n\n```json\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```\n\n### Supported pools\n\n*   `CPed`: Peds (including animals) and players.\n*   `CObject`: Objects (props), doors, and projectiles.\n*   `CNetObject`: Networked objects\n*   `CVehicle`: Vehicles.\n*   `CPickup`: Pickups.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehiclePool = GetGamePool('CVehicle') -- Get the list of vehicles (entities) from the pool\r\nfor i = 1, #vehiclePool do -- loop through each vehicle (entity)\r\n    if GetPedInVehicleSeat(vehiclePool[i], -1) == 0 then\r\n        DeleteEntity(vehiclePool[i]) -- Delete vehicles (entities) that don't have a driver\r\n    end\r\nend"
                }
            ],
            "hash": "0x2B9D4F50",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An array containing entity handles for each entity in the named pool."
        },
        "0x9F1C4383": {
            "name": "GET_INSTANCE_ID",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9F1C4383",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0xD4BEF069": {
            "name": "GET_REGISTERED_COMMANDS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all commands that are registered in the command system.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\",\r\n\"resource\": \"resource\",\r\n\"arity\" = -1,\r\n},\r\n{\r\n\"name\": \"command1\"\r\n\"resource\": \"resource_2\",\r\n\"arity\" = -1,\r\n}\r\n]\n```",
            "examples": [],
            "hash": "0xD4BEF069",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An object containing registered commands."
        },
        "0x78D864C7": {
            "name": "GET_STATE_BAG_KEYS",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "The name of the bag."
                }
            ],
            "return_type": "Object",
            "description": "",
            "examples": [],
            "hash": "0x78D864C7",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns an array containing all keys for which the state bag has associated values."
        },
        "0x637F4C75": {
            "name": "GET_STATE_BAG_VALUE",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*"
                },
                {
                    "name": "key",
                    "type": "const char*"
                }
            ],
            "return_type": "Object",
            "description": "Returns the value of a state bag key.",
            "examples": [],
            "hash": "0x637F4C75",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Value."
        },
        "0x7EBB9929": {
            "name": "IS_ACE_ALLOWED",
            "params": [
                {
                    "name": "object",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7EBB9929",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0xCF24C52E": {
            "name": "IS_DUPLICITY_VERSION",
            "params": [],
            "return_type": "BOOL",
            "description": "Gets whether or not this is the CitizenFX server.",
            "examples": [],
            "hash": "0xCF24C52E",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A boolean value."
        },
        "0x37CF52CE": {
            "name": "IS_PRINCIPAL_ACE_ALLOWED",
            "params": [
                {
                    "name": "principal",
                    "type": "const char*"
                },
                {
                    "name": "object",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x37CF52CE",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x5FA79B0F": {
            "name": "REGISTER_COMMAND",
            "params": [
                {
                    "name": "commandName",
                    "type": "const char*",
                    "description": "The command you want to register."
                },
                {
                    "name": "handler",
                    "type": "func",
                    "description": "A handler function that gets called whenever the command is executed."
                },
                {
                    "name": "restricted",
                    "type": "BOOL",
                    "description": "If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command."
                }
            ],
            "return_type": "void",
            "description": "Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- (server side script)\r\n-- Registers a command named 'ping'.\r\nRegisterCommand(\"ping\", function(source, args, rawCommand)\r\n    -- If the source is > 0, then that means it must be a player.\r\n    if (source > 0) then\r\n    \r\n        -- result (using the default GTA:O chat theme) https://i.imgur.com/TaCnG09.png\r\n        TriggerClientEvent(\"chat:addMessage\", -1, {\r\n            args = {\r\n                GetPlayerName(source),\r\n                \"PONG!\"\r\n            },\r\n            color = { 5, 255, 255 }\r\n        })\r\n    \r\n    -- If it's not a player, then it must be RCON, a resource, or the server console directly.\r\n    else\r\n        print(\"This command was executed by the server console, RCON client, or a resource.\")\r\n    end\r\nend, false --[[this command is not restricted, everyone can use this.]])"
                },
                {
                    "lang": "cs",
                    "code": "RegisterCommand(\"ping\", new Action<int, List<object>, string>((source, args, rawCommand) =>\r\n{\r\n    if (source > 0) // it's a player.\r\n    {\r\n        // Create a message object.\r\n        dynamic messageObject = new ExpandoObject();\r\n        // Set the message object args (message author, message content)\r\n        messageObject.args = new string[] { GetPlayerName(source.ToString()), \"PONG!\" };\r\n        // Set the message color (r, g, b)\r\n        messageObject.color = new int[] { 5, 255, 255 };\r\n\r\n        // Trigger the client event with the message object on all clients.\r\n        TriggerClientEvent(\"chat:addMessage\", messageObject);\r\n    }\r\n    // It's not a player, so it's the server console, a RCON client, or a resource.\r\n    else\r\n    {\r\n        Debug.WriteLine(\"This command was executed by the server console, RCON client, or a resource.\");\r\n    }\r\n}), false /*This command is also not restricted, anyone can use it.*/ );"
                }
            ],
            "hash": "0x5FA79B0F",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xEAC49841": {
            "name": "REMOVE_CONVAR_CHANGE_LISTENER",
            "params": [
                {
                    "name": "cookie",
                    "type": "int",
                    "description": "The cookie returned from [ADD_CONVAR_CHANGE_LISTENER](#\\_0xAB7F7241)"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xEAC49841",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xD36BE661": {
            "name": "REMOVE_STATE_BAG_CHANGE_HANDLER",
            "params": [
                {
                    "name": "cookie",
                    "type": "int",
                    "description": "The cookie."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRemoves a handler for changes to a state bag.",
            "examples": [],
            "hash": "0xD36BE661",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x8D50E33A": {
            "name": "SET_STATE_BAG_VALUE",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*"
                },
                {
                    "name": "keyName",
                    "type": "const char*"
                },
                {
                    "name": "valueData",
                    "type": "const char*"
                },
                {
                    "name": "valueLength",
                    "type": "int"
                },
                {
                    "name": "replicated",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Internal function for setting a state bag value.",
            "examples": [],
            "hash": "0x8D50E33A",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x12A330": {
            "name": "STATE_BAG_HAS_KEY",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "The name of the bag."
                },
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key used to check data existence."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x12A330",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns true if the data associated with the specified key exists; otherwise, returns false."
        },
        "0x91310870": {
            "name": "TRIGGER_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerEvent.",
            "examples": [],
            "hash": "0x91310870",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x58382A19": {
            "name": "WAS_EVENT_CANCELED",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns whether or not the currently executing event was canceled.",
            "examples": [],
            "hash": "0x58382A19",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A boolean."
        }
    },
    "PED": {
        "0x310D0271": {
            "name": "GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                }
            ],
            "return_type": "int",
            "description": "An analogue of [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842) that returns number of drawable variations inside a single collection instead of the total number across all collections.",
            "examples": [],
            "hash": "0x310D0271",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Number of drawables available in the given collection. Returns 0 if ped or collection does not exist."
        },
        "0x3B6A13E1": {
            "name": "GET_NUMBER_OF_PED_COLLECTION_PROP_DRAWABLE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                }
            ],
            "return_type": "int",
            "description": "An analogue of [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47) that returns number of prop variations inside a single collection instead of the total number across all collections.",
            "examples": [],
            "hash": "0x3B6A13E1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Number of props available in the given collection. Returns 0 if ped or collection does not exist."
        },
        "0x75CAF9CC": {
            "name": "GET_NUMBER_OF_PED_COLLECTION_PROP_TEXTURE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Local prop index inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_DRAWABLE_VARIATIONS](#\\_0x3B6A13E1)."
                }
            ],
            "return_type": "int",
            "description": "An alternative to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171) that uses local collection indexing instead of the global one.",
            "examples": [],
            "hash": "0x75CAF9CC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Number of texture variations available for the given prop. Returns 0 if ped or collection does not exist or index is out of bounds."
        },
        "0xD2C15D7": {
            "name": "GET_NUMBER_OF_PED_COLLECTION_TEXTURE_VARIATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                }
            ],
            "return_type": "int",
            "description": "An alternative to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD) that uses local collection indexing instead of the global one.",
            "examples": [],
            "hash": "0xD2C15D7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Number of texture variations available for the given drawable component. Returns 0 if ped or collection does not exist or index is out of bounds."
        },
        "0x45946359": {
            "name": "GET_PED_COLLECTIONS_COUNT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "int",
            "description": "Returns number of variation collections available for the given Ped.\n\nCollections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271) etc natives for more details on how to work with collections.\n\n`GET_PED_COLLECTIONS_COUNT` can be used together with [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) to list all collections attached to Ped.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\nlocal count = GetPedCollectionsCount(ped)\r\nfor i = 0, count - 1 do\r\n  print(GetPedCollectionName(ped, i))\r\nend"
                }
            ],
            "hash": "0x45946359",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Number of Ped variation collections. 0 if Ped is not found."
        },
        "0x94EB1FE4": {
            "name": "GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Global drawable ID. Same as set in [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80). Global drawable ID points to drawables as if drawables from all collections for the given component are placed into one continuous array."
                }
            ],
            "return_type": "int",
            "description": "Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B)) for the given global drawable ID. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\\_0x88711BBA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\n-- Top for mp_f_freemode_01. From female_freemode_beach collection under index 1.\r\n-- Global index is 17 because there is 16 top variations in the base game collection that goes before the female_freemode_beach collection.\r\nlocal name = GetPedDrawableCollectionName(ped, 11, 17)\r\nlocal index = GetPedDrawableCollectionLocalIndex(ped, 11, 17)\r\n-- Equivalent to SetPedComponentVariation(ped, 11, 17, 0, 0)\r\nSetPedCollectionComponentVariation(ped, 11, name, index, 0, 0)"
                }
            ],
            "hash": "0x94EB1FE4",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Local index inside a collection that the given global drawable ID corresponds to. Returns -1 if Ped is not found or the global index is out of bounds."
        },
        "0xFBDB885F": {
            "name": "GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Global prop index. Same as set by `drawableId` in [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F). Global prop index points to prop as if props from all collections for the given component are placed into one continuous array."
                }
            ],
            "return_type": "int",
            "description": "Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_PROP](#\\_0x8ED0C17)) for the given global prop index. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\\_0x75240BCB).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\n-- Hat for mp_f_freemode_01. From female_freemode_beach collection under index 1.\r\n-- Global index is 21 because there is 20 head prop variations in the base game collection that goes before the female_freemode_beach collection.\r\nlocal name = GetPedPropCollectionName(ped, 0, 21)\r\nlocal index = GetPedPropCollectionLocalIndex(ped, 0, 21)\r\n-- Equivalent to SetPedPropIndex(ped, 0, 21, 0, false)\r\nSetPedCollectionPropIndex(ped, 0, name, index, 0, false)"
                }
            ],
            "hash": "0xFBDB885F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Local index inside a collection that the given global prop index corresponds to. Returns -1 if Ped is not found or the global index is out of bounds."
        },
        "0xFED5D83A": {
            "name": "GET_PED_COLLECTION_NAME",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "The target collection index"
                }
            ],
            "return_type": "const char*",
            "description": "Returns name of collection under given index for the given Ped.\n\nCollections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271) etc natives for more details on how to work with collections.\n\n`GET_PED_COLLECTION_NAME` can be used together with [GET_PED_COLLECTIONS_COUNT](#\\_0x45946359) to list all collections attached to Ped.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\nlocal count = GetPedCollectionsCount(ped)\r\nfor i = 0, count - 1 do\r\n  print(GetPedCollectionName(ped, i))\r\nend"
                }
            ],
            "hash": "0xFED5D83A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Name of the collection with given index. Base game collection (always stored with index 0) is an empty string. Returns null if Ped is not found or index is out of bounds."
        },
        "0xD6BBA48B": {
            "name": "GET_PED_COLLECTION_NAME_FROM_DRAWABLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Global drawable ID. Same as set in [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80). Global drawable ID points to drawables as if drawables from all collections for the given component are placed into one continuous array."
                }
            ],
            "return_type": "const char*",
            "description": "Gets collection name for the given global drawable ID. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) is used to get collection and local index (inside the given collection) of the drawable. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\\_0x88711BBA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\n-- Top for mp_f_freemode_01. From female_freemode_beach collection under index 1.\r\n-- Global index is 17 because there is 16 top variations in the base game collection that goes before the female_freemode_beach collection.\r\nlocal name = GetPedDrawableCollectionName(ped, 11, 17)\r\nlocal index = GetPedDrawableCollectionLocalIndex(ped, 11, 17)\r\n-- Equivalent to SetPedComponentVariation(ped, 11, 17, 0, 0)\r\nSetPedCollectionComponentVariation(ped, 11, name, index, 0, 0)"
                }
            ],
            "hash": "0xD6BBA48B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Name of the collection that the given global drawable ID corresponds to. Base game collection is an empty string. Returns null if Ped is not found or the global index is out of bounds."
        },
        "0x8ED0C17": {
            "name": "GET_PED_COLLECTION_NAME_FROM_PROP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Global prop index. Same as set by `drawableId` in [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F). Global prop index points to prop as if props from all collections for the given component are placed into one continuous array."
                }
            ],
            "return_type": "const char*",
            "description": "Gets collection name for the given global prop index. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\\_0xFBDB885F) is used to get collection and local index (inside the given collection) of the prop. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\\_0x75240BCB).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\n-- Hat for mp_f_freemode_01. From female_freemode_beach collection under index 1.\r\n-- Global index is 21 because there is 20 head prop variations in the base game collection that goes before the female_freemode_beach collection.\r\nlocal name = GetPedPropCollectionName(ped, 0, 21)\r\nlocal index = GetPedPropCollectionLocalIndex(ped, 0, 21)\r\n-- Equivalent to SetPedPropIndex(ped, 0, 21, 0, false)\r\nSetPedCollectionPropIndex(ped, 0, name, index, 0, false)"
                }
            ],
            "hash": "0x8ED0C17",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Name of the collection that the given global drawable ID corresponds to. Base game collection is an empty string. Returns null if Ped is not found or the global index is out of bounds."
        },
        "0x7CCE1163": {
            "name": "GET_PED_DECORATIONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to retrieve data for."
                }
            ],
            "return_type": "Object",
            "description": "Returns a list of decorations applied to a ped.\n\nThe data returned adheres to the following layout:\n\n```\n[ [ collectionHash1, overlayHash1 ], ..., [c ollectionHashN, overlayHashN ] ]\n```\n\nThis command will return undefined data if invoked on a remote player ped.",
            "examples": [],
            "hash": "0x7CCE1163",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of applied decorations."
        },
        "0xF5A904F9": {
            "name": "GET_PED_DENSITY_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x95E3D6257B166CF2).",
            "examples": [],
            "hash": "0xF5A904F9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped density multiplier value."
        },
        "0x280F1FC3": {
            "name": "GET_PED_DRAWABLE_GLOBAL_INDEX_FROM_COLLECTION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                }
            ],
            "return_type": "int",
            "description": "Returns global drawable index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) natives.\n\nDrawables are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.\n\nIf all drawables from all collections are placed into one continuous array - the global index will correspond to the index of drawable in such array. Local index is index of drawable in this array relative to the start of the given collection.",
            "examples": [],
            "hash": "0x280F1FC3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Global drawable ID that corresponds to the given collection and local drawable index. Returns -1 if Ped or collection does not exist or local index is out of bounds."
        },
        "0x9970386F": {
            "name": "GET_PED_DRAWABLE_VARIATION_COLLECTION_LOCAL_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                }
            ],
            "return_type": "int",
            "description": "An analogue to [GET_PED_DRAWABLE_VARIATION](#\\_0x67F3780DD425D4FC) that returns collection local drawable index (inside [GET_PED_DRAWABLE_VARIATION_COLLECTION_NAME](#\\_0xBCE0AB63) collection) instead of the global drawable index.",
            "examples": [],
            "hash": "0x9970386F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Local drawable index of the drawable that is currently used in the given ped and component."
        },
        "0xBCE0AB63": {
            "name": "GET_PED_DRAWABLE_VARIATION_COLLECTION_NAME",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                }
            ],
            "return_type": "const char*",
            "description": "An analogue to [GET_PED_DRAWABLE_VARIATION](#\\_0x67F3780DD425D4FC) that returns collection name instead of the global drawable index.\n\nShould be used together with [GET_PED_DRAWABLE_VARIATION_COLLECTION_LOCAL_INDEX](#\\_0x9970386F).",
            "examples": [],
            "hash": "0xBCE0AB63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Collection name to which the current drawable used in the given ped and component belongs to. Returns null if Ped is not found or index is out of bounds."
        },
        "0xA47B860F": {
            "name": "GET_PED_EYE_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "int",
            "description": "A getter for [\\_SET_PED_EYE_COLOR](#\\_0x50B56988B170AFDF). Returns -1 if fails to get.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local pedEyeColour = GetPedEyeColor(PlayerPedId())\r\nif pedEyeColour == 7 then\r\n  print(\"Gray eyes!\")\r\nend"
                }
            ],
            "hash": "0xA47B860F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's eye colour, or -1 if fails to get."
        },
        "0xBA352ADD": {
            "name": "GET_PED_FACE_FEATURE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "Face feature index"
                }
            ],
            "return_type": "float",
            "description": "A getter for [\\_SET_PED_FACE_FEATURE](#\\_0x71A5C1DBA060049E). Returns 0.0 if fails to get.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local noseWidth = GetPedFaceFeature(PlayerPedId(), 0)\r\nif noseWidth == 1.0 then\r\n  print(\"You have big nose!\")\r\nend"
                }
            ],
            "hash": "0xBA352ADD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's face feature value, or 0.0 if fails to get."
        },
        "0xA3EA2893": {
            "name": "GET_PED_HAIR_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "int",
            "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local primaryColour = GetPedHairColor(PlayerPedId())\r\nif primaryColour == 18 then\r\n  print(\"You have red hair!\")\r\nend"
                }
            ],
            "hash": "0xA3EA2893",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's primary hair colour."
        },
        "0x4B087305": {
            "name": "GET_PED_HAIR_HIGHLIGHT_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "int",
            "description": "A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local secondaryColour = GetPedHairHighlightColor(PlayerPedId())\r\nif secondaryColour == 32 then\r\n  print(\"You have pink hair highlight colour!\")\r\nend"
                }
            ],
            "hash": "0x4B087305",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's secondary hair colour."
        },
        "0xC46EE605": {
            "name": "GET_PED_HEAD_OVERLAY_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "Overlay index"
                },
                {
                    "name": "overlayValue",
                    "type": "int*",
                    "description": "Overlay value pointer"
                },
                {
                    "name": "colourType",
                    "type": "int*",
                    "description": "Colour type pointer"
                },
                {
                    "name": "firstColour",
                    "type": "int*",
                    "description": "First colour pointer"
                },
                {
                    "name": "secondColour",
                    "type": "int*",
                    "description": "Second colour pointer"
                },
                {
                    "name": "overlayOpacity",
                    "type": "float*",
                    "description": "Opacity pointer"
                }
            ],
            "return_type": "BOOL",
            "description": "A getter for [SET_PED_HEAD_OVERLAY](#\\_0x48F44967FA05CC1E) and [\\_SET_PED_HEAD_OVERLAY_COLOR](#\\_0x497BF74A7B9CB952) natives.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- getting beard overlay data\r\nlocal success, overlayValue, colourType, firstColour, secondColour, overlayOpacity = GetPedHeadOverlayData(PlayerPedId(), 1)\r\nif success then\r\n  -- incrementing value\r\n  SetPedHeadOverlay(PlayerPedId(), 1, overlayValue + 1, overlayOpacity)\r\nend"
                }
            ],
            "hash": "0xC46EE605",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's head overlay data."
        },
        "0xF71542F7": {
            "name": "GET_PED_MODEL_HEALTH_CONFIG",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Ped's model."
                }
            ],
            "return_type": "Hash",
            "description": "Gets a ped model's health config.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "GetPedModelHealthConfig(`mp_f_freemode_01`)"
                }
            ],
            "hash": "0xF71542F7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFE08CAD6": {
            "name": "GET_PED_MODEL_PERSONALITY",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Ped's model."
                }
            ],
            "return_type": "Hash",
            "description": "Gets a ped model's personality type.",
            "examples": [],
            "hash": "0xFE08CAD6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x69E81E3D": {
            "name": "GET_PED_MOVEMENT_CLIPSET",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x69E81E3D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The current movement clipset hash."
        },
        "0xCD420AD1": {
            "name": "GET_PED_PROP_COLLECTION_LOCAL_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                }
            ],
            "return_type": "int",
            "description": "An analogue to [GET_PED_PROP_INDEX](#\\_0x898CC20EA75BACD8) that returns collection local prop index (inside [GET_PED_PROP_COLLECTION_NAME](#\\_0x6B5653E4) collection) instead of the global prop index.",
            "examples": [],
            "hash": "0xCD420AD1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Local drawable index of the drawable that is currently used in the given ped and component, or -1 if the ped does not have a prop at the specified anchor point"
        },
        "0x6B5653E4": {
            "name": "GET_PED_PROP_COLLECTION_NAME",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                }
            ],
            "return_type": "const char*",
            "description": "An analogue to [GET_PED_PROP_INDEX](#\\_0x898CC20EA75BACD8) that returns collection name instead of the global drawable index.\n\nShould be used together with [GET_PED_PROP_COLLECTION_LOCAL_INDEX](#\\_0xCD420AD1).",
            "examples": [],
            "hash": "0x6B5653E4",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Collection name to which the current prop used in the given ped and anchor point belongs to. Returns null if Ped is not found, does not have a prop at the specified anchor point, or if the index is out of bounds."
        },
        "0x2CB45CDC": {
            "name": "GET_PED_PROP_GLOBAL_INDEX_FROM_COLLECTION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Local prop index inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_DRAWABLE_VARIATIONS](#\\_0x3B6A13E1)."
                }
            ],
            "return_type": "int",
            "description": "Returns global prop index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_PROP](#\\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\\_0xFBDB885F) natives.\n\nProps are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.\n\nIf all props from all collections are placed into one continuous array - the global index will correspond to the index of the prop in such array. Local index is index of the prop in this array relative to the start of the given collection.",
            "examples": [],
            "hash": "0x2CB45CDC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Global prop index that corresponds to the given collection and local prop index. Returns -1 if Ped or collection does not exist or local index is out of bounds."
        },
        "0x44B91E94": {
            "name": "GET_PED_SWEAT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PED_SWEAT](#\\_0x27B0405F59637D1F).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local sweat = GetPedSweat(PlayerPedId())"
                }
            ],
            "hash": "0x44B91E94",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ped's sweat."
        },
        "0x33B2AFA2": {
            "name": "IS_PED_COLLECTION_COMPONENT_VARIATION_GEN9_EXCLUSIVE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                }
            ],
            "return_type": "BOOL",
            "description": "An alternative to [IS_PED_COMPONENT_VARIATION_GEN9\\_EXCLUSIVE](#\\_0xC767B581) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) natives.",
            "examples": [],
            "hash": "0x33B2AFA2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Whether or not the ped component variation is a gen9 exclusive (stub assets)."
        },
        "0xCA63A52A": {
            "name": "IS_PED_COLLECTION_COMPONENT_VARIATION_VALID",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_COLLECTION_TEXTURE_VARIATIONS](#\\_0xD2C15D7)."
                }
            ],
            "return_type": "BOOL",
            "description": "An alternative to [IS_PED_COMPONENT_VARIATION_VALID](#\\_0xE825F6B6CEA7671D) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) natives.",
            "examples": [],
            "hash": "0xCA63A52A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true if the component variation is valid. This may be useful for randomizing components using loops."
        },
        "0xC767B581": {
            "name": "IS_PED_COMPONENT_VARIATION_GEN9_EXCLUSIVE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component id."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local ped = PlayerPedId()\r\n\r\nfor component = 0, 12 do\r\n  local count = GetNumberOfPedDrawableVariations(ped, component)\r\n\r\n  for drawable = 0, count - 1 do\r\n    if IsPedComponentVariationGen9Exclusive(ped, component, drawable) then\r\n      print(\"Component \" .. component .. \" drawable \" .. drawable .. \" is a gen9 exclusive, skip!\")\r\n    end\r\n  end\r\nend"
                }
            ],
            "hash": "0xC767B581",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Whether or not the ped component variation is a gen9 exclusive (stub assets)."
        },
        "0x90A9E0B2": {
            "name": "OVERRIDE_PEDS_CAN_STAND_ON_TOP_FLAG",
            "params": [
                {
                    "name": "flag",
                    "type": "BOOL",
                    "description": "true to override, false to use default game behavior."
                }
            ],
            "return_type": "void",
            "description": "Sets whether peds can stand on top of *all* vehicles without falling off.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
            "examples": [],
            "hash": "0x90A9E0B2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB14F8EAD": {
            "name": "OVERRIDE_PEDS_USE_DEFAULT_DRIVE_BY_CLIPSET",
            "params": [
                {
                    "name": "flag",
                    "type": "BOOL",
                    "description": "true to override, false to use default game behavior."
                }
            ],
            "return_type": "void",
            "description": "Allows the bypassing of default game behavior that prevents the use of [SET_PED_DRIVE_BY_CLIPSET_OVERRIDE](#\\_0xED34AB6C5CB36520) in certain scenarios to avoid clipping issues (e.g., when there is more than one Ped in a vehicle).\n\nNote: This flag and the overridden clipset are not replicated values and require synchronization through user scripts. Additionally, current game behavior also restricts applying this clipset locally when in first-person mode and will require a temporary workaround.",
            "examples": [],
            "hash": "0xB14F8EAD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x79A12861": {
            "name": "RESET_PED_MODEL_PERSONALITY",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Ped's model."
                }
            ],
            "return_type": "void",
            "description": "Restores an overridden ped model personality type to the default value.",
            "examples": [],
            "hash": "0x79A12861",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x88711BBA": {
            "name": "SET_PED_COLLECTION_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_COLLECTION_TEXTURE_VARIATIONS](#\\_0xD2C15D7)."
                },
                {
                    "name": "paletteId",
                    "type": "int",
                    "description": "0 to 3."
                }
            ],
            "return_type": "void",
            "description": "An alternative to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) natives.",
            "examples": [],
            "hash": "0x88711BBA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x14B5BBE0": {
            "name": "SET_PED_COLLECTION_PRELOAD_PROP_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Local prop index inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_DRAWABLE_VARIATIONS](#\\_0x3B6A13E1)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_TEXTURE_VARIATIONS](#\\_0x75CAF9CC)."
                }
            ],
            "return_type": "void",
            "description": "An alternative to [SET_PED_PRELOAD_PROP_DATA](#\\_0x2B16A3BFF1FBCE49) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\\_0xFBDB885F) natives.",
            "examples": [],
            "hash": "0x14B5BBE0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3EC75558": {
            "name": "SET_PED_COLLECTION_PRELOAD_VARIATION_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "One of the components from [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "Local drawable Id inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\\_0x310D0271)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_COLLECTION_TEXTURE_VARIATIONS](#\\_0xD2C15D7)."
                }
            ],
            "return_type": "void",
            "description": "An alternative to [SET_PED_PRELOAD_VARIATION_DATA](#\\_0x39D55A620FCB6A3A) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\\_0x94EB1FE4) natives.",
            "examples": [],
            "hash": "0x3EC75558",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x75240BCB": {
            "name": "SET_PED_COLLECTION_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "anchorPoint",
                    "type": "int",
                    "description": "One of the anchor points from [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)"
                },
                {
                    "name": "collection",
                    "type": "const char*",
                    "description": "Name of the collection. Empty string for the base game collection. See [GET_PED_COLLECTION_NAME](#\\_0xFED5D83A) in order to list all available collections."
                },
                {
                    "name": "propIndex",
                    "type": "int",
                    "description": "Local prop index inside the given collection. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_DRAWABLE_VARIATIONS](#\\_0x3B6A13E1)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_COLLECTION_PROP_TEXTURE_VARIATIONS](#\\_0x75CAF9CC)."
                },
                {
                    "name": "attach",
                    "type": "BOOL",
                    "description": "Attached or not."
                }
            ],
            "return_type": "void",
            "description": "An alternative to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F) that uses local collection indexing instead of the global one.\n\nThe local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.\n\nCollection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\\_0xFBDB885F) natives.",
            "examples": [],
            "hash": "0x75240BCB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x8E51EC29": {
            "name": "SET_PED_MELEE_COMBAT_LIMITS",
            "params": [
                {
                    "name": "primaryCount",
                    "type": "int",
                    "description": "The number of peds that engage in combat (default: 1)"
                },
                {
                    "name": "secondaryCount",
                    "type": "int",
                    "description": "The number of peds that engage in taunting (default: 3)"
                },
                {
                    "name": "populationPedCount",
                    "type": "int",
                    "description": "The maximum number of population peds (ambient and scenario) that can engage in combat (default: 3)"
                }
            ],
            "return_type": "void",
            "description": "Override the limits on the number and types of melee combatants. The game is limited to at most ten combatants among the three types: primary, secondary, and observers.\n\nThis native infers the number of observers based on the primary and secondary counts.",
            "examples": [],
            "hash": "0x8E51EC29",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xAF12A05D": {
            "name": "SET_PED_MODEL_HEALTH_CONFIG",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Ped's model."
                },
                {
                    "name": "configName",
                    "type": "const char*",
                    "description": "Name of health config."
                }
            ],
            "return_type": "void",
            "description": "Sets a ped model's health config.\r\nTakes effect only after setting player model with `SET_PLAYER_MODEL`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local pedModel = `mp_f_freemode_01`\r\nSetPedModelHealthConfig(pedModel, \"Strong\")\r\n\r\nSetPlayerModel(PlayerId(), pedModel)\r\nSetPedDefaultComponentVariation(PlayerPedId())\r\n"
                }
            ],
            "hash": "0xAF12A05D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x46F6B38B": {
            "name": "SET_PED_MODEL_PERSONALITY",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "Ped's model."
                },
                {
                    "name": "personalityHash",
                    "type": "Hash",
                    "description": "Personality hash."
                }
            ],
            "return_type": "void",
            "description": "Overrides a ped model personality type.",
            "examples": [],
            "hash": "0x46F6B38B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB300F03": {
            "name": "SET_PED_TURNING_THRESHOLDS",
            "params": [
                {
                    "name": "min",
                    "type": "float",
                    "description": "Leftside angle on the above diagram"
                },
                {
                    "name": "max",
                    "type": "float",
                    "description": "Rightside angle on the above diagram"
                }
            ],
            "return_type": "void",
            "description": "Purpose: The game's default values for these make shooting while traveling Left quite a bit slower than shooting while traveling right (This could be a game-balance thing?)\n\nDefault Min: -45 Degrees\r\nDefault Max: 135 Degrees\n\n```\n   \\ ,- ~ ||~ - ,\r\n, ' \\    x   x    ' ,\n```\n\n,      \\    x    x   x  ,\r\n,         \\  x     x      ,\r\n,            \\     x    x  ,\r\n,              \\      x    ,\r\n,                \\   x     ,\r\n,                 \\   x x ,\r\n,                  \\  x ,\r\n,                 , '\r\n' - , \\_ \\_ \\_ ,  '  \\\\\n\nIf the transition angle is within the shaded portion (x), there will be no transition(Quicker)\r\nThe angle corresponds to where you are looking(North on the circle) vs. the heading of your Ped.\r\nNote: For some reason,\n\nYou can set these values to whatever you'd like with this native, but keep in mind that the transitional spin is only clockwise for some reason.\n\nI'd personally recommend something like -135/135",
            "examples": [],
            "hash": "0xB300F03",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9C5E7C9C": {
            "name": "GET_PED_BONE_MATRIX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "boneId",
                    "type": "int"
                },
                {
                    "name": "forwardVector",
                    "type": "Vector3*"
                },
                {
                    "name": "rightVector",
                    "type": "Vector3*"
                },
                {
                    "name": "upVector",
                    "type": "Vector3*"
                },
                {
                    "name": "position",
                    "type": "Vector3*"
                }
            ],
            "return_type": "void",
            "description": "Returns the bone matrix of the specified bone id. usefull for entity attachment",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local fowardVector, rightVector, upVector, position = GetPedBoneMatrix(PlayerPedId(),boneId)"
                }
            ],
            "hash": "0x9C5E7C9C",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "*   **forwardVector**:\n*   **rightVector**:\n*   **upVector**:\n*   **position**:"
        },
        "0x70559AC7": {
            "name": "ADD_PED_DECORATION_FROM_HASHES",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "collection",
                    "type": "Hash"
                },
                {
                    "name": "overlay",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\r\ncollection - PedDecorationCollection filename hash\r\noverlay - Item name hash\r\nExample:\r\nEntry inside \"mpbeach_overlays.xml\" -\r\n<Item>\r\n<uvPos x=\"0.500000\" y=\"0.500000\" />\r\n<scale x=\"0.600000\" y=\"0.500000\" />\r\n<rotation value=\"0.000000\" />\r\n<nameHash>FM_Hair_Fuzz</nameHash>\r\n<txdHash>mp_hair_fuzz</txdHash>\r\n<txtHash>mp_hair_fuzz</txtHash>\r\n<zone>ZONE_HEAD</zone>\r\n<type>TYPE_TATTOO</type>\r\n<faction>FM</faction>\r\n<garment>All</garment>\r\n<gender>GENDER_DONTCARE</gender>\r\n<award />\r\n<awardLevel />\r\n</Item>\r\nCode:\r\nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n```\n\n**This is the server-side RPC native equivalent of the client native [ADD_PED_DECORATION_FROM_HASHES](?\\_0x5F5D1665E352A839).**",
            "examples": [],
            "hash": "0x70559AC7",
            "ns": "CFX",
            "aliases": [
                "_APPLY_PED_OVERLAY",
                "_SET_PED_DECORATION"
            ],
            "apiset": "server"
        },
        "0x2D23D743": {
            "name": "CLEAR_PED_PROP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propId",
                    "type": "int",
                    "description": "The prop id you want to clear from the ped. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)."
                }
            ],
            "return_type": "void",
            "description": "CLEAR_PED_PROP\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_PROP](?\\_0x0943E5B8E078E76E).**",
            "examples": [],
            "hash": "0x2D23D743",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA635F451": {
            "name": "CLEAR_PED_SECONDARY_TASK",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "CLEAR_PED_SECONDARY_TASK\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_SECONDARY_TASK](?\\_0x176CECF6F920D707).**",
            "examples": [],
            "hash": "0xA635F451",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x389EF71": {
            "name": "CREATE_PED",
            "params": [
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified."
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of ped to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the ped. If false, the ped exists only locally."
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL",
                    "description": "Whether to register the ped as pinned to the script host in the R\\* network model."
                }
            ],
            "return_type": "Entity",
            "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\r\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\r\n(e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED](?\\_0xD49F9B0955C367DE).**",
            "examples": [],
            "hash": "0x389EF71",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created."
        },
        "0x3000F092": {
            "name": "CREATE_PED_INSIDE_VEHICLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "See [`CREATE_PED`](#\\_0xD49F9B0955C367DE)"
                },
                {
                    "name": "modelHash",
                    "type": "Hash"
                },
                {
                    "name": "seat",
                    "type": "int"
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL"
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL"
                }
            ],
            "return_type": "Entity",
            "description": "CREATE_PED_INSIDE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED_INSIDE_VEHICLE](?\\_0x7DD959874C1FD534).**",
            "examples": [],
            "hash": "0x3000F092",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xB8584FEF": {
            "name": "GET_ALL_PEDS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all peds handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints information of every ped that has an owner.\r\n\r\nfor i, ped in ipairs(GetAllPeds()) do\r\n    local pedOwner = NetworkGetEntityOwner(ped)\r\n    if pedOwner > 0 then\r\n       local playerName = GetPlayerName(pedOwner)\r\n       local pedModel = GetEntityModel(ped)\r\n       local pedArmour = GetPedArmour(ped)\r\n       print(\"Ped : \"..ped..\" | Owner name : \"..playerName..\" | Model : \"..pedModel..\" | Armour : \"..pedArmour)\r\n    end\r\nend"
                }
            ],
            "hash": "0xB8584FEF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of peds handles."
        },
        "0xB0237302": {
            "name": "GET_CURRENT_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "Returns the hash of weapon the Ped is currently using.",
            "examples": [],
            "hash": "0xB0237302",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The weapon hash."
        },
        "0xF7C6792D": {
            "name": "GET_LAST_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "Entity",
            "description": "",
            "examples": [],
            "hash": "0xF7C6792D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The last ped in the specified seat of the passed vehicle. Returns 0 if the specified seat was never occupied or the last ped does not exist anymore."
        },
        "0x2CE311A7": {
            "name": "GET_PED_ARMOUR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2CE311A7",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x63458C27": {
            "name": "GET_PED_CAUSE_OF_DEATH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x63458C27",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xC182F76E": {
            "name": "GET_PED_DESIRED_HEADING",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xC182F76E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns ped's desired heading."
        },
        "0x388FDE9A": {
            "name": "GET_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x388FDE9A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The ped in the specified seat of the passed vehicle. Returns 0 if the specified seat is not occupied."
        },
        "0xA45B6C8D": {
            "name": "GET_PED_MAX_HEALTH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xA45B6C8D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x354F283C": {
            "name": "GET_PED_RELATIONSHIP_GROUP_HASH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Hash",
            "description": "Gets the current relationship group hash of a ped.",
            "examples": [],
            "hash": "0x354F283C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The relationship group hash."
        },
        "0x84FE084": {
            "name": "GET_PED_SCRIPT_TASK_COMMAND",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "Gets the script task command currently assigned to the ped.",
            "examples": [],
            "hash": "0x84FE084",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The script task command currently assigned to the ped. A value of 0x811E343C denotes no script task is assigned."
        },
        "0x44B0E5E2": {
            "name": "GET_PED_SCRIPT_TASK_STAGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "int",
            "description": "Gets the stage of the peds scripted task.",
            "examples": [],
            "hash": "0x44B0E5E2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The stage of the ped's scripted task. A value of 3 denotes no script task is assigned."
        },
        "0x535DB43F": {
            "name": "GET_PED_SOURCE_OF_DAMAGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Entity",
            "description": "Get the last entity that damaged the ped. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x535DB43F",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The entity id. Returns 0 if the ped has not been damaged recently."
        },
        "0x84ADF9EB": {
            "name": "GET_PED_SOURCE_OF_DEATH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Entity",
            "description": "Get the entity that killed the ped. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x84ADF9EB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The entity id. Returns 0 if the ped has no killer."
        },
        "0x7F4563D3": {
            "name": "GET_PED_SPECIFIC_TASK_TYPE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "A zero-based index with a maximum value of 7."
                }
            ],
            "return_type": "int",
            "description": "Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.\r\nA ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.",
            "examples": [],
            "hash": "0x7F4563D3",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The type of the specific task.\r\n1604: A value of 530 denotes no script task is assigned or an invalid input was given.\r\n2060+: A value of 531 denotes no script task is assigned or an invalid input was given."
        },
        "0x40321B83": {
            "name": "GET_PED_STEALTH_MOVEMENT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x40321B83",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is stealthy."
        },
        "0xD240123E": {
            "name": "GET_SELECTED_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "An alias of [GET_CURRENT_PED_WEAPON](#\\_0xB0237302).\n\nNote, the client-side [GET_SELECTED_PED_WEAPON](#\\_0x0A6DB4965674D243) native returns the weapon selected via the HUD (weapon wheel). This data is not available to FXServer.",
            "examples": [],
            "hash": "0xD240123E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The weapon hash."
        },
        "0x25865633": {
            "name": "IS_PED_HANDCUFFED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x25865633",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is handcuffed."
        },
        "0xC833BBE1": {
            "name": "IS_PED_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC833BBE1",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is ragdolling."
        },
        "0xEFEED13C": {
            "name": "IS_PED_STRAFING",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEFEED13C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is strafing."
        },
        "0x5AE7EDA2": {
            "name": "IS_PED_USING_ACTION_MODE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5AE7EDA2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is using action mode."
        },
        "0xB8278882": {
            "name": "SET_CURRENT_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "bForceInHand",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "SET_CURRENT_PED_WEAPON\n\n**This is the server-side RPC native equivalent of the client native [SET_CURRENT_PED_WEAPON](?\\_0xADF692B254977C0C).**",
            "examples": [],
            "hash": "0xB8278882",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xBF90DF1A": {
            "name": "SET_PED_AMMO",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "ammo",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nNativeDB Added Parameter 4: BOOL p3\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_AMMO](?\\_0x14E56BC5B5DB6A19).**",
            "examples": [],
            "hash": "0xBF90DF1A",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x4E3A0CC4": {
            "name": "SET_PED_ARMOUR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "amount",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nSets the armor of the specified ped.\r\nped: The Ped to set the armor of.\r\namount: A value between 0 and 100 indicating the value to set the Ped's armor to.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_ARMOUR](?\\_0xCEA04D83135264CC).**",
            "examples": [],
            "hash": "0x4E3A0CC4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCF1384C4": {
            "name": "SET_PED_CAN_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "toggle",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "SET_PED_CAN_RAGDOLL\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CAN_RAGDOLL](?\\_0xB128377056A54E2A).**",
            "examples": [],
            "hash": "0xCF1384C4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD4F7B05C": {
            "name": "SET_PED_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)."
                },
                {
                    "name": "paletteId",
                    "type": "int",
                    "description": "0 to 3."
                }
            ],
            "return_type": "void",
            "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\r\n**1**: Mask\r\n**2**: Hair\r\n**3**: Torso\r\n**4**: Leg\r\n**5**: Parachute / bag\r\n**6**: Shoes\r\n**7**: Accessory\r\n**8**: Undershirt\r\n**9**: Kevlar\r\n**10**: Badge\r\n**11**: Torso 2\r\nList of Component IDs\n\n```cpp\n// Components\r\nenum ePedVarComp\r\n{\r\nPV_COMP_INVALID = 0xFFFFFFFF,\r\nPV_COMP_HEAD = 0, // \"HEAD\"\r\nPV_COMP_BERD = 1, // \"BEARD\"\r\nPV_COMP_HAIR = 2, // \"HAIR\"\r\nPV_COMP_UPPR = 3, // \"UPPER\"\r\nPV_COMP_LOWR = 4, // \"LOWER\"\r\nPV_COMP_HAND = 5, // \"HAND\"\r\nPV_COMP_FEET = 6, // \"FEET\"\r\nPV_COMP_TEEF = 7, // \"TEETH\"\r\nPV_COMP_ACCS = 8, // \"ACCESSORIES\"\r\nPV_COMP_TASK = 9, // \"TASK\"\r\nPV_COMP_DECL = 10, // \"DECL\"\r\nPV_COMP_JBIB = 11, // \"JBIB\"\r\nPV_COMP_MAX = 12,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_COMPONENT_VARIATION](?\\_0x262B14F48D29DE80).**",
            "examples": [],
            "hash": "0xD4F7B05C",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9CFBE10D": {
            "name": "SET_PED_CONFIG_FLAG",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "flagId",
                    "type": "int"
                },
                {
                    "name": "value",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "```cpp\n// Potential names and hash collisions included as comments\r\nenum ePedConfigFlags {\r\nCPED_CONFIG_FLAG_CreatedByFactory = 0,\r\nCPED_CONFIG_FLAG_CanBeShotInVehicle = 1,\r\nCPED_CONFIG_FLAG_NoCriticalHits = 2,\r\nCPED_CONFIG_FLAG_DrownsInWater = 3,\r\nCPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4,\r\nCPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5,\r\nCPED_CONFIG_FLAG_HasBulletProofVest = 6,\r\nCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\r\nCPED_CONFIG_FLAG_NeverFallOffSkis = 8,\r\nCPED_CONFIG_FLAG_NeverEverTargetThisPed = 9,\r\nCPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10,\r\nCPED_CONFIG_FLAG_TargettableWithNoLos = 11,\r\nCPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12,\r\nCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\r\nCPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14,\r\nCPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15,\r\nCPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16,\r\nCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\r\nCPED_CONFIG_FLAG_HasAScriptBrain = 18,\r\nCPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19,\r\nCPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20,\r\nCPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21,\r\nCPED_CONFIG_FLAG_NotAllowedToCrouch = 22,\r\nCPED_CONFIG_FLAG_DeathPickupsPersist = 23,\r\nCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\r\nCPED_CONFIG_FLAG_ForceDieIfInjured = 25,\r\nCPED_CONFIG_FLAG_DontDragMeOutCar = 26,\r\nCPED_CONFIG_FLAG_StayInCarOnJack = 27,\r\nCPED_CONFIG_FLAG_ForceDieInCar = 28,\r\nCPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,\r\nCPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30,\r\nCPED_CONFIG_FLAG_DontStoreAsPersistent = 31,\r\nCPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32,\r\nCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\r\nCPED_CONFIG_FLAG_HasHelmet = 34,\r\nCPED_CONFIG_FLAG_UseHelmet = 35,\r\nCPED_CONFIG_FLAG_DontTakeOffHelmet = 36,\r\nCPED_CONFIG_FLAG_HideInCutscene = 37,\r\nCPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38,\r\nCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\r\nCPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40,\r\nCPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41,\r\nCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\r\nCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\r\nCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\r\nCPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,\r\n_0xDB115BFA = 46,\r\nCPED_CONFIG_FLAG_PedBeingDeleted = 47,\r\nCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\r\nCPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49,\r\nCPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50,\r\nCPED_CONFIG_FLAG_BlippedByScript = 51,\r\nCPED_CONFIG_FLAG_DrawRadarVisualField = 52,\r\nCPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53,\r\nCPED_CONFIG_FLAG_DissableAutoFallOffTests = 54,\r\nCPED_CONFIG_FLAG_SteerAroundDeadBodies = 55,\r\nCPED_CONFIG_FLAG_ConstrainToNavMesh = 56,\r\nCPED_CONFIG_FLAG_SyncingAnimatedProps = 57,\r\nCPED_CONFIG_FLAG_IsFiring = 58,\r\nCPED_CONFIG_FLAG_WasFiring = 59,\r\nCPED_CONFIG_FLAG_IsStanding = 60,\r\nCPED_CONFIG_FLAG_WasStanding = 61,\r\nCPED_CONFIG_FLAG_InVehicle = 62,\r\nCPED_CONFIG_FLAG_OnMount = 63,\r\nCPED_CONFIG_FLAG_AttachedToVehicle = 64,\r\nCPED_CONFIG_FLAG_IsSwimming = 65,\r\nCPED_CONFIG_FLAG_WasSwimming = 66,\r\nCPED_CONFIG_FLAG_IsSkiing = 67,\r\nCPED_CONFIG_FLAG_IsSitting = 68,\r\nCPED_CONFIG_FLAG_KilledByStealth = 69,\r\nCPED_CONFIG_FLAG_KilledByTakedown = 70,\r\nCPED_CONFIG_FLAG_Knockedout = 71,\r\nCPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72,\r\nCPED_CONFIG_FLAG_JustGotOffTrain = 73,\r\nCPED_CONFIG_FLAG_JustGotOnTrain = 74,\r\nCPED_CONFIG_FLAG_UsingCoverPoint = 75,\r\nCPED_CONFIG_FLAG_IsInTheAir = 76,\r\nCPED_CONFIG_FLAG_KnockedUpIntoAir = 77,\r\nCPED_CONFIG_FLAG_IsAimingGun = 78,\r\nCPED_CONFIG_FLAG_HasJustLeftCar = 79,\r\nCPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80,\r\nCPED_CONFIG_FLAG_CurrLeftFootCollNM = 81,\r\nCPED_CONFIG_FLAG_PrevLeftFootCollNM = 82,\r\nCPED_CONFIG_FLAG_CurrRightFootCollNM = 83,\r\nCPED_CONFIG_FLAG_PrevRightFootCollNM = 84,\r\nCPED_CONFIG_FLAG_HasBeenBumpedInCar = 85,\r\nCPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86,\r\nCPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87,\r\nCPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89,\r\nCPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90,\r\nCPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91,\r\nCPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92,\r\nCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\r\nCPED_CONFIG_FLAG_BlockCoweringInCover = 94,\r\nCPED_CONFIG_FLAG_BlockPeekingInCover = 95,\r\nCPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96,\r\nCPED_CONFIG_FLAG_VaultFromCover = 97,\r\nCPED_CONFIG_FLAG_AutoConversationLookAts = 98,\r\nCPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99,\r\nCPED_CONFIG_FLAG_HasDeadPedBeenReported = 100,\r\nCPED_CONFIG_FLAG_ForcedAim = 101,\r\nCPED_CONFIG_FLAG_SteersAroundPeds = 102,\r\nCPED_CONFIG_FLAG_SteersAroundObjects = 103,\r\nCPED_CONFIG_FLAG_OpenDoorArmIK = 104,\r\nCPED_CONFIG_FLAG_ForceReload = 105,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,\r\nCPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111,\r\nCPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112,\r\nCPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,\r\nCPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114,\r\nCPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115,\r\nCPED_CONFIG_FLAG_GetOutBurningVehicle = 116,\r\nCPED_CONFIG_FLAG_BumpedByPlayer = 117,\r\nCPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,\r\nCPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,\r\nCPED_CONFIG_FLAG_IsHandCuffed = 120,\r\nCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\r\nCPED_CONFIG_FLAG_DisableMelee = 122,\r\nCPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,\r\nCPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,\r\nCPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125,\r\nCPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,\r\nCPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,\r\nCPED_CONFIG_FLAG_CanBeAgitated = 128,\r\nCPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,\r\nCPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,\r\nCPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,\r\nCPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,\r\nCPED_CONFIG_FLAG_ForcePedToBeDragged = 133,\r\nCPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,\r\nCPED_CONFIG_FLAG_IsScuba = 135,\r\nCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\r\nCPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,\r\nCPED_CONFIG_FLAG_RidingTrain = 138,\r\nCPED_CONFIG_FLAG_ArrestResult = 139,\r\nCPED_CONFIG_FLAG_CanAttackFriendly = 140,\r\nCPED_CONFIG_FLAG_WillJackAnyPlayer = 141,\r\nCPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142,\r\nCPED_CONFIG_FLAG_DodgedPlayerVehicle = 143,\r\nCPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,\r\nCPED_CONFIG_FLAG_NoCopWantedAggro = 145,\r\nCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\r\nCPED_CONFIG_FLAG_StairsDetected = 147,\r\nCPED_CONFIG_FLAG_SlopeDetected = 148,\r\nCPED_CONFIG_FLAG_HelmetHasBeenShot = 149,\r\nCPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,\r\nCPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,\r\nCPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,\r\nCPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,\r\nCPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,\r\nCPED_CONFIG_FLAG_CanPerformArrest = 155,\r\nCPED_CONFIG_FLAG_CanPerformUncuff = 156,\r\nCPED_CONFIG_FLAG_CanBeArrested = 157,\r\nCPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158,\r\nCPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165,\r\nCPED_CONFIG_FLAG_IsInjured = 166,\r\nCPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,\r\nCPED_CONFIG_FLAG_SwimmingTasksRunning = 168,\r\nCPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,\r\nCPED_CONFIG_FLAG_ForceDirectEntry = 170,\r\nCPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,\r\nCPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,\r\nCPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,\r\nCPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,\r\nCPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175,\r\nCPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176,\r\nCPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,\r\nCPED_CONFIG_FLAG_AdditionalRappellingPed = 178,\r\nCPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,\r\nCPED_CONFIG_FLAG_IsInCustody = 180,\r\nCPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,\r\nCPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,\r\nCPED_CONFIG_FLAG_IsAgitated = 183,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\r\nCPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,\r\nCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\r\nCPED_CONFIG_FLAG_HasHurtStarted = 187,\r\nCPED_CONFIG_FLAG_DisableHurt = 188,\r\nCPED_CONFIG_FLAG_PlayerIsWeird = 189,\r\nCPED_CONFIG_FLAG_PedHadPhoneConversation = 190,\r\nCPED_CONFIG_FLAG_BeganCrossingRoad = 191,\r\nCPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192,\r\nCPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,\r\nCPED_CONFIG_FLAG_UsingScenario = 194,\r\nCPED_CONFIG_FLAG_VisibleOnScreen = 195,\r\nCPED_CONFIG_FLAG_DontCollideWithKinematic = 196,\r\nCPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197,\r\nCPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198,\r\nCPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,\r\nCPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,\r\nCPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,\r\nCPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,\r\nCPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,\r\nCPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,\r\nCPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207,\r\nCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\r\nCPED_CONFIG_FLAG_DodgedPlayer = 209,\r\nCPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,\r\nCPED_CONFIG_FLAG_ForcedToStayInCover = 211,\r\nCPED_CONFIG_FLAG_GeneratesSoundEvents = 212,\r\nCPED_CONFIG_FLAG_ListensToSoundEvents = 213,\r\nCPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,\r\nCPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,\r\nCPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,\r\nCPED_CONFIG_FLAG_ForceExitToSkyDive = 217,\r\nCPED_CONFIG_FLAG_SteersAroundVehicles = 218,\r\nCPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219,\r\nCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\r\nCPED_CONFIG_FLAG_DisableExitToSkyDive = 221,\r\nCPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222,\r\nCPED_CONFIG_FLAG_UseAmbientModelScaling = 223,\r\nCPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224,\r\nCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\r\nCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\r\nCPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,\r\nCPED_CONFIG_FLAG_CanLosePropsOnDamage = 228,\r\nCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\r\nCPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234,\r\nCPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235,\r\nCPED_CONFIG_FLAG_IsHoldingProp = 236,\r\nCPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,\r\nCPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238,\r\nCPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239,\r\nCPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,\r\nCPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,\r\nCPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,\r\nCPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,\r\nCPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,\r\nCPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,\r\nCPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,\r\nCPED_CONFIG_FLAG_InStrafeTransition = 247,\r\nCPED_CONFIG_FLAG_CanPlayInCarIdles = 248,\r\nCPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,\r\nCPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,\r\nCPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,\r\nCPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,\r\nCPED_CONFIG_FLAG_OnStairs = 253,\r\nCPED_CONFIG_FLAG_SimulatingAiming = 254,\r\nCPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,\r\nCPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256,\r\nCPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,\r\nCPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258,\r\nCPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259,\r\nCPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260,\r\nCPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,\r\nCPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262,\r\nCPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263,\r\nCPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264,\r\nCPED_CONFIG_FLAG_PedsFullyInSeat = 265,\r\nCPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266,\r\nCPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267,\r\nCPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,\r\nCPED_CONFIG_FLAG_OnStairSlope = 270,\r\nCPED_CONFIG_FLAG_HasPlayedNMGetup = 271,\r\nCPED_CONFIG_FLAG_DontBlipCop = 272,\r\nCPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273,\r\nCPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274,\r\nCPED_CONFIG_FLAG_KillWhenTrapped = 275,\r\nCPED_CONFIG_FLAG_EdgeDetected = 276,\r\nCPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277,\r\nCPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278,\r\nCPED_CONFIG_FLAG_AvoidTearGas = 279,\r\nCPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280,\r\nCPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,\r\nCPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,\r\nCPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283,\r\nCPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284,\r\nCPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,\r\nCPED_CONFIG_FLAG_ShouldChargeNow = 286,\r\nCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\r\nCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\r\nCPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289,\r\nCPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290,\r\nCPED_CONFIG_FLAG_PedHasBeenSeen = 291,\r\nCPED_CONFIG_FLAG_PedIsInReusePool = 292,\r\nCPED_CONFIG_FLAG_PedWasReused = 293,\r\nCPED_CONFIG_FLAG_DisableShockingEvents = 294,\r\nCPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295,\r\nCPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,\r\nCPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297,\r\nCPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298,\r\nCPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,\r\nCPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300,\r\nCPED_CONFIG_FLAG_DisablePedConstraints = 301,\r\nCPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,\r\nCPED_CONFIG_FLAG_CreatedByDispatch = 303,\r\nCPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304,\r\nCPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308,\r\nCPED_CONFIG_FLAG_DisableQuadrupedSpring = 309,\r\nCPED_CONFIG_FLAG_IsInCluster = 310,\r\nCPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,\r\nCPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,\r\nCPED_CONFIG_FLAG_PreferInjuredGetup = 313,\r\nCPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,\r\nCPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,\r\nCPED_CONFIG_FLAG_JackedAbandonedCar = 316,\r\nCPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,\r\nCPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,\r\nCPED_CONFIG_FLAG_HasPortablePickupAttached = 319,\r\nCPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,\r\nCPED_CONFIG_FLAG_HasClothCollisionBounds = 321,\r\nCPED_CONFIG_FLAG_HasHighHeels = 322,\r\nCPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323,\r\nCPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,\r\nCPED_CONFIG_FLAG_SpawnedAtScenario = 325,\r\nCPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,\r\nCPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,\r\nCPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,\r\nCPED_CONFIG_FLAG_DisableTalkTo = 329,\r\nCPED_CONFIG_FLAG_DontBlip = 330,\r\nCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\r\nCPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,\r\nCPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333,\r\nCPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334,\r\nCPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335,\r\nCPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336,\r\nCPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337,\r\nCPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338,\r\nCPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,\r\nCPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340,\r\nCPED_CONFIG_FLAG_ForceProneCharacterCloth = 341,\r\nCPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,\r\nCPED_CONFIG_FLAG_InToStrafeTransition = 343,\r\nCPED_CONFIG_FLAG_KilledByStandardMelee = 344,\r\nCPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,\r\nCPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346,\r\nCPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,\r\nCPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,\r\nCPED_CONFIG_FLAG_EquipJetpack = 349,\r\nCPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,\r\nCPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351,\r\nCPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352,\r\nCPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353,\r\nCPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354,\r\nCPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355,\r\nCPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,\r\nCPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,\r\nCPED_CONFIG_FLAG_DontBlipNotSynced = 358,\r\nCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,\r\nCPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,\r\nCPED_CONFIG_FLAG_HasReserveParachute = 362,\r\nCPED_CONFIG_FLAG_UseReserveParachute = 363,\r\nCPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,\r\nCPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,\r\nCPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367,\r\nCPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368,\r\nCPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369,\r\nCPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370,\r\nCPED_CONFIG_FLAG_InFPSUnholsterTransition = 371,\r\nCPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,\r\nCPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,\r\nCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\r\nCPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,\r\nCPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376,\r\nCPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377,\r\nCPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378,\r\nCPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379,\r\nCPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,\r\nCPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381,\r\nCPED_CONFIG_FLAG_WasPlayingFPSGetup = 382,\r\nCPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383,\r\nCPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384,\r\nCPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385,\r\nCPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386,\r\nCPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387,\r\nCPED_CONFIG_FLAG_IsClimbingLadder = 388,\r\nCPED_CONFIG_FLAG_HasBareFeet = 389,\r\nCPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,\r\nCPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,\r\nCPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,\r\nCPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393,\r\nCPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,\r\nCPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,\r\nCPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,\r\nCPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,\r\nCPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,\r\nCPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,\r\nCPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,\r\nCPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,\r\nCPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,\r\nCPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403,\r\nCPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,\r\nCPED_CONFIG_FLAG_UsingLowriderLeans = 405,\r\nCPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406,\r\nCPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,\r\nCPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,\r\nCPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,\r\nCPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,\r\nCPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,\r\nCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\r\nCPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,\r\nCPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,\r\nCPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,\r\nCPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,\r\nCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\r\nCPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,\r\nCPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420,\r\nCPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,\r\nCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\r\nCPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423,\r\nCPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424,\r\nCPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425,\r\nCPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,\r\nCPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,\r\nCPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,\r\nCPED_CONFIG_FLAG_DisableStartEngine = 429,\r\nCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\r\nCPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,\r\nCPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,\r\nCPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\r\nCPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,\r\nCPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,\r\nCPED_CONFIG_FLAG_DontShoutTargetPosition = 437,\r\nCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\r\nCPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439,\r\nCPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440,\r\nCPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,\r\nCPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,\r\nCPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,\r\nCPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,\r\nCPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,\r\nCPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,\r\nCPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,\r\nCPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,\r\nCPED_CONFIG_FLAG_FiresDummyRockets = 449,\r\nCPED_CONFIG_FLAG_PedIsArresting = 450,\r\nCPED_CONFIG_FLAG_IsDecoyPed = 451,\r\nCPED_CONFIG_FLAG_HasEstablishedDecoy = 452,\r\nCPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,\r\nCPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,\r\nCPED_CONFIG_FLAG_HitByTranqWeapon = 455,\r\nCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\r\nCPED_CONFIG_FLAG_ForcedAimFromArrest = 457,\r\nCPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,\r\n_0x4376ABF2 = 459,\r\nCPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460,\r\nCPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461,\r\n_0x262A3B8E = 462,\r\n_0x1AA79A25 = 463,\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CONFIG_FLAG](?\\_0x1913FE4CBF41C463).**",
            "examples": [],
            "hash": "0x9CFBE10D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC866A984": {
            "name": "SET_PED_DEFAULT_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "```\nSets Ped Default Clothes\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_DEFAULT_COMPONENT_VARIATION](?\\_0x45EEE61580806D63).**",
            "examples": [],
            "hash": "0xC866A984",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA23FE32C": {
            "name": "SET_PED_HAIR_TINT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped whose hair tint is to be set."
                },
                {
                    "name": "colorID",
                    "type": "int",
                    "description": "The tint index for the primary hair color."
                },
                {
                    "name": "highlightColorID",
                    "type": "int",
                    "description": "The tint index for the hair highlight color."
                }
            ],
            "return_type": "void",
            "description": "Sets the tint index for the hair on the specified ped.\n\n```\nNativeDB Introduced: v323\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HAIR_TINT](?\\_0x4CFFC65454C93A49).**",
            "examples": [],
            "hash": "0xA23FE32C",
            "ns": "CFX",
            "aliases": [
                "_SET_PED_HAIR_COLOR"
            ],
            "apiset": "server"
        },
        "0x60746B88": {
            "name": "SET_PED_HEAD_BLEND_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "shapeFirstID",
                    "type": "int",
                    "description": "Controls the shape of the first ped's face"
                },
                {
                    "name": "shapeSecondID",
                    "type": "int",
                    "description": "Controls the shape of the second ped's face"
                },
                {
                    "name": "shapeThirdID",
                    "type": "int",
                    "description": "Controls the shape of the third ped's face"
                },
                {
                    "name": "skinFirstID",
                    "type": "int",
                    "description": "Controls the first id's skin tone"
                },
                {
                    "name": "skinSecondID",
                    "type": "int",
                    "description": "Controls the second id's skin tone"
                },
                {
                    "name": "skinThirdID",
                    "type": "int",
                    "description": "Controls the third id's skin tone"
                },
                {
                    "name": "shapeMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (shapeFirstID and shapeSecondID)"
                },
                {
                    "name": "skinMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (skinFirstID and skinSecondID)"
                },
                {
                    "name": "thirdMix",
                    "type": "float",
                    "description": "Overrides the others in favor of the third IDs."
                },
                {
                    "name": "isParent",
                    "type": "BOOL",
                    "description": "IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise."
                }
            ],
            "return_type": "void",
            "description": "For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.\r\n**Other information:**\r\nIDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>\r\nThis native function is often called prior to calling natives such as:\n\n*   [`SetPedHairColor`](#\\_0xA23FE32C)\n*   [`SetPedHeadOverlayColor`](#\\_0x78935A27)\n*   [`SetPedHeadOverlay`](#\\_0xD28DBA90)\n*   [`SetPedFaceFeature`](#\\_0x6C8D4458)\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_BLEND_DATA](?\\_0x9414E18B9434C2FE).**",
            "examples": [],
            "hash": "0x60746B88",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD28DBA90": {
            "name": "SET_PED_HEAD_OVERLAY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "The overlay id displayed up above."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer representing the index (from 0 to `_GET_NUM_OVERLAY_VALUES(overlayID)-1`)"
                },
                {
                    "name": "opacity",
                    "type": "float",
                    "description": "A float ranging from 0.0 to 1.0"
                }
            ],
            "return_type": "void",
            "description": "```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.\r\noverlayID       Part                  Index, to disable\r\n0               Blemishes             0 - 23, 255\r\n1               Facial Hair           0 - 28, 255\r\n2               Eyebrows              0 - 33, 255\r\n3               Ageing                0 - 14, 255\r\n4               Makeup                0 - 74, 255\r\n5               Blush                 0 - 6, 255\r\n6               Complexion            0 - 11, 255\r\n7               Sun Damage            0 - 10, 255\r\n8               Lipstick              0 - 9, 255\r\n9               Moles/Freckles        0 - 17, 255\r\n10              Chest Hair            0 - 16, 255\r\n11              Body Blemishes        0 - 11, 255\r\n12              Add Body Blemishes    0 - 1, 255\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_OVERLAY](?\\_0x48F44967FA05CC1E).**",
            "examples": [],
            "hash": "0xD28DBA90",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7500C79": {
            "name": "SET_PED_INTO_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669). -2 for the first available seat."
                }
            ],
            "return_type": "void",
            "description": "SET_PED_INTO_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_INTO_VEHICLE](?\\_0xF75B0D629E1C063D).**",
            "examples": [],
            "hash": "0x7500C79",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x829F2E2": {
            "name": "SET_PED_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
                },
                {
                    "name": "attach",
                    "type": "BOOL",
                    "description": "Attached or not."
                }
            ],
            "return_type": "void",
            "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hats\r\n**1**: Glasses\r\n**2**: Ears\r\n**6**: Watches\r\n**7**: Bracelets\r\nList of Prop IDs\n\n```cpp\nenum eAnchorPoints\r\n{\r\nANCHOR_HEAD = 0, // \"p_head\"\r\nANCHOR_EYES = 1, // \"p_eyes\"\r\nANCHOR_EARS = 2, // \"p_ears\"\r\nANCHOR_MOUTH = 3, // \"p_mouth\"\r\nANCHOR_LEFT_HAND = 4, // \"p_lhand\"\r\nANCHOR_RIGHT_HAND = 5, // \"p_rhand\"\r\nANCHOR_LEFT_WRIST = 6, // \"p_lwrist\"\r\nANCHOR_RIGHT_WRIST = 7, // \"p_rwrist\"\r\nANCHOR_HIP = 8, // \"p_lhip\"\r\nANCHOR_LEFT_FOOT = 9, // \"p_lfoot\"\r\nANCHOR_RIGHT_FOOT = 10, // \"p_rfoot\"\r\nANCHOR_PH_L_HAND = 11, // \"ph_lhand\"\r\nANCHOR_PH_R_HAND = 12, // \"ph_rhand\"\r\nNUM_ANCHORS = 13,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_PROP_INDEX](?\\_0x93376B65A266EB5F).**",
            "examples": [],
            "hash": "0x829F2E2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x4111BA46": {
            "name": "SET_PED_RANDOM_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "p1",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\np1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_COMPONENT_VARIATION](?\\_0xC8A9481A01E63C28).**",
            "examples": [],
            "hash": "0x4111BA46",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xE3318E0E": {
            "name": "SET_PED_RANDOM_PROPS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                }
            ],
            "return_type": "void",
            "description": "SET_PED_RANDOM_PROPS\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_PROPS](?\\_0xC44AA05345C992C6).**",
            "examples": [],
            "hash": "0xE3318E0E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCFF6FF66": {
            "name": "SET_PED_RESET_FLAG",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "flagId",
                    "type": "int"
                },
                {
                    "name": "doReset",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\r\nKnown values:\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RESET_FLAG](?\\_0xC1E8A365BF3B29F2).**",
            "examples": [],
            "hash": "0xCFF6FF66",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x83CB5052": {
            "name": "SET_PED_TO_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to ragdoll."
                },
                {
                    "name": "minTime",
                    "type": "int",
                    "description": "Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1."
                },
                {
                    "name": "maxTime",
                    "type": "int"
                },
                {
                    "name": "ragdollType",
                    "type": "int"
                },
                {
                    "name": "bAbortIfInjured",
                    "type": "BOOL",
                    "description": "unused"
                },
                {
                    "name": "bAbortIfDead",
                    "type": "BOOL",
                    "description": "unused"
                },
                {
                    "name": "bForceScriptControl",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\r\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\r\n**Else**: CTaskNMBalance\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL](?\\_0xAE99FB955581844A).**",
            "examples": [],
            "hash": "0x83CB5052",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xFA12E286": {
            "name": "SET_PED_TO_RAGDOLL_WITH_FALL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to ragdoll."
                },
                {
                    "name": "minTime",
                    "type": "int"
                },
                {
                    "name": "maxTime",
                    "type": "int"
                },
                {
                    "name": "nFallType",
                    "type": "int",
                    "description": "The type of fall."
                },
                {
                    "name": "dirX",
                    "type": "float",
                    "description": "The x direction of the fall."
                },
                {
                    "name": "dirY",
                    "type": "float",
                    "description": "The y direction of the fall."
                },
                {
                    "name": "dirZ",
                    "type": "float",
                    "description": "The z direction of the fall."
                },
                {
                    "name": "fGroundHeight",
                    "type": "float",
                    "description": "The ground height (z)."
                },
                {
                    "name": "grab1X",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab1Y",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab1Z",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2X",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2Y",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2Z",
                    "type": "float",
                    "description": "unused"
                }
            ],
            "return_type": "void",
            "description": "```cpp\nenum eNMFallType {\r\nTYPE_FROM_HIGH = 0,\r\nTYPE_OVER_WALL = 1,\r\nTYPE_DOWN_STAIRS = 2,\r\nTYPE_DIE_TYPES = 3,\r\nTYPE_DIE_FROM_HIGH = 4,\r\nTYPE_DIE_OVER_WALL = 5,\r\nTYPE_DIE_DOWN_STAIRS = 6\r\n}\n```\n\n```\nReturn variable is never used in R*'s scripts.\r\nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.\r\nx, y, and z are coordinates, most likely to where the ped will fall.\r\np7 is probably the force of the fall, but untested, so I left the variable name the same.\r\np8 to p13 are always 0f in R*'s scripts.\r\n(Simplified) Example of the usage of the function from R*'s scripts:\r\nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL_WITH_FALL](?\\_0xD76632D99E4966C8).**",
            "examples": [],
            "hash": "0xFA12E286",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xEC09DB1B": {
            "name": "_SET_PED_EYE_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Used for freemode (online) characters.\r\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_EYE_COLOR](?\\_0x50B56988B170AFDF).**",
            "examples": [],
            "hash": "0xEC09DB1B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x6C8D4458": {
            "name": "_SET_PED_FACE_FEATURE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer ranging from 0 to 19"
                },
                {
                    "name": "scale",
                    "type": "float",
                    "description": "A float ranging from -1.0 to 1.0"
                }
            ],
            "return_type": "void",
            "description": "Sets the various freemode face features, e.g. nose length, chin shape.\r\n**Indexes (From 0 to 19):**\r\nParentheses indicate morph scale/direction as in (-1.0 to 1.0)\n\n*   **0**: Nose Width (Thin/Wide)\n*   **1**: Nose Peak (Up/Down)\n*   **2**: Nose Length (Long/Short)\n*   **3**: Nose Bone Curveness (Crooked/Curved)\n*   **4**: Nose Tip (Up/Down)\n*   **5**: Nose Bone Twist (Left/Right)\n*   **6**: Eyebrow (Up/Down)\n*   **7**: Eyebrow (In/Out)\n*   **8**: Cheek Bones (Up/Down)\n*   **9**: Cheek Sideways Bone Size (In/Out)\n*   **10**: Cheek Bones Width (Puffed/Gaunt)\n*   **11**: Eye Opening (Both) (Wide/Squinted)\n*   **12**: Lip Thickness (Both) (Fat/Thin)\n*   **13**: Jaw Bone Width (Narrow/Wide)\n*   **14**: Jaw Bone Shape (Round/Square)\n*   **15**: Chin Bone (Up/Down)\n*   **16**: Chin Bone Length (In/Out or Backward/Forward)\n*   **17**: Chin Bone Shape (Pointed/Square)\n*   **18**: Chin Hole (Chin Bum)\n*   **19**: Neck Thickness (Thin/Thick)\r\n    **Note:**\r\n    You may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_FACE_FEATURE](?\\_0x71A5C1DBA060049E).**",
            "examples": [],
            "hash": "0x6C8D4458",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x78935A27": {
            "name": "_SET_PED_HEAD_OVERLAY_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "An integer representing the overlay id"
                },
                {
                    "name": "colorType",
                    "type": "int",
                    "description": "1 for eyebrows, beards, makeup, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases."
                },
                {
                    "name": "colorID",
                    "type": "int",
                    "description": "An integer representing the primary color id"
                },
                {
                    "name": "secondColorID",
                    "type": "int",
                    "description": "An integer representing the secondary color id"
                }
            ],
            "return_type": "void",
            "description": "```\nUsed for freemode (online) characters.\r\nCalled after SET_PED_HEAD_OVERLAY().\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HEAD_OVERLAY_COLOR](?\\_0x497BF74A7B9CB952).**",
            "examples": [],
            "hash": "0x78935A27",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "PHYSICS": {
        "0x760A2D67": {
            "name": "GET_ALL_ROPES",
            "params": [],
            "return_type": "Object",
            "description": "Returns all rope handles. The data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```",
            "examples": [],
            "hash": "0x760A2D67",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of all rope handles."
        },
        "0xA80FFE99": {
            "name": "GET_ROPE_FLAGS",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the flags for."
                }
            ],
            "return_type": "int",
            "description": "```cpp\nenum eRopeFlags\r\n{\r\n    DrawShadowEnabled = 2,\r\n\tBreakable = 4,\r\n\tRopeUnwindingFront = 8,\r\n\tRopeWinding = 32\r\n}\n```",
            "examples": [],
            "hash": "0xA80FFE99",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's flags."
        },
        "0x66D70EA3": {
            "name": "GET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the length change rate for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x66D70EA3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's length change rate."
        },
        "0xF341E6CA": {
            "name": "GET_ROPE_TIME_MULTIPLIER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the time multiplier for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF341E6CA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's time multiplier."
        },
        "0x2AB2E0F6": {
            "name": "GET_ROPE_UPDATE_ORDER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the update order for."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2AB2E0F6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's update order."
        },
        "0xF213AE8D": {
            "name": "REGISTER_ROPE_DATA",
            "params": [
                {
                    "name": "numSections",
                    "type": "int"
                },
                {
                    "name": "radius",
                    "type": "float"
                },
                {
                    "name": "diffuseTextureName",
                    "type": "const char*"
                },
                {
                    "name": "normalMapName",
                    "type": "const char*"
                },
                {
                    "name": "distanceMappingScale",
                    "type": "float"
                },
                {
                    "name": "uvScaleX",
                    "type": "float"
                },
                {
                    "name": "uvScaleY",
                    "type": "float"
                },
                {
                    "name": "specularFresnel",
                    "type": "float"
                },
                {
                    "name": "specularFalloff",
                    "type": "float"
                },
                {
                    "name": "specularIntensity",
                    "type": "float"
                },
                {
                    "name": "bumpiness",
                    "type": "float"
                },
                {
                    "name": "color",
                    "type": "int"
                }
            ],
            "return_type": "int",
            "description": "Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference.\r\nReturns a rope type which can be passed into [ADD_ROPE](#\\_0xE832D760399EB220) to use a custom rope design.\r\nOnce a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create a thick steel cable rope above the players head\r\nlocal ropeType = RegisterRopeData(6, 0.15, \"steel_cable\", \"steel_cable_n\", 1.0, 1.0, 8.775, 0.97, 30.0, 0.25, 1.775, 0x00FFFF00)\r\nif ropeType ~= -1 then\r\n    local coords = GetEntityCoords(PlayerPedId()) + vector3(0.0, 0.0, 5.0)\r\n\tAddRope(coords.x, coords.y, coords.z, 0.0, 0.0, 0.0, 25.0, ropeType, 10.0, 0.0, 1.0, false, false, false, 1.0, false, 0)\r\n    RopeLoadTextures()\r\nend"
                }
            ],
            "hash": "0xF213AE8D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a non-negative value on success, or -1 if the rope data could not be registered or an invalid argument is passed."
        },
        "0x6D712937": {
            "name": "RESET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [],
            "return_type": "void",
            "description": "Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.",
            "examples": [],
            "hash": "0x6D712937",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4D3118ED": {
            "name": "SET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [
                {
                    "name": "vehMinSpeed",
                    "type": "float",
                    "description": "Vehicle minimum speed (default 35.0)."
                },
                {
                    "name": "unkMinSpeed",
                    "type": "float",
                    "description": "Unknown minimum speed (default 40.0)."
                },
                {
                    "name": "unkModifier",
                    "type": "float",
                    "description": "Unknown modifier (default 17.0)."
                },
                {
                    "name": "minDamage",
                    "type": "float",
                    "description": "Minimum damage (default 2000.0)."
                }
            ],
            "return_type": "BOOL",
            "description": "Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.",
            "examples": [],
            "hash": "0x4D3118ED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A bool indicating if parameters was set successfully."
        },
        "0xE62FC73": {
            "name": "SET_ROPES_CREATE_NETWORK_WORLD_STATE",
            "params": [
                {
                    "name": "shouldCreate",
                    "type": "BOOL",
                    "description": "Whether to create an underlying network world state"
                }
            ],
            "return_type": "void",
            "description": "Toggles whether the usage of [ADD_ROPE](#\\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.",
            "examples": [],
            "hash": "0xE62FC73",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x69B680A7": {
            "name": "SET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to set the length change rate for."
                },
                {
                    "name": "lengthChangeRate",
                    "type": "float",
                    "description": "The rope's new length change rate."
                }
            ],
            "return_type": "void",
            "description": "Set's the ropes length change rate, which is the speed that rope should wind if started.",
            "examples": [],
            "hash": "0x69B680A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "PLAYER": {
        "0xF2E3912B": {
            "name": "GET_PLAYER_INVINCIBLE_2",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player id"
                }
            ],
            "return_type": "BOOL",
            "description": "Unlike [GET_PLAYER_INVINCIBLE](#\\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\\_0x239528EACDC3E7DE) invincibility state.",
            "examples": [],
            "hash": "0xF2E3912B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A boolean to tell if the player is invincible."
        },
        "0xD014AB79": {
            "name": "GET_PLAYER_MAX_STAMINA",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xD014AB79",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The value of player max stamina."
        },
        "0x27E94EF8": {
            "name": "GET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\\_0xAE540335B4ABC4E2).",
            "examples": [],
            "hash": "0x27E94EF8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The value of player melee weapon defense modifier."
        },
        "0xE415EC5C": {
            "name": "GET_PLAYER_STAMINA",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xE415EC5C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The value of player stamina."
        },
        "0x78F27B1F": {
            "name": "GET_PLAYER_VEHICLE_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\\_0xA50E117CDDF82F0C).",
            "examples": [],
            "hash": "0x78F27B1F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The value of player vehicle damage modifier."
        },
        "0x8326E7CD": {
            "name": "GET_PLAYER_VEHICLE_DEFENSE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\\_0x4C60E6EFDAFF2462).",
            "examples": [],
            "hash": "0x8326E7CD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The value of player vehicle defense modifier."
        },
        "0x35594F67": {
            "name": "SET_PLAYER_MAX_STAMINA",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index"
                },
                {
                    "name": "maxStamina",
                    "type": "float",
                    "description": "The value you want to set"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x35594F67",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Did you manage to set the value."
        },
        "0xA9EC16C7": {
            "name": "SET_PLAYER_STAMINA",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index"
                },
                {
                    "name": "stamina",
                    "type": "float",
                    "description": "The value you want to set"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA9EC16C7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Did you manage to set the value."
        },
        "0x8689A825": {
            "name": "GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032).",
            "examples": [],
            "hash": "0x8689A825",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "Returns player melee weapon damage modifier value."
        },
        "0x2A3D7CDA": {
            "name": "GET_PLAYER_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3).",
            "examples": [],
            "hash": "0x2A3D7CDA",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon damage modifier."
        },
        "0xF1543251": {
            "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C).",
            "examples": [],
            "hash": "0xF1543251",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon defense modifier."
        },
        "0x986B65FF": {
            "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC).",
            "examples": [],
            "hash": "0x986B65FF",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon defense modifier 2."
        },
        "0xCF143FB9": {
            "name": "GET_ACTIVE_PLAYERS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all player indices for 'active' physical players known to the client.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [],
            "hash": "0xCF143FB9",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "An object containing a list of player indices."
        },
        "0x344EA166": {
            "name": "GET_PLAYER_FROM_SERVER_ID",
            "params": [
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server ID."
                }
            ],
            "return_type": "Player",
            "description": "Gets a local client's Player ID from its server ID counterpart, assuming the passed `serverId` exists on the client.\n\nIf no matching client is found, or an invalid value is passed over as the `serverId` native's parameter, the native result will be `-1`.\n\nIt's worth noting that this native method can only retrieve information about clients that are culled to the connected client.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "--We will assume the serverId is '4' in this scenario and that it's a valid serverId.\r\n\r\n-- Passing invalid Player IDs such as 'nil' or IDs that don't exist will result in playerId being -1.\r\n\r\nlocal playerId = GetPlayerFromServerId(serverId);\r\n\r\n-- If the resulting playerId is not invalid (not equal to -1)\r\nif playerId ~= -1 then\r\n    -- Do our stuff on this player.\r\nend\r\n"
                }
            ],
            "hash": "0x344EA166",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A valid Player ID if one is found, `-1` if not."
        },
        "0x4D97BCC7": {
            "name": "GET_PLAYER_SERVER_ID",
            "params": [
                {
                    "name": "player",
                    "type": "Player"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x4D97BCC7",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0xFC02CAF6": {
            "name": "SET_PLAYER_TALKING_OVERRIDE",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The target player."
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Overriding state."
                }
            ],
            "return_type": "void",
            "description": "the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.\r\nThis function doesn't need to be called every frame, it works like a switcher.",
            "examples": [],
            "hash": "0xFC02CAF6",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x429461C3": {
            "name": "CAN_PLAYER_START_COMMERCE_SESSION",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not the specified player has enough information to start a commerce session for.",
            "examples": [],
            "hash": "0x429461C3",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "True or false."
        },
        "0x54EA5BCC": {
            "name": "CLEAR_PLAYER_WANTED_LEVEL",
            "params": [
                {
                    "name": "player",
                    "type": "Player"
                }
            ],
            "return_type": "void",
            "description": "```\nThis executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);\r\nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.\n```\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PLAYER_WANTED_LEVEL](?\\_0xB302540597885499).**",
            "examples": [],
            "hash": "0x54EA5BCC",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x12038599": {
            "name": "DOES_PLAYER_EXIST",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not the player exists",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local deferralMessages = { \"Isn't this just magical!\", \"We can defer all day!\", \"You'll get in eventually\", \"You're totally not going to sit here forever\", \"The Fruit Tree is a lie\" }\r\nAddEventHandler(\"playerConnecting\", function(name, setKickReason, deferrals)\r\n    local source = source\r\n    deferrals.defer()\r\n\r\n    Wait(0)\r\n\r\n\r\n    local messageIndex = 0\r\n\r\n    repeat\r\n        Wait(2000)\r\n        if messageIndex >= #deferralMessages then\r\n            deferrals.done()\r\n        else\r\n            messageIndex = messageIndex + 1\r\n        end\r\n        deferrals.update(deferralMessages[messageIndex])\r\n    until not DoesPlayerExist(source)\r\nend)"
                }
            ],
            "hash": "0x12038599",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "True if the player exists, false otherwise"
        },
        "0x167ABA27": {
            "name": "DOES_PLAYER_OWN_SKU",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                },
                {
                    "name": "skuId",
                    "type": "int",
                    "description": "The ID of the SKU."
                }
            ],
            "return_type": "BOOL",
            "description": "Requests whether or not the player owns the specified SKU.",
            "examples": [],
            "hash": "0x167ABA27",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean."
        },
        "0xDEF0480B": {
            "name": "DOES_PLAYER_OWN_SKU_EXT",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                },
                {
                    "name": "skuId",
                    "type": "int",
                    "description": "The package ID on Tebex."
                }
            ],
            "return_type": "BOOL",
            "description": "Requests whether or not the player owns the specified package.",
            "examples": [],
            "hash": "0xDEF0480B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean."
        },
        "0xBA0613E1": {
            "name": "DROP_PLAYER",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                },
                {
                    "name": "reason",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA0613E1",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x62FC38D0": {
            "name": "GET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x62FC38D0",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xFF7F66AB": {
            "name": "GET_NUM_PLAYER_IDENTIFIERS",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xFF7F66AB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x63D13184": {
            "name": "GET_NUM_PLAYER_INDICES",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x63D13184",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x619E4A3D": {
            "name": "GET_NUM_PLAYER_TOKENS",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x619E4A3D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x433C765D": {
            "name": "GET_PLAYER_CAMERA_ROTATION",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle."
                }
            ],
            "return_type": "Vector3",
            "description": "Gets the current camera rotation for a specified player. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x433C765D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The player's camera rotation. Values are in radians."
        },
        "0xFEE404F9": {
            "name": "GET_PLAYER_ENDPOINT",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xFEE404F9",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x98D244": {
            "name": "GET_PLAYER_FAKE_WANTED_LEVEL",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The target player"
                }
            ],
            "return_type": "int",
            "description": "Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x98D244",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The fake wanted level"
        },
        "0x586F80FF": {
            "name": "GET_PLAYER_FOCUS_POS",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to get the focus position of"
                }
            ],
            "return_type": "Vector3",
            "description": "Gets the focus position (i.e. the position of the active camera in the game world) of a player.",
            "examples": [],
            "hash": "0x586F80FF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns a `Vector3` containing the focus position of the player."
        },
        "0xC8A9CE08": {
            "name": "GET_PLAYER_FROM_INDEX",
            "params": [
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xC8A9CE08",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xE52D9680": {
            "name": "GET_PLAYER_GUID",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xE52D9680",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x7302DBCF": {
            "name": "GET_PLAYER_IDENTIFIER",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                },
                {
                    "name": "identiferIndex",
                    "type": "int"
                }
            ],
            "return_type": "const char*",
            "description": "To get the number of identifiers, use [GET_NUM_PLAYER_IDENTIFIERS](#\\_0xFF7F66AB)\n\nTo get a specific type of identifier, use [GET_PLAYER_IDENTIFIER_BY_TYPE](#\\_0xA61C8FC6)",
            "examples": [],
            "hash": "0x7302DBCF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns the identifier at the specific index, if out of bounds returns `null`"
        },
        "0xA61C8FC6": {
            "name": "GET_PLAYER_IDENTIFIER_BY_TYPE",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to get the identifier for"
                },
                {
                    "name": "identifierType",
                    "type": "const char*",
                    "description": "The string to match in an identifier, this can be `\"license\"` for example."
                }
            ],
            "return_type": "const char*",
            "description": "Get an identifier from a player by the type of the identifier.\r\nKnown [Identifiers](https://docs.fivem.net/docs/scripting-reference/runtimes/lua/functions/GetPlayerIdentifiers/#identifier-types)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerLicenses = {}\r\n\r\nAddEventHandler('playerJoining', function()\r\n    playerLicenses[source] = GetPlayerIdentifierByType(source, 'license')\r\nend)"
                },
                {
                    "lang": "js",
                    "code": "let playerLicenses = {};\r\n\r\non('playerJoining', () => {\r\n    playerLicenses[source] = GetPlayerIdentifierByType(source, 'license');\r\n});"
                },
                {
                    "lang": "cs",
                    "code": "using System.Collections.Generic;\r\nusing static CitizenFX.Core.Native.API;\r\n// ...\r\n\r\n// In class\r\nprivate Dictionary<int, string> PlayerLicenses = new Dictionary<int, string>();\r\n\r\n// In class constructor\r\nEventHandlers[\"playerJoining\"] += new Action<Player>(SetLicense);\r\n\r\n// Delegate method\r\nprivate void SetLicense([FromSource]Player player) {\r\n    PlayerLicenses.Add(player.Handle, GetPlayerIdentifierByType(player.Handle, \"license\"));\r\n}"
                }
            ],
            "hash": "0xA61C8FC6",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The identifier that matches the string provided"
        },
        "0x680C90EE": {
            "name": "GET_PLAYER_INVINCIBLE",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x680C90EE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean to tell if the player is invincible."
        },
        "0x427E8E6A": {
            "name": "GET_PLAYER_LAST_MSG",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x427E8E6A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x2A50657": {
            "name": "GET_PLAYER_MAX_ARMOUR",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2A50657",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x8154E470": {
            "name": "GET_PLAYER_MAX_HEALTH",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x8154E470",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x406B4B20": {
            "name": "GET_PLAYER_NAME",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x406B4B20",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x6E31E993": {
            "name": "GET_PLAYER_PED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player source, passed as a string."
                }
            ],
            "return_type": "Entity",
            "description": "Used to get the player's Ped Entity ID when a valid `playerSrc` is passed.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Let's assume source is a valid ID\r\nlocal pedId = GetPlayerPed(source);\r\n\r\n-- If pedId is valid (not equal to 0)\r\nif pedId ~= 0 then\r\n    -- Do something with this ped!\r\nend"
                }
            ],
            "hash": "0x6E31E993",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns a valid Ped Entity ID if the passed `playerSrc` is valid, `0` if not."
        },
        "0x9A928294": {
            "name": "GET_PLAYER_PEER_STATISTICS",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to get the stats of"
                },
                {
                    "name": "peerStatistic",
                    "type": "int",
                    "description": "The statistic to get, this will error if its out of range"
                }
            ],
            "return_type": "int",
            "description": "```cpp\nconst int ENET_PACKET_LOSS_SCALE = 65536;\r\n\r\nenum PeerStatistics\r\n{\r\n\t// PacketLoss will only update once every 10 seconds, use PacketLossEpoch if you want the time\r\n\t// since the last time the packet loss was updated.\r\n\r\n\t// the amount of packet loss the player has, needs to be scaled with PACKET_LOSS_SCALE\r\n\tPacketLoss = 0,\r\n\t// The variance in the packet loss\r\n\tPacketLossVariance = 1,\r\n\t// The time since the last packet update in ms, relative to the peers connection time\r\n\tPacketLossEpoch = 2,\r\n\t// The mean amount of time it takes for a packet to get to the client (ping)\r\n\tRoundTripTime = 3,\r\n\t// The variance in the round trip time\r\n\tRoundTripTimeVariance = 4,\r\n\t// Despite their name, these are only updated once every 5 seconds, you can get the last time this was updated with PacketThrottleEpoch\r\n\t// The last recorded round trip time of a packet\r\n\tLastRoundTripTime = 5,\r\n\t// The last round trip time variance\r\n\tLastRoundTripTimeVariance = 6,\r\n\t// The time since the last packet throttle update, relative to the peers connection time\r\n\tPacketThrottleEpoch = 7,\r\n};\n```\n\nThese statistics only update once every 10 seconds.",
            "examples": [
                {
                    "lang": "js",
                    "code": "\r\nsetInterval(() => {\r\n\tconst ENET_PACKET_LOSS_SCALE = 65536;\r\n\r\n\tconst PLAYER_SERVER_ID = 1;\r\n\r\n\tconst packetLoss = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 0 /* PacketLoss */);\r\n\tconst packetLossVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 1 /* PacketLossVariance */);\r\n\tconst packetLossEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 2 /* PacketLossEpoch */)\r\n\tconst rtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 3 /* RoundTripTime */);\r\n\tconst rttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 4 /* RoundTripTimeVariance */);\r\n\tconst lastRtt = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 5 /* LastRoundTripTime */);\r\n\tconst lastRttVariance = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 6 /* LastRoundTripTimeVariance */);\r\n\tconst packetThrottleEpoch = GetPlayerPeerStatistics(PLAYER_SERVER_ID, 7 /* PacketThrottleEpoch */);\r\n\r\n\tconsole.log(`packetLoss: ${packetLoss}`);\r\n\tconsole.log(`packetLossVariance: ${packetLossVariance}`);\r\n\tconsole.log(`packetLossEpch: ${packetLossEpoch}`);\r\n\r\n\tconsole.log(`packetLossScaled: ${packetLoss / ENET_PACKET_LOSS_SCALE}`);\r\n\tconsole.log(`packetLossVarianceScaled: ${packetLossVariance / ENET_PACKET_LOSS_SCALE}`);\r\n\r\n\tconsole.log(`rtt: ${rtt}`);\r\n\tconsole.log(`rttVariance: ${rttVariance}`);\r\n\r\n\tconsole.log(`lastRtt: ${lastRtt}`);\r\n\tconsole.log(`lastRttVariance: ${lastRttVariance}`);\r\n\tconsole.log(`packetThrottleEpoch: ${packetThrottleEpoch}`);\r\n}, 10000)"
                }
            ],
            "hash": "0x9A928294",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "See `ENetStatisticType` for what this will return."
        },
        "0xFF1290D4": {
            "name": "GET_PLAYER_PING",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                }
            ],
            "return_type": "int",
            "description": "See [GET_PLAYER_PEER_STATISTICS](#\\_0x9A928294) if you want more detailed information, like packet loss, and packet/rtt variance",
            "examples": [],
            "hash": "0xFF1290D4",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns the mean amount of time a packet takes to get to the client"
        },
        "0x52441C34": {
            "name": "GET_PLAYER_ROUTING_BUCKET",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to get the routing bucket for."
                }
            ],
            "return_type": "int",
            "description": "Gets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
            "examples": [],
            "hash": "0x52441C34",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The routing bucket ID."
        },
        "0x9873E404": {
            "name": "GET_PLAYER_TEAM",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9873E404",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x7ADE63E1": {
            "name": "GET_PLAYER_TIME_IN_PURSUIT",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The target player"
                },
                {
                    "name": "lastPursuit",
                    "type": "BOOL",
                    "description": "False = CurrentPursuit, True = LastPursuit"
                }
            ],
            "return_type": "int",
            "description": "```\nGets the amount of time player has spent evading the cops.\r\nCounter starts and increments only when cops are chasing the player.\r\nIf the player is evading, the timer will pause.\n```",
            "examples": [],
            "hash": "0x7ADE63E1",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns -1, if the player is not wanted or wasn't in pursuit before, depending on the lastPursuit parameter\r\nReturns 0, if lastPursuit == False and the player has a wanted level, but the pursuit has not started yet\r\nOtherwise, will return the milliseconds of the pursuit."
        },
        "0x67D2E605": {
            "name": "GET_PLAYER_TIME_ONLINE",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "A player."
                }
            ],
            "return_type": "int",
            "description": "Gets the current time online for a specified player.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local function ShowTimeOnline()\r\n    local player = source\r\n    local secondsTotalOnline = GetPlayerTimeOnline(player)\r\n\r\n    print((\"Time online : %f H %f min %f\"):format(\r\n        (secondsTotalOnline / 3600),\r\n        ((secondsTotalOnline / 60) % 60),\r\n        (secondsTotalOnline % 60)\r\n    ))\r\nend\r\n\r\nRegisterNetEvent(\"myTimeOnline\", ShowTimeOnline)"
                }
            ],
            "hash": "0x67D2E605",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The current time online in seconds."
        },
        "0x54C06897": {
            "name": "GET_PLAYER_TOKEN",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "A player."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "Index between 0 and GET_NUM_PLAYER_TOKENS."
                }
            ],
            "return_type": "const char*",
            "description": "Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.",
            "examples": [],
            "hash": "0x54C06897",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A token value."
        },
        "0x821F2D2C": {
            "name": "GET_PLAYER_WANTED_CENTRE_POSITION",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The target player"
                }
            ],
            "return_type": "Vector3",
            "description": "Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x821F2D2C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The player's position known by police. Vector zero if the player has no wanted level."
        },
        "0xBDCDD163": {
            "name": "GET_PLAYER_WANTED_LEVEL",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The target player"
                }
            ],
            "return_type": "int",
            "description": "```\nReturns given players wanted level server-side.\n```",
            "examples": [],
            "hash": "0xBDCDD163",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The wanted level"
        },
        "0x404794CA": {
            "name": "IS_PED_A_PLAYER",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "BOOL",
            "description": "This native checks if the given ped is a player.",
            "examples": [],
            "hash": "0x404794CA",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns `true` if the ped is a player, `false` otherwise."
        },
        "0xDEDAE23D": {
            "name": "IS_PLAYER_ACE_ALLOWED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                },
                {
                    "name": "object",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDEDAE23D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xBEFE93F4": {
            "name": "IS_PLAYER_COMMERCE_INFO_LOADED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "BOOL",
            "description": "Requests whether or not the commerce data for the specified player has loaded.",
            "examples": [],
            "hash": "0xBEFE93F4",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean."
        },
        "0x1D14F4FE": {
            "name": "IS_PLAYER_COMMERCE_INFO_LOADED_EXT",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "BOOL",
            "description": "Requests whether or not the commerce data for the specified player has loaded from Tebex.",
            "examples": [],
            "hash": "0x1D14F4FE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean."
        },
        "0x89A3881A": {
            "name": "IS_PLAYER_EVADING_WANTED_LEVEL",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The target player"
                }
            ],
            "return_type": "BOOL",
            "description": "```\nThis will return true if the player is evading wanted level, meaning that the wanted level stars are blink.\r\nOtherwise will return false.\r\n\r\nIf the player is not wanted, it simply returns false.\n```",
            "examples": [],
            "hash": "0x89A3881A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "boolean value, depending if the player is evading his wanted level or not."
        },
        "0x1F14F2AC": {
            "name": "IS_PLAYER_IN_FREE_CAM_MODE",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to get the free camera mode status of"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1F14F2AC",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns if the player is in free camera mode."
        },
        "0xC7D2C20C": {
            "name": "IS_PLAYER_USING_SUPER_JUMP",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC7D2C20C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A boolean."
        },
        "0xA8F63EAB": {
            "name": "LOAD_PLAYER_COMMERCE_DATA",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "void",
            "description": "Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.",
            "examples": [],
            "hash": "0xA8F63EAB",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7995539E": {
            "name": "LOAD_PLAYER_COMMERCE_DATA_EXT",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "void",
            "description": "Requests the commerce data from Tebex for the specified player, including the owned SKUs.\n\nUse [`IS_PLAYER_COMMERCE_INFO_LOADED_EXT`](#\\_0x1D14F4FE) to check if it has loaded.\n\nThis will not automatically update whenever a client purchases a package, if you want to fetch new purchases you will need to call this native again.\n\nThis native will temporarily cache the players commerce data for 10 seconds, a call to this native after 10 seconds will re-fetch the players commerce data.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterNetEvent(\"doesOwnPackage\", function(packageIdSku)\r\n\t-- source isn't valid across waits, so we localize it\r\n\tlocal source = source\r\n\r\n\t-- input isn't right\r\n\tif type(packageIdSku) ~= \"number\" then\r\n\t\treturn\r\n\tend\r\n\r\n\t-- The native will cache the results\r\n\tLoadPlayerCommerceDataExt(source)\r\n\t-- Wait for the players data to load\r\n\twhile not IsPlayerCommerceInfoLoadedExt(source) do\r\n\t\tWait(0)\r\n\tend\r\n\r\n\t-- Tell the client if they own the package or not\r\n\tTriggerClientEvent(\"doesOwnPackage\", source, DoesPlayerOwnSkuExt(source, packageIdSku))\r\nend)"
                }
            ],
            "hash": "0x7995539E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x96F93CCE": {
            "name": "REQUEST_PLAYER_COMMERCE_SESSION",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                },
                {
                    "name": "skuId",
                    "type": "int",
                    "description": "The ID of the SKU."
                }
            ],
            "return_type": "void",
            "description": "Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\r\nwill open the browser prompting further purchase details.",
            "examples": [],
            "hash": "0x96F93CCE",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD17AFCD8": {
            "name": "SET_PLAYER_CONTROL",
            "params": [
                {
                    "name": "player",
                    "type": "Player"
                },
                {
                    "name": "bHasControl",
                    "type": "BOOL"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nFlags:\r\nSPC_AMBIENT_SCRIPT = (1 << 1),\r\nSPC_CLEAR_TASKS = (1 << 2),\r\nSPC_REMOVE_FIRES = (1 << 3),\r\nSPC_REMOVE_EXPLOSIONS = (1 << 4),\r\nSPC_REMOVE_PROJECTILES = (1 << 5),\r\nSPC_DEACTIVATE_GADGETS = (1 << 6),\r\nSPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),\r\nSPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),\r\nSPC_ALLOW_PLAYER_DAMAGE = (1 << 9),\r\nSPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),\r\nSPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),\r\nSPC_ALLOW_PAD_SHAKE = (1 << 12)\r\nSee: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_CONTROL](?\\_0x8D32347D6D4C40A2).**",
            "examples": [],
            "hash": "0xD17AFCD8",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8A2FBAD4": {
            "name": "SET_PLAYER_CULLING_RADIUS",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to set the culling radius for."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The radius."
                }
            ],
            "return_type": "void",
            "description": "Sets the culling radius for the specified player.\r\nSet to `0.0` to reset.\n\n**WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)",
            "examples": [],
            "hash": "0x8A2FBAD4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xDFB9A2A2": {
            "name": "SET_PLAYER_INVINCIBLE",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player index."
                },
                {
                    "name": "bInvincible",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Make the player impervious to all forms of damage.\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_INVINCIBLE](?\\_0x239528EACDC3E7DE).**",
            "examples": [],
            "hash": "0xDFB9A2A2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x774A4C54": {
            "name": "SET_PLAYER_MODEL",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player to set the model for"
                },
                {
                    "name": "model",
                    "type": "Hash",
                    "description": "The model to use"
                }
            ],
            "return_type": "void",
            "description": "Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.\r\nAs per usual, make sure to request the model first and wait until it has loaded.\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_MODEL](?\\_0x00A1CADD00108836).**",
            "examples": [],
            "hash": "0x774A4C54",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x6504EB38": {
            "name": "SET_PLAYER_ROUTING_BUCKET",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player to set the routing bucket for."
                },
                {
                    "name": "bucket",
                    "type": "int",
                    "description": "The bucket ID."
                }
            ],
            "return_type": "void",
            "description": "Sets the routing bucket for the specified player.\n\nRouting buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.",
            "examples": [],
            "hash": "0x6504EB38",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB7A0914B": {
            "name": "SET_PLAYER_WANTED_LEVEL",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "the target player"
                },
                {
                    "name": "wantedLevel",
                    "type": "int",
                    "description": "the wanted level 1-5"
                },
                {
                    "name": "delayedResponse",
                    "type": "BOOL",
                    "description": "false = 0-10sec police spawn response time, true = 10-20sec police spawn response time"
                }
            ],
            "return_type": "void",
            "description": "SET_PLAYER_WANTED_LEVEL\n\n**This is the server-side RPC native equivalent of the client native [SET_PLAYER_WANTED_LEVEL](?\\_0x39FF19C64EF7DA5B).**",
            "examples": [],
            "hash": "0xB7A0914B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x1E35DBBA": {
            "name": "TEMP_BAN_PLAYER",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*"
                },
                {
                    "name": "reason",
                    "type": "char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E35DBBA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA56135E0": {
            "name": "GET_PLAYER_FROM_STATE_BAG_NAME",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "An internal state bag ID from the argument to a state bag change handler."
                }
            ],
            "return_type": "int",
            "description": "On the server this will return the players source, on the client it will return the player handle.",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"isDead\", null, async (bagName, key, value /* boolean */) => {\r\n    const ply = GetPlayerFromStateBagName(bagName);\r\n    // The player doesn't exist!\r\n    if (ply === 0) return;\r\n    console.log(`Player: ${GetPlayerName(ply)} ${value ? 'died!' : 'is alive!'`)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"isDead\", nil, function(bagName, key, value) \r\n    local ply = GetPlayerFromStateBagName(bagName)\r\n    -- The player doesn't exist!\r\n    if ply == 0 then return end\r\n    print(\"Player: \" .. GetPlayerName(ply) .. value and 'died!' or 'is alive!')\r\nend)"
                }
            ],
            "hash": "0xA56135E0",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The player handle or 0 if the state bag name did not refer to a player, or the player does not exist."
        }
    },
    "STREAMING": {
        "0x322B1192": {
            "name": "GET_INTERIOR_ENTITIES_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "bbMinX",
                    "type": "float*"
                },
                {
                    "name": "bbMinY",
                    "type": "float*"
                },
                {
                    "name": "bbMinZ",
                    "type": "float*"
                },
                {
                    "name": "bbMaxX",
                    "type": "float*"
                },
                {
                    "name": "bbMaxY",
                    "type": "float*"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorEntitiesExtents(interiorId, roomId)\r\n  print(\"current entities extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
                }
            ],
            "hash": "0x322B1192",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior entities extents."
        },
        "0xF772BB2C": {
            "name": "GET_INTERIOR_PORTAL_CORNER_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "cornerIndex",
                    "type": "int",
                    "description": "Portal's corner index."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n  local cornerIndex = 0\r\n\r\n  local x, y, z = GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex)\r\n  print(\"position of portal \" .. portalIndex .. \"corner index \" .. cornerIndex .. \" is: \" .. vec(x, y, z))\r\nend"
                }
            ],
            "hash": "0xF772BB2C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal corner position."
        },
        "0xD05BB8B1": {
            "name": "GET_INTERIOR_PORTAL_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" portals\")\r\nend"
                }
            ],
            "hash": "0xD05BB8B1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of portals in interior."
        },
        "0x9A0E1700": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_ARCHETYPE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local archetype = GetInteriorPortalEntityArchetype(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" archetype is: \" .. archetype)\r\n  end\r\nend"
                }
            ],
            "hash": "0x9A0E1700",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity archetype."
        },
        "0xC68021B": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  print(\"portal \" .. portalIndex ..\" entity count is: \" .. count)\r\nend"
                }
            ],
            "hash": "0xC68021B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity count."
        },
        "0x9DA2E811": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local flag = GetInteriorPortalEntityFlag(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" flag is: \" .. flag)\r\n  end\r\nend"
                }
            ],
            "hash": "0x9DA2E811",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity flag."
        },
        "0x9B7AB83C": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z = GetInteriorPortalEntityPosition(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" position is: \" .. vec3(x, y, z))\r\n  end\r\nend"
                }
            ],
            "hash": "0x9B7AB83C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity position."
        },
        "0x9F9CEB63": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_ROTATION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "rotX",
                    "type": "float*"
                },
                {
                    "name": "rotY",
                    "type": "float*"
                },
                {
                    "name": "rotZ",
                    "type": "float*"
                },
                {
                    "name": "rotW",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z, w = GetInteriorPortalEntityRotation(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" rotation is: \" .. vec4(x, y, z, w))\r\n  end\r\nend"
                }
            ],
            "hash": "0x9F9CEB63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity rotation."
        },
        "0xC74DA47C": {
            "name": "GET_INTERIOR_PORTAL_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalFlag = GetInteriorPortalFlag(interiorId, 0)\r\n  print(\"portal 0 flag is: \" .. portalRoomFrom)\r\nend"
                }
            ],
            "hash": "0xC74DA47C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's flag."
        },
        "0xAA9C141D": {
            "name": "GET_INTERIOR_PORTAL_ROOM_FROM",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomFrom = GetInteriorPortalRoomFrom(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room FROM is: \" .. portalRoomFrom)\r\nend"
                }
            ],
            "hash": "0xAA9C141D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's room FROM index."
        },
        "0x3F47F0E8": {
            "name": "GET_INTERIOR_PORTAL_ROOM_TO",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomTo = GetInteriorPortalRoomTo(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room TO is: \" .. portalRoomTo)\r\nend"
                }
            ],
            "hash": "0x3F47F0E8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's room TO index."
        },
        "0x77A435B0": {
            "name": "GET_INTERIOR_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z = GetInteriorPosition(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" position is: \" .. vec(x, y, z))\r\nend"
                }
            ],
            "hash": "0x77A435B0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior position."
        },
        "0xA2737C2C": {
            "name": "GET_INTERIOR_ROOM_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorRoomCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" rooms\")\r\nend"
                }
            ],
            "hash": "0xA2737C2C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of rooms in interior."
        },
        "0xF9E795DD": {
            "name": "GET_INTERIOR_ROOM_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "bbMinX",
                    "type": "float*"
                },
                {
                    "name": "bbMinY",
                    "type": "float*"
                },
                {
                    "name": "bbMinZ",
                    "type": "float*"
                },
                {
                    "name": "bbMaxX",
                    "type": "float*"
                },
                {
                    "name": "bbMaxY",
                    "type": "float*"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorRoomExtents(interiorId, roomId)\r\n  print(\"current room extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
                }
            ],
            "hash": "0xF9E795DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room extents."
        },
        "0x6B7AF743": {
            "name": "GET_INTERIOR_ROOM_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomFlag = GetInteriorRoomFlag(interiorId, roomId)\r\n  print(\"current room flag is: \" .. roomFlag)\r\nend"
                }
            ],
            "hash": "0x6B7AF743",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's flag."
        },
        "0xE0EE05F8": {
            "name": "GET_INTERIOR_ROOM_INDEX_BY_HASH",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomHash",
                    "type": "int",
                    "description": "Interior room hash."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  print(\"current room index is: \" .. roomId)\r\nend"
                }
            ],
            "hash": "0xE0EE05F8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room index, -1 if failed."
        },
        "0x11755DF2": {
            "name": "GET_INTERIOR_ROOM_NAME",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomName = GetInteriorRoomName(interiorId, roomId)\r\n  print(\"current room name is: \" .. roomName)\r\nend"
                }
            ],
            "hash": "0x11755DF2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's name."
        },
        "0x82BA3F88": {
            "name": "GET_INTERIOR_ROOM_TIMECYCLE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomTimecycle = GetInteriorRoomTimecycle(interiorId, roomId)\r\n  print(\"current room timecycle hash is: \" .. roomTimecycle)\r\nend"
                }
            ],
            "hash": "0x82BA3F88",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's timecycle hash."
        },
        "0x5A039998": {
            "name": "GET_INTERIOR_ROTATION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "rotx",
                    "type": "float*"
                },
                {
                    "name": "rotY",
                    "type": "float*"
                },
                {
                    "name": "rotZ",
                    "type": "float*"
                },
                {
                    "name": "rotW",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z, w = GetInteriorRotation(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" rotation is: \" .. vec(x, y, z, w))\r\nend"
                }
            ],
            "hash": "0x5A039998",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior rotation in quaternion."
        },
        "0x87F43553": {
            "name": "SET_INTERIOR_PORTAL_CORNER_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "cornerIndex",
                    "type": "int",
                    "description": "Interior corner index."
                },
                {
                    "name": "posX",
                    "type": "float"
                },
                {
                    "name": "posY",
                    "type": "float"
                },
                {
                    "name": "posZ",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalCount = GetInteriorPortalCount(interiorId)\r\n\r\n  -- rip portals\r\n  for portalIndex = 0, portalCount - 1 do\r\n    for cornerIndex = 0, 3 do -- 4 corners\r\n      SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, 0.0, 0.0, 0.0)\r\n    end\r\n  end\r\n  \r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x87F43553",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x8349CD76": {
            "name": "SET_INTERIOR_PORTAL_ENTITY_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    SetInteriorPortalEntityFlag(interiorId, portalIndex, i, 0)\r\n  end\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x8349CD76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x88B2355E": {
            "name": "SET_INTERIOR_PORTAL_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalFlag(interiorId, portalIndex, 1)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x88B2355E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x298FC783": {
            "name": "SET_INTERIOR_PORTAL_ROOM_FROM",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "roomFrom",
                    "type": "int",
                    "description": "New value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomFrom(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x298FC783",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x58982680": {
            "name": "SET_INTERIOR_PORTAL_ROOM_TO",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "roomTo",
                    "type": "int",
                    "description": "New value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomTo(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x58982680",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x423F7E39": {
            "name": "SET_INTERIOR_PROBE_LENGTH",
            "params": [
                {
                    "name": "probeLength",
                    "type": "float",
                    "description": "The desired probe length (0.0 - 150.0)"
                }
            ],
            "return_type": "void",
            "description": "Overwrite the games default CPortalTracker interior detection range.\r\nThis fixes potentially unwanted behaviour in the base game and allows you to build custom interiors with larger ceiling heights without running into graphical glitches.\n\nBy default CPortalTracker will probe 4 units downward trying to reach collisions that are part of the interior the entity is in.\r\nIf no collision can be found 16 units are used in some circumstances.\n\nThere are 30+ hard coded special cases, only some of them exposed via script (for example `ENABLE_STADIUM_PROBES_THIS_FRAME`).\n\nThis native allows you to extend the probe range up to 150 units which is the same value the game uses for the `xs_arena_interior`",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"setInteriorProbeLength\", function(src, args, raw)\r\n    local probeLength = (tonumber(args[1]) + 0.0)\r\n\r\n    print(\"Extending interior detection probes to: \", probeLength)\r\n    SetInteriorProbeLength(probeLength)\r\nend)\r\n\r\nRegisterCommand(\"resetInteriorProbeLength\", function()\r\n    print(\"Resetting interior detection probes to default settings\")\r\n    SetInteriorProbeLength(0.0)\r\nend)"
                }
            ],
            "hash": "0x423F7E39",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4FDCF51E": {
            "name": "SET_INTERIOR_ROOM_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "bbMinX",
                    "type": "float"
                },
                {
                    "name": "bbMinY",
                    "type": "float"
                },
                {
                    "name": "bbMinZ",
                    "type": "float"
                },
                {
                    "name": "bbMaxX",
                    "type": "float"
                },
                {
                    "name": "bbMaxY",
                    "type": "float"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  SetInteriorRoomExtents(interiorId, 0, -999.0, -999.0, -100.0, 999.0, 999.0, 100.0) -- 0 is a limbo usually\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x4FDCF51E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x5518D60B": {
            "name": "SET_INTERIOR_ROOM_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  SetInteriorRoomFlag(interiorId, roomId, 64)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x5518D60B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x31C9A848": {
            "name": "SET_INTERIOR_ROOM_TIMECYCLE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "timecycleHash",
                    "type": "int",
                    "description": "Timecycle hash."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local timecycleHash = GetHashKey(\"scanline_cam\")\r\n  SetInteriorRoomTimecycle(interiorId, roomId, timecycleHash)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x31C9A848",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFC52CB91": {
            "name": "UPDATE_MAPDATA_ENTITY",
            "params": [
                {
                    "name": "mapdata",
                    "type": "int",
                    "description": "A fwMapData index from GET_MAPDATA_FROM_HASH_KEY."
                },
                {
                    "name": "entity",
                    "type": "int",
                    "description": "An entity index from GET_ENTITY_INDEX_FROM_MAPDATA."
                },
                {
                    "name": "entityDef",
                    "type": "Object",
                    "description": "The new entity definition in fwEntityDef format."
                }
            ],
            "return_type": "void",
            "description": "Transiently updates the entity with the specified mapdata index and entity index.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xFC52CB91",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x32CA01C3": {
            "name": "ADD_TEXT_ENTRY",
            "params": [
                {
                    "name": "entryKey",
                    "type": "const char*"
                },
                {
                    "name": "entryText",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x32CA01C3",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x289DA860": {
            "name": "ADD_TEXT_ENTRY_BY_HASH",
            "params": [
                {
                    "name": "entryKey",
                    "type": "Hash"
                },
                {
                    "name": "entryText",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x289DA860",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "TRACK": {
        "0x81A08523": {
            "name": "GET_ALL_TRACK_JUNCTIONS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all track junctions on the client\r\nThe data returned adheres to the following structure:\n\n```\n[1, 2, 4, 6, 69, 420]\n```",
            "examples": [],
            "hash": "0x81A08523",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of track junctions ids.```\n```"
        },
        "0x59FC24A7": {
            "name": "GET_CLOSEST_TRACK_NODES",
            "params": [
                {
                    "name": "position",
                    "type": "Vector3",
                    "description": "Get track nodes at position"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Get track nodes within radius"
                }
            ],
            "return_type": "Object",
            "description": "Get all track nodes and their track ids within the radius of the specified coordinates.",
            "examples": [],
            "hash": "0x59FC24A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a list of tracks and node entries: a trackNode and a trackIdThe data returned adheres to the following layout:    [{trackNode1, trackId1}, ..., {trackNodeN, trackIdN}]"
        },
        "0xBF482A5E": {
            "name": "GET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xBF482A5E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The braking distance of the track. Used by trains to determine the point to slow down at when entering a station."
        },
        "0x34EE2BF3": {
            "name": "GET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x34EE2BF3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The max speed of the track"
        },
        "0x1628548E": {
            "name": "GET_TRACK_NODE_COORDS",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The track node"
                },
                {
                    "name": "coords",
                    "type": "Vector3*",
                    "description": "The resulting track node coords"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets the coordinates of a specific track node.",
            "examples": [],
            "hash": "0x1628548E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in getting coords or not"
        },
        "0x896A0C11": {
            "name": "GET_TRACK_NODE_COUNT",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                }
            ],
            "return_type": "int",
            "description": "Gets the specified tracks node count.",
            "examples": [],
            "hash": "0x896A0C11",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of track nodes on the specified track"
        },
        "0x31E695CB": {
            "name": "IS_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SET_TRACK_ENABLED](#\\_0x4B41E84C)",
            "examples": [],
            "hash": "0x31E695CB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track is enabled."
        },
        "0xE0C53765": {
            "name": "IS_TRACK_SWITCHED_OFF",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SWITCH_TRAIN_TRACK](#\\_0xFD813BB7DB977F20). Determines if ambient trains are able to spawn on this track.",
            "examples": [],
            "hash": "0xE0C53765",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track allows ambient trains to spawn"
        },
        "0x35F743B5": {
            "name": "REGISTER_TRACK_JUNCTION",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index a train should be on"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The node a train should be on"
                },
                {
                    "name": "newIndex",
                    "type": "int",
                    "description": "The new track index for a train to be placed on"
                },
                {
                    "name": "newNode",
                    "type": "int",
                    "description": "The new track node for a train to be placed on"
                },
                {
                    "name": "direction",
                    "type": "BOOL",
                    "description": "The direction a train should be traveling for this junction"
                }
            ],
            "return_type": "int",
            "description": "Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node",
            "examples": [],
            "hash": "0x35F743B5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The track junction's handle or -1 if invalid."
        },
        "0x4F3D2B2A": {
            "name": "REMOVE_TRACK_JUNCTION",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                }
            ],
            "return_type": "BOOL",
            "description": "Removes the specified track junction.",
            "examples": [],
            "hash": "0x4F3D2B2A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in removing a junction or not"
        },
        "0x77EB78D0": {
            "name": "SET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "brakingDistance",
                    "type": "float",
                    "description": "The new braking distance"
                }
            ],
            "return_type": "void",
            "description": "Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.",
            "examples": [],
            "hash": "0x77EB78D0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4B41E84C": {
            "name": "SET_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Should this track be enabled"
                }
            ],
            "return_type": "void",
            "description": "Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn",
            "examples": [],
            "hash": "0x4B41E84C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x537B449D": {
            "name": "SET_TRACK_JUNCTION_ACTIVE",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggles the state of the junction"
                }
            ],
            "return_type": "BOOL",
            "description": "Sets the state of a track junction.",
            "examples": [],
            "hash": "0x537B449D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds setting the junctions state or not"
        },
        "0x37BFC732": {
            "name": "SET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "newSpeed",
                    "type": "int",
                    "description": "The tracks new speed"
                }
            ],
            "return_type": "void",
            "description": "Sets the max speed for the train tracks. Used by ambient trains and for station calculations",
            "examples": [],
            "hash": "0x37BFC732",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "VEHICLE": {
        "0xA274CADB": {
            "name": "BREAK_OFF_VEHICLE_WHEEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "The wheel index."
                },
                {
                    "name": "leaveDebrisTrail",
                    "type": "BOOL",
                    "description": "Start \"veh_debris_trail\" ptfx."
                },
                {
                    "name": "deleteWheel",
                    "type": "BOOL",
                    "description": "True to delete wheel, otherwise detach."
                },
                {
                    "name": "unknownFlag",
                    "type": "BOOL",
                    "description": "Unknown flag."
                },
                {
                    "name": "putOnFire",
                    "type": "BOOL",
                    "description": "Set wheel on fire once detached."
                }
            ],
            "return_type": "void",
            "description": "Break off vehicle wheel by index. The `leaveDebrisTrail` flag requires `putOnFire` to be true.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId())\r\n\r\nif DoesEntityExist(vehicle) then\r\n  for i = 0, 3 do\r\n    BreakOffVehicleWheel(vehicle, i, true, false, true, false)\r\n  end\r\nend"
                }
            ],
            "hash": "0xA274CADB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2867ED8C": {
            "name": "CLEAR_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                }
            ],
            "return_type": "void",
            "description": "Removes vehicle xenon lights custom RGB color.",
            "examples": [],
            "hash": "0x2867ED8C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x5C140555": {
            "name": "DISABLE_VEHICLE_PASSENGER_IDLE_CAMERA",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables the game's afk camera that starts panning around after 30 seconds of inactivity(While riding in a car as a passenger)",
            "examples": [],
            "hash": "0x5C140555",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEF30A696": {
            "name": "DOES_VEHICLE_USE_FUEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Checks whether the vehicle consumes fuel. The check is done based on petrol tank volume and vehicle type. Bicycles and vehicles with petrol tank volume equal to zero (only bicycles by default) do not use fuel. All other vehicles do.\n\nYou can customize petrol tank volume using [`SET_HANDLING_FLOAT`](#\\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\\_0x488C86D2) natives with `fieldName` equal to `fPetrolTankVolume`.",
            "examples": [],
            "hash": "0xEF30A696",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "True if the vehicle uses fuel to move. False otherwise."
        },
        "0xD7531645": {
            "name": "GET_ALL_VEHICLE_MODELS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all registered vehicle model names, including non-dlc vehicles and custom vehicles in no particular order.\n\n**Example output**\n\n```\n\t[\"dubsta\", \"dubsta2\", \"dubsta3\", \"myverycoolcar\", \"sultan\", \"sultanrs\", ...]\n```\n\nThis native will not return vehicles that are unregistered (i.e from a resource being stopped) during runtime.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"spawnrandomcar\", function()\r\n\tlocal vehicles = GetAllVehicleModels()\r\n\tlocal veh = vehicles[math.random(1, #vehicles)]\r\n\tRequestModel(veh)\r\n\trepeat Wait(0) until HasModelLoaded(veh)\r\n\tlocal veh = CreateVehicle(veh, GetEntityCoords(PlayerPedId()), GetEntityHeading(PlayerPedId()), true, false)\r\n\tSetPedIntoVehicle(PlayerPedId(), veh, -1)\r\nend)"
                }
            ],
            "hash": "0xD7531645",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x667EC929": {
            "name": "GET_AMBIENT_VEHICLE_RANGE_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x90B6DA738A9A25DA).",
            "examples": [],
            "hash": "0x667EC929",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns ambient vehicle range multiplier value."
        },
        "0xE015E854": {
            "name": "GET_TRAIN_CURRENT_TRACK_NODE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The target train."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xE015E854",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Train's current track node index."
        },
        "0x99974721": {
            "name": "GET_TRAIN_DOOR_COUNT",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train to obtain the door count for."
                }
            ],
            "return_type": "int",
            "description": "Gets the door count for the specified train.",
            "examples": [],
            "hash": "0x99974721",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The door count."
        },
        "0x40B16551": {
            "name": "GET_TRAIN_DOOR_OPEN_RATIO",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train to obtain the door ratio for."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "Zero-based door index."
                }
            ],
            "return_type": "float",
            "description": "Gets the ratio that a door is open for on a train.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local doorCount = GetTrainDoorCount(train)\r\nfor doorIndex = 0, doorCount - 1 do\r\n    local ratio = GetTrainDoorOpenRatio(train, doorIndex)\r\n    print(\"Door \" .. tostring(doorIndex) .. \" is open by a ratio of \" .. tostring(ratio))\r\nend"
                },
                {
                    "lang": "cs",
                    "code": "int doorCount = API.GetTrainDoorCount(train);\r\nfor (int doorIndex = 0; doorIndex < doorCount; doorIndex++)\r\n{\r\n    float ratio = API.GetTrainDoorOpenRatio(train, doorIndex);\r\n    Debug.WriteLine($\"Door {doorIndex} is open by a ratio of {ratio}\");\r\n}"
                }
            ],
            "hash": "0x40B16551",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A value between 0.0 (fully closed) and 1.0 (fully open)."
        },
        "0x428668B7": {
            "name": "GET_TRAIN_SPEED",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "float",
            "description": "Gets the speed the train is currently going.",
            "examples": [],
            "hash": "0x428668B7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The current speed of the train"
        },
        "0xC62AAC98": {
            "name": "GET_VEHICLE_ALARM_TIME_LEFT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xC62AAC98",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xC3C93F28": {
            "name": "GET_VEHICLE_CHEAT_POWER_INCREASE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\\_0xB59E4BD37AE292DB).",
            "examples": [],
            "hash": "0xC3C93F28",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns vehicle's cheat power increase modifier value."
        },
        "0x1DAD4583": {
            "name": "GET_VEHICLE_CLUTCH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1DAD4583",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xB4F4E566": {
            "name": "GET_VEHICLE_CURRENT_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xB4F4E566",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xE7B12B54": {
            "name": "GET_VEHICLE_CURRENT_RPM",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xE7B12B54",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xDFFABA2A": {
            "name": "GET_VEHICLE_DASHBOARD_BOOST",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xDFFABA2A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x435C86F4": {
            "name": "GET_VEHICLE_DASHBOARD_CURRENT_GEAR",
            "params": [],
            "return_type": "float",
            "description": "Retrieves the current gear displayed on the dashboard of the vehicle the player is in, returned as a float. This value represents the gear shown in the instrument cluster, such as \"R\" (0.0) or positive values (e.g., 1.0, 2.0, etc.) for drive gears.",
            "examples": [],
            "hash": "0x435C86F4",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "aliases": [
                "GET_VEHICLE_DASHBOARD_WATER_TEMP"
            ],
            "resultsDescription": "The current gear."
        },
        "0x19B0B2CE": {
            "name": "GET_VEHICLE_DASHBOARD_FUEL",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x19B0B2CE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x500FFE9D": {
            "name": "GET_VEHICLE_DASHBOARD_LIGHTS",
            "params": [],
            "return_type": "int",
            "description": "Gets the state of the player vehicle's dashboard lights as a bit set\r\nindicator_left = 1\r\nindicator_right = 2\r\nhandbrakeLight = 4\r\nengineLight = 8\r\nABSLight = 16\r\ngasLight = 32\r\noilLight = 64\r\nheadlights = 128\r\nhighBeam = 256\r\nbatteryLight = 512",
            "examples": [],
            "hash": "0x500FFE9D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3856D767": {
            "name": "GET_VEHICLE_DASHBOARD_OIL_PRESSURE",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x3856D767",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1F5996AA": {
            "name": "GET_VEHICLE_DASHBOARD_OIL_TEMP",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1F5996AA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF9716A11": {
            "name": "GET_VEHICLE_DASHBOARD_RPM",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF9716A11",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "float 0 to ~1.1 representing the angle of the rpm gauge on the player's vehicle dashboard"
        },
        "0x9AAD420E": {
            "name": "GET_VEHICLE_DASHBOARD_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x9AAD420E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x6B6ADAFA": {
            "name": "GET_VEHICLE_DASHBOARD_TEMP",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x6B6ADAFA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFABE67A9": {
            "name": "GET_VEHICLE_DASHBOARD_VACUUM",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xFABE67A9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEF7C6538": {
            "name": "GET_VEHICLE_DENSITY_MULTIPLIER",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x245A6883D966D537).",
            "examples": [],
            "hash": "0xEF7C6538",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns vehicle density multiplier value."
        },
        "0x21C1DA8E": {
            "name": "GET_VEHICLE_DRAWN_WHEEL_ANGLE_MULT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.",
            "examples": [],
            "hash": "0x21C1DA8E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF4F495CB": {
            "name": "GET_VEHICLE_ENGINE_TEMPERATURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF4F495CB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x5F739BB8": {
            "name": "GET_VEHICLE_FUEL_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x5F739BB8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x82E794B7": {
            "name": "GET_VEHICLE_GEAR_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "gear",
                    "type": "int",
                    "description": "The vehicles gear you want to get."
                }
            ],
            "return_type": "float",
            "description": "Gets vehicles gear ratio on choosen gear.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId(-1))\r\nlocal currentGear = GetVehicleCurrentGear(Vehicle)\r\n\r\nprint(GetVehicleGearRatio(vehicle, currentGear)) -- will print current vehicle gear to console"
                },
                {
                    "lang": "js",
                    "code": "const vehicle = GetVehiclePedIsIn(PlayerPedId(-1));\r\nconst currentGear = GetVehicleCurrentGear(Vehicle);\r\n\r\nconsole.log(GetVehicleGearRatio(vehicle, currentGear)); // will print current vehicle gear to console"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.API;\r\n\r\nVehicle vehicle = Game.PlayerPed.CurrentVehicle;\r\nint currentGear = GetVehicleCurrentGear(vehicle.Handle);\r\n\r\nDebug.WriteLine($\"{GetVehicleGearRatio(vehicle.Handle, currentGear)}\");"
                }
            ],
            "hash": "0x82E794B7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB48A1292": {
            "name": "GET_VEHICLE_GRAVITY_AMOUNT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xB48A1292",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x642FC12F": {
            "name": "GET_VEHICLE_HANDLING_FLOAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to get. These match the keys in `handling.meta`."
                }
            ],
            "return_type": "float",
            "description": "Returns the effective handling data of a vehicle as a floating-point value.\r\nExample: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`",
            "examples": [],
            "hash": "0x642FC12F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A floating-point value."
        },
        "0x27396C75": {
            "name": "GET_VEHICLE_HANDLING_INT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to get. These match the keys in `handling.meta`."
                }
            ],
            "return_type": "int",
            "description": "Returns the effective handling data of a vehicle as an integer value.\r\nExample: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`",
            "examples": [],
            "hash": "0x27396C75",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An integer."
        },
        "0xFB341304": {
            "name": "GET_VEHICLE_HANDLING_VECTOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to get. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to get. These match the keys in `handling.meta`."
                }
            ],
            "return_type": "Vector3",
            "description": "Returns the effective handling data of a vehicle as a vector value.\r\nExample: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`",
            "examples": [],
            "hash": "0xFB341304",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An integer."
        },
        "0xF1D1D689": {
            "name": "GET_VEHICLE_HIGH_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xF1D1D689",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x83070354": {
            "name": "GET_VEHICLE_INDICATOR_LIGHTS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both",
            "examples": [],
            "hash": "0x83070354",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An integer."
        },
        "0x7E6E219C": {
            "name": "GET_VEHICLE_LIGHT_MULTIPLIER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x7E6E219C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xDDB298AE": {
            "name": "GET_VEHICLE_NEXT_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xDDB298AE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xEDF4B0FC": {
            "name": "GET_VEHICLE_NUMBER_OF_WHEELS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xEDF4B0FC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xFC7F8EF4": {
            "name": "GET_VEHICLE_OIL_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xFC7F8EF4",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x954465DE": {
            "name": "GET_VEHICLE_STEERING_SCALE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x954465DE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xD1D07351": {
            "name": "GET_VEHICLE_THROTTLE_OFFSET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xD1D07351",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "aliases": [
                "GET_VEHICLE_CURRENT_ACCELERATION"
            ],
            "resultsDescription": "A float among -1 and 1 according if the vehicle is moving forwards or backwards"
        },
        "0x998B7FEE": {
            "name": "GET_VEHICLE_TOP_SPEED_MODIFIER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "float",
            "description": "A getter for [MODIFY_VEHICLE_TOP_SPEED](#\\_0x93A3996368C94158). Returns -1.0 if a modifier is not set.",
            "examples": [],
            "hash": "0x998B7FEE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns vehicle's modified top speed."
        },
        "0xE02B51D7": {
            "name": "GET_VEHICLE_TURBO_PRESSURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xE02B51D7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x137260D1": {
            "name": "GET_VEHICLE_WHEELIE_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "List of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local veh = GetVehiclePedIsUsing(PlayerPedId())\r\n    if veh ~= 0 then\r\n      local wheelieState = GetVehicleWheelieState(veh)\r\n      if wheelieState == 1 then\r\n        print(\"Nothing\")\r\n      elseif wheelieState == 65 then\r\n        print(\"Ready to wheelie!\")\r\n      elseif wheelieState == 129 then\r\n        print(\"Doing wheelie!\")\r\n      end\r\n    end\r\n  end\r\nend)"
                }
            ],
            "hash": "0x137260D1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Vehicle's current wheelie state."
        },
        "0x70FE2EFF": {
            "name": "GET_VEHICLE_WHEEL_BRAKE_PRESSURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f when braking.",
            "examples": [],
            "hash": "0x70FE2EFF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC70FA0C7": {
            "name": "GET_VEHICLE_WHEEL_FLAGS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "int",
            "description": "Gets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xC70FA0C7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An unsigned int containing bit flags."
        },
        "0x54A677F5": {
            "name": "GET_VEHICLE_WHEEL_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x54A677F5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x3CCF1B49": {
            "name": "GET_VEHICLE_WHEEL_IS_POWERED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets whether the wheel is powered.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS.",
            "examples": [],
            "hash": "0x3CCF1B49",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xD203287": {
            "name": "GET_VEHICLE_WHEEL_POWER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xD203287",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xCEE21AB2": {
            "name": "GET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xCEE21AB2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Float representing size of the rim collider. Not sure what it is used for, probably to detect whether bullets hit rim or tire and puncture it (and to determine size of the wheel when tire is fully blown)."
        },
        "0xEA1859E5": {
            "name": "GET_VEHICLE_WHEEL_ROTATION_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets the rotation speed of a wheel.\r\nThis is used internally to calcuate GET_VEHICLE_WHEEL_SPEED.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xEA1859E5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The angular velocity of the wheel."
        },
        "0x4046B66": {
            "name": "GET_VEHICLE_WHEEL_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                }
            ],
            "return_type": "float",
            "description": "Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).",
            "examples": [],
            "hash": "0x4046B66",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Float representing size of the wheel (usually between 0.5 and 1.5)"
        },
        "0x149C9DA0": {
            "name": "GET_VEHICLE_WHEEL_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets speed of a wheel at the tyre.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0x149C9DA0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An integer."
        },
        "0xA0867448": {
            "name": "GET_VEHICLE_WHEEL_STEERING_ANGLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets steering angle of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xA0867448",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The steering angle of the wheel, with 0 being straight."
        },
        "0xA7F04022": {
            "name": "GET_VEHICLE_WHEEL_SURFACE_MATERIAL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xA7F04022",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Integer representing the index of the current surface material of that wheel. Check materials.dat for the indexes."
        },
        "0x2B48175B": {
            "name": "GET_VEHICLE_WHEEL_SUSPENSION_COMPRESSION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets the current suspension compression of a wheel.\r\nReturns a positive value. 0 means the suspension is fully extended, the wheel is off the ground.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0x2B48175B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The current compression of the wheel's suspension."
        },
        "0xE0BA9FE6": {
            "name": "GET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xE0BA9FE6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Float representing size of the wheel collider."
        },
        "0xEF65929C": {
            "name": "GET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xEF65929C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Float representing width of the wheel collider."
        },
        "0x3BCFEE14": {
            "name": "GET_VEHICLE_WHEEL_TRACTION_VECTOR_LENGTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Gets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0x3BCFEE14",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9C7B59F9": {
            "name": "GET_VEHICLE_WHEEL_WIDTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                }
            ],
            "return_type": "float",
            "description": "Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).",
            "examples": [],
            "hash": "0x9C7B59F9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Float representing width of the wheel (usually between 0.1 and 1.5)"
        },
        "0xCC90CBCA": {
            "name": "GET_VEHICLE_WHEEL_X_OFFSET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "Returns the offset of the specified wheel relative to the wheel's axle center.",
            "examples": [],
            "hash": "0xCC90CBCA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x2EA4AFFE": {
            "name": "GET_VEHICLE_WHEEL_Y_ROTATION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x2EA4AFFE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "aliases": [
                "GET_VEHICLE_WHEEL_XROT"
            ],
            "resultsDescription": ""
        },
        "0xC715F730": {
            "name": "GET_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "red",
                    "type": "int*",
                    "description": "Red color (0-255)."
                },
                {
                    "name": "green",
                    "type": "int*",
                    "description": "Green color (0-255)."
                },
                {
                    "name": "blue",
                    "type": "int*",
                    "description": "Blue color (0-255)."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns vehicle xenon lights custom RGB color values. Do note this native doesn't return non-RGB colors that was set with [\\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\\_0xE41033B25D003A07).",
            "examples": [],
            "hash": "0xC715F730",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A boolean indicating if vehicle have custom xenon lights RGB color."
        },
        "0x16605B30": {
            "name": "GET_VEHICLE_XMAS_SNOW_FACTOR",
            "params": [],
            "return_type": "float",
            "description": "A getter for [SET_VEHICLE_XMAS_SNOW_FACTOR](#\\_0x80CC4C9E).",
            "examples": [],
            "hash": "0x16605B30",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the grip factor for the vehicles wheels during xmas weather. default value is 0.2."
        },
        "0xDC921211": {
            "name": "IS_VEHICLE_ALARM_SET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xDC921211",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xA411F72C": {
            "name": "IS_VEHICLE_INTERIOR_LIGHT_ON",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA411F72C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xF9933BF4": {
            "name": "IS_VEHICLE_NEEDS_TO_BE_HOTWIRED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF9933BF4",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xF849ED67": {
            "name": "IS_VEHICLE_PREVIOUSLY_OWNED_BY_PLAYER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xF849ED67",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xA7DAF7C": {
            "name": "IS_VEHICLE_WANTED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xA7DAF7C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x3F3EB3F7": {
            "name": "OVERRIDE_REACTION_TO_VEHICLE_SIREN",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggle on or off"
                },
                {
                    "name": "reaction",
                    "type": "int",
                    "description": "Decide how they should react"
                }
            ],
            "return_type": "void",
            "description": "Setting the state to true and a value between 0 and 2 will cause pedestrian vehicles to react accordingly to sirens.\n\n```cpp\nenum Reactions {\r\n    Left = 0,\r\n    Right = 1,\r\n    Stop = 2\r\n}\n```",
            "examples": [],
            "hash": "0x3F3EB3F7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x7FA03E76": {
            "name": "OVERRIDE_VEHICLE_PEDS_CAN_STAND_ON_TOP_FLAG",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle."
                },
                {
                    "name": "can",
                    "type": "BOOL",
                    "description": "Can they?"
                }
            ],
            "return_type": "void",
            "description": "Overrides whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
            "examples": [],
            "hash": "0x7FA03E76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xDF62CFE2": {
            "name": "RESET_VEHICLE_PEDS_CAN_STAND_ON_TOP_FLAG",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle."
                }
            ],
            "return_type": "void",
            "description": "Resets whether or not peds can stand on top of the specified vehicle.\n\nNote this flag is not replicated automatically, you will have to manually do so.",
            "examples": [],
            "hash": "0xDF62CFE2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x79780FD2": {
            "name": "SET_DEFAULT_VEHICLE_NUMBER_PLATE_TEXT_PATTERN",
            "params": [
                {
                    "name": "plateIndex",
                    "type": "int",
                    "description": "A plate index, or `-1` to set a default for any indices that do not have a specific value."
                },
                {
                    "name": "pattern",
                    "type": "const char*",
                    "description": "A number plate pattern string, or a null value to reset to default."
                }
            ],
            "return_type": "void",
            "description": "Sets the default number plate text pattern for vehicles seen on the local client with the specified plate index as their *default* index (`plateProbabilities` from carvariations).\n\nFor consistency, this should be used with the same value on all clients, since vehicles *without* custom text will use a seeded random number generator with this pattern to determine the default plate text.\n\nThe default value is `11AAA111`, and using this or a NULL string will revert to the default game RNG.\n\n### Pattern string format\n\n*   `1` will lead to a random number from 0-9.\n*   `A` will lead to a random letter from A-Z.\n*   `.` will lead to a random letter *or* number, with 50% probability of being either.\n*   `^1` will lead to a literal `1` being emitted.\n*   `^A` will lead to a literal `A` being emitted.\n*   Any other character will lead to said character being emitted.\n*   A string shorter than 8 characters will be padded on the right.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetDefaultVehicleNumberPlateTextPattern(-1, ' AAA111 ')\r\nSetDefaultVehicleNumberPlateTextPattern(4 , ' AAAAAA ')\r\n\r\n-- fixed characters: plate will be FAYUM69C for example\r\nSetDefaultVehicleNumberPlateTextPattern(-1, 'F^AYUM11A')"
                }
            ],
            "hash": "0x79780FD2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFE8064E3": {
            "name": "SET_HANDLING_FIELD",
            "params": [
                {
                    "name": "vehicle",
                    "type": "const char*",
                    "description": "The vehicle class to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "Any",
                    "description": "The value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`",
            "examples": [],
            "hash": "0xFE8064E3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x90DD01C": {
            "name": "SET_HANDLING_FLOAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "const char*",
                    "description": "The vehicle class to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The floating-point value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`",
            "examples": [],
            "hash": "0x90DD01C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x8AB3F46C": {
            "name": "SET_HANDLING_INT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "const char*",
                    "description": "The vehicle class to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The integer value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.",
            "examples": [],
            "hash": "0x8AB3F46C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x7F9D543": {
            "name": "SET_HANDLING_VECTOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "const char*",
                    "description": "The vehicle class to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "Vector3",
                    "description": "The Vector3 value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`",
            "examples": [],
            "hash": "0x7F9D543",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB90BBC6E": {
            "name": "SET_REACTION_TO_VEHICLE_WITH_SIREN_DISABLED",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggle on or off."
                }
            ],
            "return_type": "void",
            "description": "This completely disables pedestrian vehicles from reacting to sirens. They will not try to do any maneuver to evade.",
            "examples": [],
            "hash": "0xB90BBC6E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xD4D1BA63": {
            "name": "SET_TRAINS_FORCE_DOORS_OPEN",
            "params": [
                {
                    "name": "forceOpen",
                    "type": "BOOL",
                    "description": "Should force open."
                }
            ],
            "return_type": "void",
            "description": "Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer.",
            "examples": [],
            "hash": "0xD4D1BA63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2468DBE8": {
            "name": "SET_TRAIN_DOOR_OPEN_RATIO",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train to set the door ratio for."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "description": "Zero-based door index."
                },
                {
                    "name": "ratio",
                    "type": "float",
                    "description": "A value between 0.0 (fully closed) and 1.0 (fully open)."
                }
            ],
            "return_type": "void",
            "description": "Sets the ratio that a door is open for on a train.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- open all doors on a train\r\nlocal doorCount = GetTrainDoorCount(train)\r\nfor doorIndex = 0, doorCount - 1 do\r\n    SetTrainDoorOpenRatio(train, doorIndex, 1.0)\r\nend"
                },
                {
                    "lang": "cs",
                    "code": "// open all doors on a train\r\nint doorCount = API.GetTrainDoorCount(train);\r\nfor (int doorIndex = 0; doorIndex < doorCount; doorIndex++)\r\n{\r\n    API.SetTrainDoorOpenRatio(train, doorIndex, 1.0f);\r\n}"
                }
            ],
            "hash": "0x2468DBE8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x61CB74A0": {
            "name": "SET_TRAIN_STATE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                },
                {
                    "name": "state",
                    "type": "int",
                    "description": "The trains new state"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x61CB74A0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The trains current state, refer to [GET_TRAIN_STATE](#\\_0x81B50033)"
        },
        "0xECB8B577": {
            "name": "SET_TRAIN_STOP_AT_STATIONS",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "True to make the train stop at stations. False to make the train not stop at stations"
                }
            ],
            "return_type": "void",
            "description": "Toggles a train's ability to stop at stations",
            "examples": [],
            "hash": "0xECB8B577",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC108EE6F": {
            "name": "SET_VEHICLE_ALARM_TIME_LEFT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "time",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC108EE6F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x5F3A3574": {
            "name": "SET_VEHICLE_AUTO_REPAIR_DISABLED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set disable auto vehicle repair."
                },
                {
                    "name": "value",
                    "type": "BOOL",
                    "description": "Setting the value to  true prevents the vehicle from being repaired when a extra is enabled. Setting the value to false allows the vehicle from being repaired when a extra is enabled."
                }
            ],
            "return_type": "void",
            "description": "Disables the vehicle from being repaired when a vehicle extra is enabled.",
            "examples": [],
            "hash": "0x5F3A3574",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2F70ACED": {
            "name": "SET_VEHICLE_CLUTCH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "clutch",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x2F70ACED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2A01A8FC": {
            "name": "SET_VEHICLE_CURRENT_RPM",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "rpm",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x2A01A8FC",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x6C93C4A9": {
            "name": "SET_VEHICLE_ENGINE_TEMPERATURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "temperature",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x6C93C4A9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xBA970511": {
            "name": "SET_VEHICLE_FUEL_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "level",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBA970511",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x496EF2F2": {
            "name": "SET_VEHICLE_GEAR_RATIO",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "gear",
                    "type": "int",
                    "description": "The vehicles gear you want to change."
                },
                {
                    "name": "ratio",
                    "type": "float",
                    "description": "The gear ratio you want to use."
                }
            ],
            "return_type": "void",
            "description": "Sets the vehicles gear ratio on choosen gear, reverse gear needs to be a negative float and forward moving gear needs to be a positive float. Refer to the examples if confused.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local function Set8SpeedVehicleGears(Vehicle)\r\n    SetVehicleGearRatio(Vehicle, 0, -3.32)  -- reverse gear at -3.21:1\r\n    SetVehicleGearRatio(Vehicle, 1, 4.71)   -- 1st gear at 4.71:1\r\n    SetVehicleGearRatio(Vehicle, 2, 3.14)   -- 2nd gear at 3.14:1\r\n    SetVehicleGearRatio(Vehicle, 3, 2.11)   -- 3rd gear at 2.11:1\r\n    SetVehicleGearRatio(Vehicle, 4, 1.67)   -- 4th gear at 1.67:1\r\n    SetVehicleGearRatio(Vehicle, 5, 1.29)   -- 5th gear at 1.29:1\r\n    SetVehicleGearRatio(Vehicle, 6, 1.0)    -- 6th gear at 1.0:1\r\n    SetVehicleGearRatio(Vehicle, 7, 0.84)   -- 7th gear at 0.84:1\r\n    SetVehicleGearRatio(Vehicle, 8, 0.67)   -- 8th gear at 0.67:1\r\nend"
                },
                {
                    "lang": "js",
                    "code": "function Set8SpeedVehicleGears(Vehicle) {\r\n    SetVehicleGearRatio(Vehicle, 0, -3.32);  // reverse gear at -3.21:1\r\n    SetVehicleGearRatio(Vehicle, 1, 4.71);   // 1st gear at 4.71:1\r\n    SetVehicleGearRatio(Vehicle, 2, 3.14);   // 2nd gear at 3.14:1\r\n    SetVehicleGearRatio(Vehicle, 3, 2.11);   // 3rd gear at 2.11:1\r\n    SetVehicleGearRatio(Vehicle, 4, 1.67);   // 4th gear at 1.67:1\r\n    SetVehicleGearRatio(Vehicle, 5, 1.29);   // 5th gear at 1.29:1\r\n    SetVehicleGearRatio(Vehicle, 6, 1.0);    // 6th gear at 1.0:1\r\n    SetVehicleGearRatio(Vehicle, 7, 0.84);   // 7th gear at 0.84:1\r\n    SetVehicleGearRatio(Vehicle, 8, 0.67);   // 8th gear at 0.67:1\r\n}"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.API;\r\n\r\npublic static void Set8SpeedVehicleGears(int Vehicle)\r\n{\r\n    SetVehicleGearRatio(Vehicle, 0, -3.32);  // reverse gear at -3.21:1\r\n    SetVehicleGearRatio(Vehicle, 1, 4.71);   // 1st gear at 4.71:1\r\n    SetVehicleGearRatio(Vehicle, 2, 3.14);   // 2nd gear at 3.14:1\r\n    SetVehicleGearRatio(Vehicle, 3, 2.11);   // 3rd gear at 2.11:1\r\n    SetVehicleGearRatio(Vehicle, 4, 1.67);   // 4th gear at 1.67:1\r\n    SetVehicleGearRatio(Vehicle, 5, 1.29);   // 5th gear at 1.29:1\r\n    SetVehicleGearRatio(Vehicle, 6, 1.0);    // 6th gear at 1.0:1\r\n    SetVehicleGearRatio(Vehicle, 7, 0.84);   // 7th gear at 0.84:1\r\n    SetVehicleGearRatio(Vehicle, 8, 0.67);   // 8th gear at 0.67:1\r\n}"
                }
            ],
            "hash": "0x496EF2F2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1A963E58": {
            "name": "SET_VEHICLE_GRAVITY_AMOUNT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "gravity",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1A963E58",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2BA40795": {
            "name": "SET_VEHICLE_HANDLING_FIELD",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "Any",
                    "description": "The value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.\r\nExample: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`",
            "examples": [],
            "hash": "0x2BA40795",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x488C86D2": {
            "name": "SET_VEHICLE_HANDLING_FLOAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The floating-point value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.\r\nExample: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`",
            "examples": [],
            "hash": "0x488C86D2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC37F4CF9": {
            "name": "SET_VEHICLE_HANDLING_INT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The integer value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.",
            "examples": [],
            "hash": "0xC37F4CF9",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x12497890": {
            "name": "SET_VEHICLE_HANDLING_VECTOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "class_",
                    "type": "const char*",
                    "description": "The handling class to set. Only \"CHandlingData\" is supported at this time."
                },
                {
                    "name": "fieldName",
                    "type": "const char*",
                    "description": "The field name to set. These match the keys in `handling.meta`."
                },
                {
                    "name": "value",
                    "type": "Vector3",
                    "description": "The Vector3 value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.",
            "examples": [],
            "hash": "0x12497890",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x20B1B3E6": {
            "name": "SET_VEHICLE_HIGH_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "gear",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x20B1B3E6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xA40CB822": {
            "name": "SET_VEHICLE_NITRO_PTFX_RANGE",
            "params": [
                {
                    "name": "range",
                    "type": "float",
                    "description": "The visible distance. Default is 50.0f."
                }
            ],
            "return_type": "void",
            "description": "Sets the maximum distance in which [\\_SET_VEHICLE_NITRO_ENABLED](#\\_0xC8E9B6B71B8E660D) PTFX are rendered. Distance is measured from the camera position.",
            "examples": [],
            "hash": "0xA40CB822",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x90D1CAD1": {
            "name": "SET_VEHICLE_OIL_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "level",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x90D1CAD1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2A6CC9F2": {
            "name": "SET_VEHICLE_PITCH_BIAS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Target vehicle."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Pitch bias value."
                }
            ],
            "return_type": "void",
            "description": "Set the vehicle's pitch bias. Only works on planes.",
            "examples": [],
            "hash": "0x2A6CC9F2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x264B45DE": {
            "name": "SET_VEHICLE_ROLL_BIAS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Target vehicle."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Roll bias value."
                }
            ],
            "return_type": "void",
            "description": "Set the vehicle's roll bias. Only works on planes.",
            "examples": [],
            "hash": "0x264B45DE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFFCCC2EA": {
            "name": "SET_VEHICLE_STEERING_ANGLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "angle",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xFFCCC2EA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEB46596F": {
            "name": "SET_VEHICLE_STEERING_SCALE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "scale",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xEB46596F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB3439A01": {
            "name": "SET_VEHICLE_SUSPENSION_HEIGHT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "newHeight",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets the height of the vehicle's suspension.\r\nThis changes the same value set by Suspension in the mod shop.\r\nNegatives values raise the car. Positive values lower the car.\n\nThis is change is visual only. The collision of the vehicle will not move.",
            "examples": [],
            "hash": "0xB3439A01",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x6485615E": {
            "name": "SET_VEHICLE_TURBO_PRESSURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "pressure",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x6485615E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xEAB8DB65": {
            "name": "SET_VEHICLE_WHEELIE_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "Vehicle"
                },
                {
                    "name": "state",
                    "type": "int",
                    "description": "Wheelie state"
                }
            ],
            "return_type": "void",
            "description": "Example script: https://pastebin.com/J6XGbkCW\n\nList of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local ped = PlayerPedId()\r\n    local veh = GetVehiclePedIsUsing(ped)\r\n\r\n    if veh ~= 0 then\r\n      -- is vehicle a musclecar\r\n      if GetVehicleClass(veh) == 4 then\r\n        -- is ped a driver\r\n        if GetPedInVehicleSeat(veh, -1) == ped then\r\n          -- don't let vehicle to do wheelie\r\n          SetVehicleWheelieState(veh, 1)\r\n        end\r\n      end\r\n    end\r\n  end\r\nend)"
                }
            ],
            "hash": "0xEAB8DB65",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xE80F4E31": {
            "name": "SET_VEHICLE_WHEEL_BRAKE_PRESSURE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "pressure",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nNormal values around 1.0f",
            "examples": [],
            "hash": "0xE80F4E31",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xD2B9E90D": {
            "name": "SET_VEHICLE_WHEEL_FLAGS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "flags",
                    "type": "int",
                    "description": "bit flags"
                }
            ],
            "return_type": "void",
            "description": "Sets the flags of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xD2B9E90D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xB22ECEFD": {
            "name": "SET_VEHICLE_WHEEL_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "health",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB22ECEFD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xBD5291A0": {
            "name": "SET_VEHICLE_WHEEL_IS_POWERED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "powered",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Sets whether the wheel is powered.\r\nOn all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.\r\nThis is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetVehicleWheelIsPowered(vehicle, 0, true);"
                },
                {
                    "lang": "js",
                    "code": "SetVehicleWheelIsPowered(vehicle, 0, true);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.API;\r\n// ...\r\n// The elusive Left Wheel Drive\r\nVehicle veh = Game.PlayerPed.CurrentVehicle;\r\nfor(int i = 0; i < veh.Wheels.Count; i++){\r\n    SetVehicleWheelIsPowered(veh.Handle, i, i % 2 == 0);\r\n}"
                }
            ],
            "hash": "0xBD5291A0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC6146043": {
            "name": "SET_VEHICLE_WHEEL_POWER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "power",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets power being sent to a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0xC6146043",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF380E184": {
            "name": "SET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Size of rim collider."
                }
            ],
            "return_type": "void",
            "description": "Not sure what this changes, probably determines physical rim size in case the tire is blown.",
            "examples": [],
            "hash": "0xF380E184",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x35ED100D": {
            "name": "SET_VEHICLE_WHEEL_ROTATION_SPEED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "speed",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets the rotation speed of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0x35ED100D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x53AB5C35": {
            "name": "SET_VEHICLE_WHEEL_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "size",
                    "type": "float",
                    "description": "Size of the wheels (usually between 0.5 and 1.5 is reasonable)."
                }
            ],
            "return_type": "BOOL",
            "description": "Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set size for non-default wheels).",
            "examples": [],
            "hash": "0x53AB5C35",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Bool - whether change was successful or not"
        },
        "0xB962D05C": {
            "name": "SET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Radius of tire collider."
                }
            ],
            "return_type": "void",
            "description": "Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).",
            "examples": [],
            "hash": "0xB962D05C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x47BD0270": {
            "name": "SET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain data for."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "Index of wheel, 0-3."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "Width of tire collider."
                }
            ],
            "return_type": "void",
            "description": "Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).",
            "examples": [],
            "hash": "0x47BD0270",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x85C85A3A": {
            "name": "SET_VEHICLE_WHEEL_TRACTION_VECTOR_LENGTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "length",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Sets the traction vector length of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.",
            "examples": [],
            "hash": "0x85C85A3A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x64C3F1C0": {
            "name": "SET_VEHICLE_WHEEL_WIDTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set data for."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "Width of the wheels (usually between 0.1 and 1.5 is reasonable)."
                }
            ],
            "return_type": "BOOL",
            "description": "Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set width for non-default wheels).",
            "examples": [],
            "hash": "0x64C3F1C0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Bool - whether change was successful or not"
        },
        "0xBD6357D": {
            "name": "SET_VEHICLE_WHEEL_X_OFFSET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "offset",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "Adjusts the offset of the specified wheel relative to the wheel's axle center.\r\nNeeds to be called every frame in order to function properly, as GTA will reset the offset otherwise.\r\nThis function can be especially useful to set the track width of a vehicle, for example:\n\n```\nfunction SetVehicleFrontTrackWidth(vehicle, width)\r\nSetVehicleWheelXOffset(vehicle, 0, -width/2)\r\nSetVehicleWheelXOffset(vehicle, 1, width/2)\r\nend\n```",
            "examples": [],
            "hash": "0xBD6357D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xC6C2171F": {
            "name": "SET_VEHICLE_WHEEL_Y_ROTATION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelIndex",
                    "type": "int"
                },
                {
                    "name": "value",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC6C2171F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "aliases": [
                "SET_VEHICLE_WHEEL_XROT"
            ]
        },
        "0x1683E7F0": {
            "name": "SET_VEHICLE_XENON_LIGHTS_CUSTOM_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "red",
                    "type": "int",
                    "description": "Red color (0-255)."
                },
                {
                    "name": "green",
                    "type": "int",
                    "description": "Green color (0-255)."
                },
                {
                    "name": "blue",
                    "type": "int",
                    "description": "Blue color (0-255)."
                }
            ],
            "return_type": "void",
            "description": "Sets custom vehicle xenon lights color, allowing to use RGB palette. The game will ignore lights color set by [\\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\\_0xE41033B25D003A07) when custom color is active. This native is not synced between players. Requires xenon lights mod to be set on vehicle.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsUsing(PlayerPedId())\r\nif DoesEntityExist(vehicle) then\r\n  -- Toggle xenon lights mod.\r\n  ToggleVehicleMod(vehicle, 22, true)\r\n\r\n  -- Set pink lights color.\r\n  SetVehicleXenonLightsCustomColor(vehicle, 244, 5, 82)\r\nend"
                }
            ],
            "hash": "0x1683E7F0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x80CC4C9E": {
            "name": "SET_VEHICLE_XMAS_SNOW_FACTOR",
            "params": [
                {
                    "name": "gripFactor",
                    "type": "float",
                    "description": "amount of grip strength vehicle wheels have when xmas weather is active, 0.0 being normal weather grip. 0.2 is the default."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x80CC4C9E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xA886495D": {
            "name": "GET_HELI_BODY_HEALTH",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "int",
            "description": "**Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.",
            "examples": [],
            "hash": "0xA886495D",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns the current health of the helicopter's body."
        },
        "0x82AFC0A3": {
            "name": "GET_HELI_DISABLE_EXPLODE_FROM_BODY_DAMAGE",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "BOOL",
            "description": "This is a getter for [SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE](#\\_0xEDBC8405B3895CC9)",
            "examples": [],
            "hash": "0x82AFC0A3",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns `true` if the helicopter is set to be protected from exploding due to minor body damage, `false` otherwise."
        },
        "0xA0FA0354": {
            "name": "GET_HELI_ENGINE_HEALTH",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "int",
            "description": "**Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.",
            "examples": [],
            "hash": "0xA0FA0354",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns the current health of the helicopter's engine."
        },
        "0xD4EC7858": {
            "name": "GET_HELI_GAS_TANK_HEALTH",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "int",
            "description": "**Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.",
            "examples": [],
            "hash": "0xD4EC7858",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns the current health of the helicopter's gas tank."
        },
        "0xC37D668": {
            "name": "GET_HELI_MAIN_ROTOR_DAMAGE_SCALE",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xC37D668",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the damage scaling factor applied to the helicopter's main rotor. The value ranges from `0.0` (no damage scaling) to`  1.0 ` (full damage scaling)."
        },
        "0x1944AC95": {
            "name": "GET_HELI_PITCH_CONTROL",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1944AC95",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the pitch control of the helicopter. The values range from `-1.0` (nose down) to `1.0` (nose up), with `0.0` indicating no pitch input."
        },
        "0xC40161E2": {
            "name": "GET_HELI_REAR_ROTOR_DAMAGE_SCALE",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xC40161E2",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the damage scaling factor applied to the helicopter's rear rotor. The value ranges from `0.0` (no damage scaling) to`  1.0 ` (full damage scaling)."
        },
        "0x33EE6E2B": {
            "name": "GET_HELI_REAR_ROTOR_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "float",
            "description": "This native is a getter for [SET_HELI_TAIL_ROTOR_HEALTH](#\\_0xFE205F38AAA58E5B)",
            "examples": [],
            "hash": "0x33EE6E2B",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns the health of the helicopter's rear rotor. The maximum health value is `1000`."
        },
        "0x12948DE9": {
            "name": "GET_HELI_ROLL_CONTROL",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x12948DE9",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the roll control of the helicopter. The values range from `-1.0` (roll left) to `1.0` (roll right), with `0.0` indicating no roll input."
        },
        "0x22239130": {
            "name": "GET_HELI_TAIL_ROTOR_DAMAGE_SCALE",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x22239130",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the damage scaling factor applied to the helicopter's tail rotor. The value ranges from `0.0` (no damage scaling) to`  1.0 ` (full damage scaling)."
        },
        "0xA41BC13D": {
            "name": "GET_HELI_TAIL_ROTOR_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "float",
            "description": "**Note**: This native is deprecated, please use [`GET_HELI_REAR_ROTOR_HEALTH`](#\\_0x33EE6E2B) instead.",
            "examples": [],
            "hash": "0xA41BC13D",
            "ns": "CFX",
            "game": "gta5",
            "apiset": "server",
            "resultsDescription": "Return the health of the rear rotor of the helicopter, not the tail rotor."
        },
        "0x8E86238D": {
            "name": "GET_HELI_THROTTLE_CONTROL",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x8E86238D",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the throttle control of the helicopter. The value ranges from `0.0` (no throttle) to `2.0` (full throttle)."
        },
        "0x8FDC0768": {
            "name": "GET_HELI_YAW_CONTROL",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x8FDC0768",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value the yaw control of the helicopter. The value ranges from `-1.0` (yaw left) to `1.0` (yaw right), with `0.0` meaning no yaw input."
        },
        "0x3EFE38D1": {
            "name": "GET_IS_HELI_ENGINE_RUNNING",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x3EFE38D1",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns `true` if the helicopter's engine is running, `false` if it is not."
        },
        "0x1C939E87": {
            "name": "GET_THRUSTER_SIDE_RCS_THROTTLE",
            "params": [
                {
                    "name": "jetpack",
                    "type": "Vehicle",
                    "description": "The jetpack to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1C939E87",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the side RCS (Reaction Control System) throttle of the jetpack. The values range from `0.0` (no throttle) to `1.0` (full throttle)."
        },
        "0x94E24C96": {
            "name": "GET_THRUSTER_THROTTLE",
            "params": [
                {
                    "name": "jetpack",
                    "type": "Vehicle",
                    "description": "The jetpack to check."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x94E24C96",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns a value representing the main throttle of the jetpack. The values range from `0.0` (no throttle) to `1.0` (full throttle)"
        },
        "0x456E34A": {
            "name": "GET_TRAIN_BACKWARD_CARRIAGE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x456E34A",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "The handle of the carriage behind this train in the chain. Otherwise returns 0 if the train is the caboose of the chain."
        },
        "0x24DC88D9": {
            "name": "GET_TRAIN_FORWARD_CARRIAGE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x24DC88D9",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "The handle of the carriage in front of this train in the chain. Otherwise returns 0 if the train has no carriage in front of it"
        },
        "0xDEA49773": {
            "name": "GET_VEHICLE_HORN_TYPE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check the horn type."
                }
            ],
            "return_type": "Hash",
            "description": "This is a getter for the client-side native [`START_VEHICLE_HORN`](#\\_0x9C8C6504B5B63D2C), which allows you to return the horn type of the vehicle.\n\n**Note**: This native only gets the hash value set with `START_VEHICLE_HORN`. If a wrong hash is passed into `START_VEHICLE_HORN`, it will return this wrong hash.\n\n```cpp\nenum eHornTypes\r\n{\r\n    NORMAL = 1330140148,\r\n    HELDDOWN = -2087385909,\r\n    AGGRESSIVE = -92810745\r\n}\n```",
            "examples": [],
            "hash": "0xDEA49773",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns the vehicle horn type hash, or `0` if one is not set."
        },
        "0x23E46BD7": {
            "name": "IS_HELI_TAIL_BOOM_BREAKABLE",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "BOOL",
            "description": "This is a getter for [SET_HELI_TAIL_EXPLODE_THROW_DASHBOARD](#\\_0x3EC8BF18AA453FE9)",
            "examples": [],
            "hash": "0x23E46BD7",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns `true` if the helicopter's tail boom can break, `false` if it cannot."
        },
        "0x2C59F987": {
            "name": "IS_HELI_TAIL_BOOM_BROKEN",
            "params": [
                {
                    "name": "heli",
                    "type": "Vehicle",
                    "description": "The helicopter to check"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2C59F987",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns `true` if the helicopter's tail boom is broken, `false` if it is intact."
        },
        "0xFA9336E5": {
            "name": "IS_TRAIN_CABOOSE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xFA9336E5",
            "ns": "CFX",
            "apiset": "server",
            "game": "gta5",
            "resultsDescription": "Returns true if the train is the caboose of the chain."
        },
        "0x77CC80DC": {
            "name": "DOES_TRAIN_STOP_AT_STATIONS",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x77CC80DC",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "True if the train stops at stations. False otherwise"
        },
        "0xA4921EF5": {
            "name": "GET_TRAIN_CRUISE_SPEED",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "float",
            "description": "Gets the trains desired speed.",
            "examples": [],
            "hash": "0xA4921EF5",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The desired cruise speed of the train. Not the speed the train is currently traveling at"
        },
        "0x8DAF79B6": {
            "name": "GET_TRAIN_DIRECTION",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets the direction the train is facing",
            "examples": [],
            "hash": "0x8DAF79B6",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "True if the train is moving forward on the track, False otherwise"
        },
        "0x81B50033": {
            "name": "GET_TRAIN_STATE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x81B50033",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The trains current state```cpp\nenum eTrainState\r\n{\r\n    MOVING = 0,\r\n    ENTERING_STATION,\r\n    OPENING_DOORS,\r\n    STOPPED,\r\n    CLOSING_DOORS,\r\n    LEAVING_STATION,\r\n}\n```"
        },
        "0x9AA339D": {
            "name": "GET_TRAIN_TRACK_INDEX",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9AA339D",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The track index the train is currently on."
        },
        "0x483B013C": {
            "name": "GET_VEHICLE_HANDBRAKE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x483B013C",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x1382FCEA": {
            "name": "GET_VEHICLE_STEERING_ANGLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1382FCEA",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xBB340D04": {
            "name": "IS_VEHICLE_ENGINE_STARTING",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBB340D04",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xD85C9F57": {
            "name": "GET_VEHICLE_HAS_FLAG",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to obtain flags for."
                },
                {
                    "name": "flagIndex",
                    "type": "int",
                    "description": "Flag index."
                }
            ],
            "return_type": "BOOL",
            "description": "**Note**: Flags are not the same based on your `gamebuild`. Please see [here](https://docs.fivem.net/docs/game-references/vehicle-references/vehicle-flags) to see a complete list of all vehicle flags.\n\nGet vehicle.meta flag by index. Useful examples include `FLAG_LAW_ENFORCEMENT` (31), `FLAG_RICH_CAR` (36), `FLAG_IS_ELECTRIC` (43), `FLAG_IS_OFFROAD_VEHICLE` (48).",
            "examples": [],
            "hash": "0xD85C9F57",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A boolean for whether the flag is set.### Example```lua\nlocal vehicleFlags = {\r\n    FLAG_SMALL_WORKER = 0,\r\n    FLAG_BIG = 1,\r\n    FLAG_NO_BOOT = 2,\r\n    FLAG_ONLY_DURING_OFFICE_HOURS = 3\r\n    -- This is just a example, see fivem-docs to see all flags.\r\n}\r\n\r\nlocal function getAllVehicleFlags(vehicle)\r\n    local flags = {}\r\n    for i = 0, 256 do\r\n        if GetVehicleHasFlag(vehicle, i) then\r\n            flags[#flags+1] = i\r\n        end\r\n    end\r\n    return flags\r\nend\r\n\r\nlocal flagsVehicle = GetVehiclePedIsIn(PlayerPedId(), false)\r\nprint(getAllVehicleFlags)\n``````javascript\nconst VEHICLE_FLAGS = {\r\n    FLAG_SMALL_WORKER: 0,\r\n    FLAG_BIG: 1,\r\n    FLAG_NO_BOOT: 2,\r\n    FLAG_ONLY_DURING_OFFICE_HOURS: 3\r\n    // This is just a example, see fivem-docs to see all flags.\r\n};\r\n\r\nfunction getAllVehicleFlags(mVehicle = GetVehiclePedIsIn(PlayerPedId(), false)) {\r\n    const flags = [];\r\n    for (let i = 0; i < 204; i++) {\r\n        if (GetVehicleHasFlag(mVehicle, i)) {\r\n            flags.push(i);\r\n        }\r\n    }\r\n    return flags;\r\n}\r\n\r\nlet flagsVehicle = GetVehiclePedIsIn(PlayerPedId(), false);\r\nconsole.log(getAllVehicleFlags);\n```"
        },
        "0xDE73BC10": {
            "name": "GET_VEHICLE_TYPE_RAW",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle's entity handle."
                }
            ],
            "return_type": "int",
            "description": "Returns the model type of the vehicle as defined by:\n\n```cpp\nenum VehicleType\r\n{\r\n\tVEHICLE_TYPE_NONE = -1,\r\n\tVEHICLE_TYPE_CAR = 0,\r\n\tVEHICLE_TYPE_PLANE = 1,\r\n\tVEHICLE_TYPE_TRAILER = 2,\r\n\tVEHICLE_TYPE_QUADBIKE = 3,\r\n\tVEHICLE_TYPE_DRAFT = 4,\r\n\tVEHICLE_TYPE_SUBMARINECAR = 5,\r\n\tVEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE = 6,\r\n\tVEHICLE_TYPE_AMPHIBIOUS_QUADBIKE = 7,\r\n\tVEHICLE_TYPE_HELI = 8,\r\n\tVEHICLE_TYPE_BLIMP = 9,\r\n\tVEHICLE_TYPE_AUTOGYRO = 10,\r\n\tVEHICLE_TYPE_BIKE = 11,\r\n\tVEHICLE_TYPE_BICYCLE = 12,\r\n\tVEHICLE_TYPE_BOAT = 13,\r\n\tVEHICLE_TYPE_TRAIN = 14,\r\n\tVEHICLE_TYPE_SUBMARINE = 15,\r\n};\n```",
            "examples": [],
            "hash": "0xDE73BC10",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns the vehicles model type"
        },
        "0xCF1BC668": {
            "name": "IS_VEHICLE_WHEEL_BROKEN_OFF",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "wheelIndex",
                    "type": "int",
                    "description": "The wheel index."
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [BREAK_OFF_VEHICLE_WHEEL](?\\_0xA274CADB).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(PlayerPedId())\r\n\r\nif DoesEntityExist(vehicle) then\r\n  local isWheelBroken = IsVehicleWheelBrokenOff(vehicle, 1)\r\n  print(\"Is wheel 1 broken? \", isWheelBroken)\r\nend"
                }
            ],
            "hash": "0xCF1BC668",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x8923DD42": {
            "name": "SET_VEHICLE_CURRENT_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "gear",
                    "type": "int",
                    "description": "The gear you want the vehicle to use."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x8923DD42",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x63AE1A34": {
            "name": "SET_VEHICLE_FLAG",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set flag for."
                },
                {
                    "name": "flagIndex",
                    "type": "int",
                    "description": "Flag index."
                },
                {
                    "name": "value",
                    "type": "BOOL",
                    "description": "`true` to enable the flag, `false` to disable it."
                }
            ],
            "return_type": "BOOL",
            "description": "This native is a setter for [`GET_VEHICLE_HAS_FLAG`](#\\_0xD85C9F57).",
            "examples": [],
            "hash": "0x63AE1A34",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3A4566F4": {
            "name": "SET_VEHICLE_NEXT_GEAR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle handle."
                },
                {
                    "name": "nextGear",
                    "type": "int",
                    "description": "The vehicles next gear."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3A4566F4",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xDD75460A": {
            "name": "CREATE_VEHICLE",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of vehicle to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the vehicle. If false, the vehicle exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the vehicle as pinned to the script host in the R\\* network model."
                }
            ],
            "return_type": "Entity",
            "description": "Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating\r\nscript as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n```\nNativeDB Added Parameter 8: BOOL p7\n```\n\n**This is the server-side RPC native equivalent of the client native [CREATE_VEHICLE](?\\_0xAF35D0D2583051B0).**",
            "examples": [],
            "hash": "0xDD75460A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created."
        },
        "0x6AE51D4B": {
            "name": "CREATE_VEHICLE_SERVER_SETTER",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of vehicle to spawn."
                },
                {
                    "name": "type",
                    "type": "char*",
                    "description": "The appropriate vehicle type for the model info. Can be one of `automobile`, `bike`, `boat`, `heli`, `plane`, `submarine`, `trailer`, and (potentially), `train`. This should be the same type as the `type` field in `vehicles.meta`."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                }
            ],
            "return_type": "Vehicle",
            "description": "Equivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for\r\nreliability concerns regarding entity creation RPC.\n\nUnlike CREATE_AUTOMOBILE, this supports other vehicle types as well.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local heli = CreateVehicleServerSetter(`seasparrow`, 'heli', GetEntityCoords(GetPlayerPed(GetPlayers()[1])) + vector3(0, 0, 15), 0.0)\r\nprint(GetEntityCoords(heli)) -- should return correct coordinates"
                }
            ],
            "hash": "0x6AE51D4B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle for the vehicle, or 0 if the vehicle failed to be created."
        },
        "0x523BA3DA": {
            "name": "DELETE_TRAIN",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The carriage to delete."
                }
            ],
            "return_type": "void",
            "description": "Deletes the specified `entity` and any carriage its attached to, or that is attached to it.",
            "examples": [],
            "hash": "0x523BA3DA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x43F15989": {
            "name": "DOES_BOAT_SINK_WHEN_WRECKED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x43F15989",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns whether or not the boat sinks when wrecked."
        },
        "0x332169F5": {
            "name": "GET_ALL_VEHICLES",
            "params": [],
            "return_type": "Object",
            "description": "Returns all vehicle handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [],
            "hash": "0x332169F5",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of vehicle handles."
        },
        "0x7DC6D022": {
            "name": "GET_IS_VEHICLE_ENGINE_RUNNING",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7DC6D022",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xD7EC8760": {
            "name": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD7EC8760",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x288AD228": {
            "name": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x288AD228",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xA6F02670": {
            "name": "GET_LANDING_GEAR_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "return_type": "int",
            "description": "See the client-side [GET_LANDING_GEAR_STATE](#\\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.",
            "examples": [],
            "hash": "0xA6F02670",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The current state of the vehicles landing gear."
        },
        "0x95070FA": {
            "name": "GET_TRAIN_CARRIAGE_ENGINE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The entity handle."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x95070FA",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The train engine carriage."
        },
        "0x4B8285CF": {
            "name": "GET_TRAIN_CARRIAGE_INDEX",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The entity handle."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x4B8285CF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The carriage index. -1 returned if invalid result."
        },
        "0x2B2FCC28": {
            "name": "GET_VEHICLE_BODY_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x2B2FCC28",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x40D82D88": {
            "name": "GET_VEHICLE_COLOURS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "colorPrimary",
                    "type": "int*"
                },
                {
                    "name": "colorSecondary",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x40D82D88",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x1C2B9FEF": {
            "name": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "r",
                    "type": "int*"
                },
                {
                    "name": "g",
                    "type": "int*"
                },
                {
                    "name": "b",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1C2B9FEF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x3FF247A2": {
            "name": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "r",
                    "type": "int*"
                },
                {
                    "name": "g",
                    "type": "int*"
                },
                {
                    "name": "b",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FF247A2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xA0DBD08D": {
            "name": "GET_VEHICLE_DASHBOARD_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "color",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xA0DBD08D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xFD15C065": {
            "name": "GET_VEHICLE_DIRT_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xFD15C065",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x1DC50247": {
            "name": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "Currently it only works when set to \"all players\".",
            "examples": [],
            "hash": "0x1DC50247",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xD72CEF2": {
            "name": "GET_VEHICLE_DOOR_LOCK_STATUS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "A vehicle handle."
                }
            ],
            "return_type": "int",
            "description": "```lua\nenum_VehicleLockStatus = {\r\n    None = 0,\r\n    Locked = 2,\r\n    LockedForPlayer = 3,\r\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\r\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\r\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\r\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\r\n}\n```\n\nIt should be [noted](https://forum.cfx.re/t/4863241) that while the [client-side command](#\\_0x25BC98A59C2EA962) and its\r\nsetter distinguish between states 0 (unset) and 1 (unlocked), the game will synchronize both as state 0, so the server-side\r\ncommand will return only '0' if unlocked.",
            "examples": [],
            "hash": "0xD72CEF2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The door lock status for the specified vehicle."
        },
        "0x6E35C49C": {
            "name": "GET_VEHICLE_DOOR_STATUS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "doorIndex",
                    "type": "int",
                    "annotations": {
                        "cs_split": true
                    },
                    "description": "Index of door to check (0-6)."
                }
            ],
            "return_type": "int",
            "description": "Returns the open position of the specified door on the target vehicle.",
            "examples": [],
            "hash": "0x6E35C49C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A number from 0 to 7."
        },
        "0x8880038A": {
            "name": "GET_VEHICLE_ENGINE_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x8880038A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x80E4659B": {
            "name": "GET_VEHICLE_EXTRA_COLOURS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "pearlescentColor",
                    "type": "int*"
                },
                {
                    "name": "wheelColor",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x80E4659B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xAD40AD55": {
            "name": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "return_type": "float",
            "description": "Gets the flight nozzel position for the specified vehicle. See the client-side [\\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\\_0xDA62027C8BDB326E) native for usage examples.",
            "examples": [],
            "hash": "0xAD40AD55",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The flight nozzel position between 0.0 (flying normally) and 1.0 (VTOL mode)"
        },
        "0xD7147656": {
            "name": "GET_VEHICLE_HEADLIGHTS_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xD7147656",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xFBDE9FD8": {
            "name": "GET_VEHICLE_HOMING_LOCKON_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "return_type": "int",
            "description": "Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\\_0xE6B0E8CFC3633BF0) native for a description of lock on states.",
            "examples": [],
            "hash": "0xFBDE9FD8",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The lock on state."
        },
        "0xCCFF3B6E": {
            "name": "GET_VEHICLE_INTERIOR_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "color",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCCFF3B6E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x7C278621": {
            "name": "GET_VEHICLE_LIGHTS_STATE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "lightsOn",
                    "type": "BOOL*"
                },
                {
                    "name": "highbeamsOn",
                    "type": "BOOL*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7C278621",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xEC82A51D": {
            "name": "GET_VEHICLE_LIVERY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xEC82A51D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x4A557117": {
            "name": "GET_VEHICLE_LOCK_ON_TARGET",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                }
            ],
            "return_type": "Vehicle",
            "description": "Gets the vehicle that is locked on to for the specified vehicle.",
            "examples": [],
            "hash": "0x4A557117",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The vehicle that is locked on. 0 returned if no vehicle is locked on."
        },
        "0xD9319DCB": {
            "name": "GET_VEHICLE_NEON_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "red",
                    "type": "int*",
                    "description": "Pointer to an integer where the red component of the neon color will be stored."
                },
                {
                    "name": "green",
                    "type": "int*",
                    "description": "Pointer to an integer where the green component of the neon color will be stored."
                },
                {
                    "name": "blue",
                    "type": "int*",
                    "description": "Pointer to an integer where the blue component of the neon color will be stored."
                }
            ],
            "return_type": "void",
            "description": "Getter to check the neon colour of a vehicle. This native is the server side getter of [GET_VEHICLE_NEON_LIGHTS_COLOUR](#\\_0x7619EEE8C886757F).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false) -- 1 is the source here\r\nlocal red, green, blue = GetVehicleNeonColour(vehicle)\r\nprint(red, green, blue)"
                },
                {
                    "lang": "js",
                    "code": "const vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false); // 1 is the source here\r\nconst [red, green, blue] = GetVehicleNeonColour(vehicle);\r\nconsole.log(red, green, blue);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\r\n\r\nint vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false); // 1 is the source here\r\nint red, green, blue;\r\nGetVehicleNeonColour(vehicle, out red, out green, out blue);\r\nDebug.WriteLine($\"{red}, {green}, {blue}\");"
                }
            ],
            "hash": "0xD9319DCB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "None. The neon color values are retrieved and stored in the `red`, `green`, and `blue` pointers. Make sure to store the returned values in variables for further use."
        },
        "0x684BDBF2": {
            "name": "GET_VEHICLE_NEON_ENABLED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to check."
                },
                {
                    "name": "neonIndex",
                    "type": "int",
                    "description": "A value from the neonIndex enum representing the neon light to check."
                }
            ],
            "return_type": "BOOL",
            "description": "Getter to check if one of the neon lights of a vehicle is enabled. This native is the server side getter of [IS_VEHICLE_NEON_LIGHT_ENABLED](#\\_0x8C4B92553E4766A5).\n\n```cpp\nenum neonIndex\r\n{\r\n    NEON_BACK = 0,   // Back neon\r\n    NEON_RIGHT = 1,  // Right neon\r\n    NEON_LEFT = 2,   // Left neon\r\n    NEON_FRONT = 3   // Front neon\r\n};\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false) -- 1 is the source here\r\nlocal isRightNeonOn = GetVehicleNeonEnabled(vehicle, 1)\r\nprint(isRightNeonOn)"
                },
                {
                    "lang": "js",
                    "code": "const vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false); // 1 is the source here\r\nconst isRightNeonOn = GetVehicleNeonEnabled(vehicle, 1);\r\nconsole.log(isRightNeonOn);"
                },
                {
                    "lang": "cs",
                    "code": "using static CitizenFX.Core.Native.API;\r\n\r\nint vehicle = GetVehiclePedIsIn(GetPlayerPed(1), false); // 1 is the source here\r\nbool isRightNeonOn = GetVehicleNeonEnabled(vehicle, 1);\r\nDebug.WriteLine($\"{isRightNeonOn}\");"
                }
            ],
            "hash": "0x684BDBF2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns `true` if the specified neon light is enabled, `false` otherwise."
        },
        "0xE8522D58": {
            "name": "GET_VEHICLE_NUMBER_PLATE_TEXT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xE8522D58",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x499747B6": {
            "name": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x499747B6",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xAFE92319": {
            "name": "GET_VEHICLE_PED_IS_IN",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                },
                {
                    "name": "lastVehicle",
                    "type": "BOOL",
                    "description": "False = CurrentVehicle, True = LastVehicle"
                }
            ],
            "return_type": "Vehicle",
            "description": "Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0xAFE92319",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The vehicle id. Returns 0 if the ped is/was not in a vehicle."
        },
        "0xE41595CE": {
            "name": "GET_VEHICLE_PETROL_TANK_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xE41595CE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x57037960": {
            "name": "GET_VEHICLE_RADIO_STATION_INDEX",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x57037960",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x872CF42": {
            "name": "GET_VEHICLE_ROOF_LIVERY",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x872CF42",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x9963D5F9": {
            "name": "GET_VEHICLE_TOTAL_REPAIRS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9963D5F9",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns the total amount of repairs. Each repair will increase the count to make it possible to detect client repairs.\r\nThe value has a range from 0 to 15. Next value after 15 is 0."
        },
        "0x75280015": {
            "name": "GET_VEHICLE_TYRE_SMOKE_COLOR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "r",
                    "type": "int*"
                },
                {
                    "name": "g",
                    "type": "int*"
                },
                {
                    "name": "b",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x75280015",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xDA58D7AE": {
            "name": "GET_VEHICLE_WHEEL_TYPE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xDA58D7AE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x13D53892": {
            "name": "GET_VEHICLE_WINDOW_TINT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x13D53892",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xB8AF3137": {
            "name": "HAS_VEHICLE_BEEN_DAMAGED_BY_BULLETS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xB8AF3137",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns whether or not the target vehicle has been damaged by bullets."
        },
        "0xE4E83A5B": {
            "name": "HAS_VEHICLE_BEEN_OWNED_BY_PLAYER",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE4E83A5B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xD5C39EE6": {
            "name": "IS_BOAT_ANCHORED_AND_FROZEN",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xD5C39EE6",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns whether or not the boat is anchored and frozen."
        },
        "0x9049DB44": {
            "name": "IS_BOAT_WRECKED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x9049DB44",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns whether or not the boat is wrecked."
        },
        "0x42098B5": {
            "name": "IS_VEHICLE_EXTRA_TURNED_ON",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "extraId",
                    "type": "int"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x42098B5",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x25EB5873": {
            "name": "IS_VEHICLE_SIREN_ON",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x25EB5873",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x48C80210": {
            "name": "IS_VEHICLE_TYRE_BURST",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "wheelID",
                    "type": "int"
                },
                {
                    "name": "completely",
                    "type": "BOOL"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x48C80210",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xAC4EF23D": {
            "name": "IS_VEHICLE_WINDOW_INTACT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "windowIndex",
                    "type": "int",
                    "description": "The window index."
                }
            ],
            "return_type": "BOOL",
            "description": "See the client-side [IS_VEHICLE_WINDOW_INTACT](#\\_0x46E571A0E20D01F1) for a window indexes list.",
            "examples": [],
            "hash": "0xAC4EF23D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x24877D84": {
            "name": "SET_VEHICLE_ALARM",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "state",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "SET_VEHICLE_ALARM\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_ALARM](?\\_0xCDE5E70C1DDB954C).**",
            "examples": [],
            "hash": "0x24877D84",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x920C2517": {
            "name": "SET_VEHICLE_BODY_HEALTH",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "value",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "```\np2 often set to 1000.0 in the decompiled scripts.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_BODY_HEALTH](?\\_0xB77D05AC8C78AADB).**",
            "examples": [],
            "hash": "0x920C2517",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x57F24253": {
            "name": "SET_VEHICLE_COLOURS",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "colorPrimary",
                    "type": "int"
                },
                {
                    "name": "colorSecondary",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "colorPrimary & colorSecondary are the paint indexes for the vehicle.\r\nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOURS](?\\_0x4F1D4BE3A7F24601).**",
            "examples": [],
            "hash": "0x57F24253",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA557AEAD": {
            "name": "SET_VEHICLE_COLOUR_COMBINATION",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to modify."
                },
                {
                    "name": "colorCombination",
                    "type": "int",
                    "description": "One of the default color values of the vehicle."
                }
            ],
            "return_type": "void",
            "description": "Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\r\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOUR_COMBINATION](?\\_0x33E8CD3322E2FE31).**",
            "examples": [],
            "hash": "0xA557AEAD",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DF9F9BC": {
            "name": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "r",
                    "type": "int"
                },
                {
                    "name": "g",
                    "type": "int"
                },
                {
                    "name": "b",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_PRIMARY_COLOUR](?\\_0x7141766F91D15BEA).**",
            "examples": [],
            "hash": "0x8DF9F9BC",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9D77259E": {
            "name": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "r",
                    "type": "int"
                },
                {
                    "name": "g",
                    "type": "int"
                },
                {
                    "name": "b",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_SECONDARY_COLOUR](?\\_0x36CED73BFED89754).**",
            "examples": [],
            "hash": "0x9D77259E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2B39128B": {
            "name": "SET_VEHICLE_DIRT_LEVEL",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set."
                },
                {
                    "name": "dirtLevel",
                    "type": "float",
                    "description": "A number between 0.0 and 15.0 representing the vehicles dirt level."
                }
            ],
            "return_type": "void",
            "description": "Sets the dirt level of the passed vehicle.\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DIRT_LEVEL](?\\_0x79D3B596FE44EE8B).**",
            "examples": [],
            "hash": "0x2B39128B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x4CDD35D0": {
            "name": "SET_VEHICLE_DOORS_LOCKED",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle whose doors are to be locked."
                },
                {
                    "name": "doorLockStatus",
                    "type": "int",
                    "description": "The lock state to apply to the vehicle's doors, see `eVehicleLockState`."
                }
            ],
            "return_type": "void",
            "description": "Locks the doors of a specified vehicle to a defined lock state, affecting how players and NPCs can interact with the vehicle.\n\n```\nNativeDB Introduced: v323\n```\n\n```cpp\nenum eVehicleLockState {\r\n// No specific lock state, vehicle behaves according to the game's default settings.\r\nVEHICLELOCK_NONE = 0,\r\n// Vehicle is fully unlocked, allowing free entry by players and NPCs.\r\nVEHICLELOCK_UNLOCKED = 1,\r\n// Vehicle is locked, preventing entry by players and NPCs.\r\nVEHICLELOCK_LOCKED = 2,\r\n// Vehicle locks out only players, allowing NPCs to enter.\r\nVEHICLELOCK_LOCKOUT_PLAYER_ONLY = 3,\r\n// Vehicle is locked once a player enters, preventing others from entering.\r\nVEHICLELOCK_LOCKED_PLAYER_INSIDE = 4,\r\n// Vehicle starts in a locked state, but may be unlocked through game events.\r\nVEHICLELOCK_LOCKED_INITIALLY = 5,\r\n// Forces the vehicle's doors to shut and lock.\r\nVEHICLELOCK_FORCE_SHUT_DOORS = 6,\r\n// Vehicle is locked but can still be damaged.\r\nVEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7,\r\n// Vehicle is locked, but its trunk/boot remains unlocked.\r\nVEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED = 8,\r\n// Vehicle is locked and does not allow passengers, except for the driver.\r\nVEHICLELOCK_LOCKED_NO_PASSENGERS = 9,\r\n// Vehicle is completely locked, preventing entry entirely, even if previously inside.\r\nVEHICLELOCK_CANNOT_ENTER = 10\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOORS_LOCKED](?\\_0xB664292EAECF7FA6).**",
            "examples": [],
            "hash": "0x4CDD35D0",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8147FEA7": {
            "name": "SET_VEHICLE_DOOR_BROKEN",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "doorIndex",
                    "type": "int"
                },
                {
                    "name": "deleteDoor",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\\_0x93D9BD300D7789E5)\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOOR_BROKEN](?\\_0xD4D4F6A4AB575A33).**",
            "examples": [],
            "hash": "0x8147FEA7",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x400F9556": {
            "name": "SET_VEHICLE_NUMBER_PLATE_TEXT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle to set the plate for"
                },
                {
                    "name": "plateText",
                    "type": "const char*",
                    "description": "The text to set the plate to, 8 chars maximum"
                }
            ],
            "return_type": "void",
            "description": "SET_VEHICLE_NUMBER_PLATE_TEXT\n\n**This is the server-side RPC native equivalent of the client native [SET_VEHICLE_NUMBER_PLATE_TEXT](?\\_0x95A88F0B409CDA47).**",
            "examples": [],
            "hash": "0x400F9556",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA273060E": {
            "name": "GET_VEHICLE_TYPE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle's entity handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the type of the passed vehicle.\n\nFor client scripts, reference the more detailed [GET_VEHICLE_TYPE_RAW](#\\_0xDE73BC10) native.\n\n### Vehicle types\n\n*   automobile\n*   bike\n*   boat\n*   heli\n*   plane\n*   submarine\n*   trailer\n*   train",
            "examples": [],
            "hash": "0xA273060E",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "If the entity is a vehicle, the vehicle type. If it is not a vehicle, the return value will be null."
        }
    },
    "WATER": {
        "0xEB1C6DD": {
            "name": "CREATE_DRY_VOLUME",
            "params": [
                {
                    "name": "xMin",
                    "type": "float",
                    "description": "The min X component of the AABB volume where water does not affect the player."
                },
                {
                    "name": "yMin",
                    "type": "float",
                    "description": "The min Y component for the AABB volume."
                },
                {
                    "name": "zMin",
                    "type": "float",
                    "description": "The min Z component for the AABB volume."
                },
                {
                    "name": "xMax",
                    "type": "float",
                    "description": "The max X component for the AABB volume."
                },
                {
                    "name": "yMax",
                    "type": "float",
                    "description": "The max Y component for the AABB volume."
                },
                {
                    "name": "zMax",
                    "type": "float",
                    "description": "The max Z component for the AABB volume."
                }
            ],
            "return_type": "int",
            "description": "Creates a volume where water effects do not apply.\r\nUseful for preventing water collisions from flooding areas underneath them.\r\nThis has no effect on waterquads, only water created from drawables and collisions.\r\nDon't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)",
            "examples": [],
            "hash": "0xEB1C6DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x14088095": {
            "name": "GET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int*",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int*",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int*",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int*",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, a0, a1, a2, a3 = GetWaterQuadAlpha(0)"
                }
            ],
            "hash": "0x14088095",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Alpha values are undefined on failure"
        },
        "0x17321452": {
            "name": "GET_WATER_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a water quad if the given point is inside its bounds.\n\n*If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\\_0xF8E03DB8)*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x17321452",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF8E03DB8": {
            "name": "GET_WATER_QUAD_AT_COORDS_3D",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "int",
            "description": "This alternative implementation of [`GetWaterQuadAtCoords`](#\\_0x17321452) also checks the height of the water level.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y, currentPedPosition.z)"
                }
            ],
            "hash": "0xF8E03DB8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there. Also returns -1 if the given point is above the water level."
        },
        "0x42E9A06A": {
            "name": "GET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaterQuadBounds(1)"
                }
            ],
            "hash": "0x42E9A06A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0xB1884159": {
            "name": "GET_WATER_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waterQuadCount = GetWaterQuadCount()"
                }
            ],
            "hash": "0xB1884159",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of water quads loaded."
        },
        "0x22EA3BD8": {
            "name": "GET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, hasLimitedDepth = GetWaterQuadHasLimitedDepth(0)"
                }
            ],
            "hash": "0x22EA3BD8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has a limited depth."
        },
        "0x1DEDBD77": {
            "name": "GET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, isInvisible = GetWaterQuadIsInvisible(0)"
                }
            ],
            "hash": "0x1DEDBD77",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad is invisible"
        },
        "0x6523816B": {
            "name": "GET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The returned water quad level"
                },
                {
                    "name": "waterQuadLevel",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "*level is defined as \"z\" in water.xml*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, waterQuadLevel = GetWaterQuadLevel(0)"
                }
            ],
            "hash": "0x6523816B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Level is undefined on failure"
        },
        "0x6F4ACBA": {
            "name": "GET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, noStencil = GetWaterQuadNoStencil(0)"
                }
            ],
            "hash": "0x6F4ACBA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has no stencil."
        },
        "0xE2501B8B": {
            "name": "GET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "waterType",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "Valid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, type = GetWaterQuadType(0)"
                }
            ],
            "hash": "0xE2501B8B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Type is undefined on failure"
        },
        "0x865139A3": {
            "name": "GET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "waveQuadAmplitude",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, amplitude = GetWaveQuadAmplitude(1)"
                }
            ],
            "hash": "0x865139A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Amplitude is undefined on failure"
        },
        "0x3F5A61A7": {
            "name": "GET_WAVE_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a wave quad if the given point is inside its bounds.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waveQuadIndex = GetWaveQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x3F5A61A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The wave quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF86136DB": {
            "name": "GET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaveQuadBounds(1)"
                }
            ],
            "hash": "0xF86136DB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0x9250C76": {
            "name": "GET_WAVE_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waveQuadCount = GetWaveQuadCount()"
                }
            ],
            "hash": "0x9250C76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of wave quads loaded."
        },
        "0xCCE49A1C": {
            "name": "GET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float*",
                    "description": "The wave quad X direction"
                },
                {
                    "name": "directionY",
                    "type": "float*",
                    "description": "The wave quad Y direction"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, directionX, directionY = GetWaveQuadDirection(1)"
                }
            ],
            "hash": "0xCCE49A1C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Direction values are undefined on failure"
        },
        "0xF5102568": {
            "name": "LOAD_WATER_FROM_PATH",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource containing your modified water definition"
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The name of the file"
                }
            ],
            "return_type": "BOOL",
            "description": "Define the xml in a resources fxmanifest, under the file(s) section.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = LoadWaterFromPath('my-resource-name', 'water-all-over-the-place.xml')"
                }
            ],
            "hash": "0xF5102568",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x7BCAA6E7": {
            "name": "REMOVE_DRY_VOLUME",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The handle of the dry volume that needs to be removed."
                }
            ],
            "return_type": "void",
            "description": "Removes a dry volume from the game session.\r\nSee CREATE_DRY_VOLUME for more info",
            "examples": [],
            "hash": "0x7BCAA6E7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1DA4791": {
            "name": "RESET_WATER",
            "params": [],
            "return_type": "void",
            "description": "Resets the water to the games default water.xml.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "ResetWater()"
                }
            ],
            "hash": "0x1DA4791",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9FCD2EE6": {
            "name": "SET_WATER_AREA_CLIP_RECT",
            "params": [
                {
                    "name": "minX",
                    "type": "int"
                },
                {
                    "name": "minY",
                    "type": "int"
                },
                {
                    "name": "maxX",
                    "type": "int"
                },
                {
                    "name": "maxY",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)\r\nUsed internally by LOAD_GLOBAL_WATER_FILE",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetWaterAreaClipRect(-4000, -4000, 4500, 8000)"
                }
            ],
            "hash": "0x9FCD2EE6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF49797EB": {
            "name": "SET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadAlpha(0, 5, 5, 5, 5)"
                }
            ],
            "hash": "0xF49797EB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x80AD144C": {
            "name": "SET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadBounds(0, -5000.0, -5000.0, 5000.0, 5000.0)"
                }
            ],
            "hash": "0x80AD144C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xD1FDCFC1": {
            "name": "SET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadHasLimitedDepth(0, true)"
                }
            ],
            "hash": "0xD1FDCFC1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xA387D917": {
            "name": "SET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadIsInvisible(0, true)"
                }
            ],
            "hash": "0xA387D917",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x6292F7A8": {
            "name": "SET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "level",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadLevel(0, 55.0)"
                }
            ],
            "hash": "0x6292F7A8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xC3FF42FF": {
            "name": "SET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadNoStencil(0, true)"
                }
            ],
            "hash": "0xC3FF42FF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x50131EB2": {
            "name": "SET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "type",
                    "type": "int",
                    "description": "The water quad type"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the water quad type.\n\nValid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadType(0, 0)"
                }
            ],
            "hash": "0x50131EB2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xE4174B7B": {
            "name": "SET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "amplitude",
                    "type": "float",
                    "description": "The amplitude value"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadAmplitude(0, 1.0)"
                }
            ],
            "hash": "0xE4174B7B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x1FCC1FAF": {
            "name": "SET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadBounds(0, -5000, -5000, 5000, 5000)"
                }
            ],
            "hash": "0x1FCC1FAF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xFC9341A3": {
            "name": "SET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float",
                    "description": "The minX coordinate"
                },
                {
                    "name": "directionY",
                    "type": "float",
                    "description": "The minY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "directionX/Y should be constrained between -1.0 and 1.0\r\nA positive value will create the wave starting at min and rolling towards max\r\nA negative value will create the wave starting at max and rolling towards min\r\nApplying both values allows you to make diagonal waves",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadDirection(0, 0.3, 0.1)"
                }
            ],
            "hash": "0xFC9341A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        }
    },
    "WEAPON": {
        "0x5343721": {
            "name": "GET_WEAPON_ACCURACY_SPREAD",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for the accuracy spread of a weapon.",
            "examples": [],
            "hash": "0x5343721",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The accuracy spread of a weapon."
        },
        "0x63ED2E7": {
            "name": "GET_WEAPON_ANIMATION_OVERRIDE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "A getter for [SET_WEAPON_ANIMATION_OVERRIDE](#\\_0x1055AC3A667F09D9).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local weaponAnimation = GetWeaponAnimationOverride(PlayerPedId())"
                }
            ],
            "hash": "0x63ED2E7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The weapon animation override."
        },
        "0xC693E278": {
            "name": "GET_WEAPON_COMPONENT_ACCURACY_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponAccuracyModifier` in a weapon component.",
            "examples": [],
            "hash": "0xC693E278",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component accuracy modifier."
        },
        "0xACB7E68F": {
            "name": "GET_WEAPON_COMPONENT_CAMERA_HASH",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `CameraHash` in a weapon scope component.",
            "examples": [],
            "hash": "0xACB7E68F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The hash of the scope camera."
        },
        "0xE14CF665": {
            "name": "GET_WEAPON_COMPONENT_CLIP_SIZE",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `ClipSize` in a weapon component.",
            "examples": [],
            "hash": "0xE14CF665",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component clip size."
        },
        "0x4A0E3855": {
            "name": "GET_WEAPON_COMPONENT_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponDamageModifier` in a weapon component.",
            "examples": [],
            "hash": "0x4A0E3855",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component damage modifier."
        },
        "0xE134FB8D": {
            "name": "GET_WEAPON_COMPONENT_RANGE_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.",
            "examples": [],
            "hash": "0xE134FB8D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component damage modifier."
        },
        "0x2FD0BC1B": {
            "name": "GET_WEAPON_COMPONENT_RANGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.",
            "examples": [],
            "hash": "0x2FD0BC1B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component range modifier."
        },
        "0xF9AB9297": {
            "name": "GET_WEAPON_COMPONENT_RETICULE_HASH",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `ReticuleHash` in a weapon scope component.",
            "examples": [],
            "hash": "0xF9AB9297",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The hash of the reticule camera."
        },
        "0xD979143": {
            "name": "GET_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for [\\_SET_WEAPON_DAMAGE_MODIFIER](#\\_0x4757F00BC6323CFE).",
            "examples": [],
            "hash": "0xD979143",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon damage modifier."
        },
        "0x5E1AF5F": {
            "name": "GET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for the recoil shake amplitude of a weapon.",
            "examples": [],
            "hash": "0x5E1AF5F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The recoil shake amplitude of a weapon."
        },
        "0xDFD8F6DE": {
            "name": "SET_WEAPONS_NO_AIM_BLOCKING",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables weapons aim blocking due to environment for local player.\r\nFor non-player peds [SET_PED_ENABLE_WEAPON_BLOCKING](#\\_0x97A790315D3831FD) can be used.",
            "examples": [],
            "hash": "0xDFD8F6DE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x311150E5": {
            "name": "SET_WEAPONS_NO_AUTORELOAD",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables the game's built-in auto-reloading.",
            "examples": [],
            "hash": "0x311150E5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2A7B50E": {
            "name": "SET_WEAPONS_NO_AUTOSWAP",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables autoswapping to another weapon when the current weapon runs out of ammo.",
            "examples": [],
            "hash": "0x2A7B50E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x598DD6AE": {
            "name": "SET_WEAPON_ACCURACY_SPREAD",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                },
                {
                    "name": "spread",
                    "type": "float",
                    "description": "Accuracy spread"
                }
            ],
            "return_type": "void",
            "description": "A setter for the accuracy spread of a weapon.",
            "examples": [],
            "hash": "0x598DD6AE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9864312F": {
            "name": "SET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                },
                {
                    "name": "amplitude",
                    "type": "float",
                    "description": "Recoil shake amplitude"
                }
            ],
            "return_type": "void",
            "description": "A setter for the recoil shake amplitude of a weapon.",
            "examples": [],
            "hash": "0x9864312F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x3E1E286D": {
            "name": "GIVE_WEAPON_COMPONENT_TO_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "componentHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "GIVE_WEAPON_COMPONENT_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_COMPONENT_TO_PED](?\\_0xD966D51AA5B28BB9).**",
            "examples": [],
            "hash": "0x3E1E286D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC4D88A85": {
            "name": "GIVE_WEAPON_TO_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "ammoCount",
                    "type": "int"
                },
                {
                    "name": "isHidden",
                    "type": "BOOL"
                },
                {
                    "name": "bForceInHand",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "GIVE_WEAPON_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_TO_PED](?\\_0xBF0FD6E56C964FCB).**",
            "examples": [],
            "hash": "0xC4D88A85",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA44CE817": {
            "name": "REMOVE_ALL_PED_WEAPONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "p1",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Parameter `p1` does not seem to be used or referenced in game binaries.\\\n**Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_ALL_PED_WEAPONS](?\\_0xF25DF915FA38C5F3).**",
            "examples": [],
            "hash": "0xA44CE817",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x412AA00D": {
            "name": "REMOVE_WEAPON_COMPONENT_FROM_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "componentHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "REMOVE_WEAPON_COMPONENT_FROM_PED\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_COMPONENT_FROM_PED](?\\_0x1E8BE90C74FB4C09).**",
            "examples": [],
            "hash": "0x412AA00D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9C37F220": {
            "name": "REMOVE_WEAPON_FROM_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nThis native removes a specified weapon from your selected ped.\r\nWeapon Hashes: pastebin.com/0wwDZgkF\r\nExample:\r\nC#:\r\nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);\r\nC++:\r\nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);\r\nThe code above removes the knife from the player.\n```\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_FROM_PED](?\\_0x4899CB088EDF59B8).**",
            "examples": [],
            "hash": "0x9C37F220",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "NETWORK": {
        "0x2CAFD5E9": {
            "name": "GET_NETWORK_WALK_MODE",
            "params": [],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x2CAFD5E9",
            "ns": "CFX",
            "apiset": "client",
            "game": "ny",
            "resultsDescription": ""
        },
        "0x55188D2D": {
            "name": "SET_NETWORK_WALK_MODE",
            "params": [
                {
                    "name": "enabled",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x55188D2D",
            "ns": "CFX",
            "apiset": "client",
            "game": "ny",
            "resultsDescription": ""
        },
        "0x1E2E3177": {
            "name": "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID",
            "params": [
                {
                    "name": "netId",
                    "type": "int",
                    "description": "The network id to check"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1E2E3177",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "Returns `true` if both the network id exist, and the network id has a game object."
        },
        "0x5B912C3F": {
            "name": "NETWORK_GET_ENTITY_FROM_NETWORK_ID",
            "params": [
                {
                    "name": "netId",
                    "type": "int"
                }
            ],
            "return_type": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x5B912C3F",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x1E546224": {
            "name": "NETWORK_GET_FIRST_ENTITY_OWNER",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the first owner for."
                }
            ],
            "return_type": "int",
            "description": "Returns the first owner ID of the specified entity.",
            "examples": [],
            "hash": "0x1E546224",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The server ID of the first entity owner."
        },
        "0x9E35DAB6": {
            "name": "NETWORK_GET_NETWORK_ID_FROM_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9E35DAB6",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xFFEEF513": {
            "name": "NETWORK_GET_VOICE_PROXIMITY_OVERRIDE_FOR_PLAYER",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "const char*",
                    "description": "The player handle"
                }
            ],
            "return_type": "Vector3",
            "description": "",
            "examples": [],
            "hash": "0xFFEEF513",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x526FEE31": {
            "name": "NETWORK_GET_ENTITY_OWNER",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the owner for."
                }
            ],
            "return_type": "int",
            "description": "Returns the owner ID of the specified entity.",
            "examples": [],
            "hash": "0x526FEE31",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner."
        }
    },
    "SHAPETEST": {
        "0x4301E10C": {
            "name": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL",
            "params": [
                {
                    "name": "shapeTestHandle",
                    "type": "int",
                    "description": "A shape test handle."
                },
                {
                    "name": "hit",
                    "type": "BOOL*",
                    "description": "Whether or not the shape test hit any collisions."
                },
                {
                    "name": "endCoords",
                    "type": "Vector3*",
                    "description": "The resulting coordinates where the shape test hit a collision."
                },
                {
                    "name": "surfaceNormal",
                    "type": "Vector3*",
                    "description": "The surface normal of the hit position."
                },
                {
                    "name": "materialHash",
                    "type": "Hash*",
                    "description": "hash of the hit material or surface type, see materialFX.dat"
                },
                {
                    "name": "entityHit",
                    "type": "Entity*",
                    "description": "Any dynamic entity hit by the shape test."
                }
            ],
            "return_type": "int",
            "description": "Returns the result of a shape test, also returning the material of any touched surface.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined.",
            "examples": [],
            "hash": "0x4301E10C",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "`0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated."
        }
    },
    "CAMERA": {
        "0x8F57A89D": {
            "name": "GET_CAM_MATRIX",
            "params": [
                {
                    "name": "camera",
                    "type": "Cam"
                },
                {
                    "name": "rightVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "forwardVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "upVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "position",
                    "type": "const Vector3*"
                }
            ],
            "return_type": "void",
            "description": "Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.",
            "examples": [],
            "hash": "0x8F57A89D",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DISCORD": {
        "0x6A02254D": {
            "name": "SET_DISCORD_APP_ID",
            "params": [
                {
                    "name": "appId",
                    "type": "const char*",
                    "description": "A valid Discord API App Id, can be generated at https://discordapp.com/developers/applications/"
                }
            ],
            "return_type": "void",
            "description": "This native sets the app id for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x6A02254D",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCBBC3FAC": {
            "name": "SET_DISCORD_RICH_PRESENCE_ACTION",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "The button index, either 0 or 1."
                },
                {
                    "name": "label",
                    "type": "const char*",
                    "description": "The text to display on the button."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The URL to open when clicking the button. This has to start with `fivem://connect/` or `https://`."
                }
            ],
            "return_type": "void",
            "description": "Sets a clickable button to be displayed in a player's Discord rich presence.",
            "examples": [],
            "hash": "0xCBBC3FAC",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x53DFD530": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x53DFD530",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF61D04C4": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. Note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xF61D04C4",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x35E62B6A": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over small image asset. Note that you must also set a valid small image asset using the SET_DISCORD_RICH_PRESENCE_ASSET_SMALL native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x35E62B6A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB029D2FA": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over image asset. Note that you must also set a valid image asset using the SET_DISCORD_RICH_PRESENCE_ASSET native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xB029D2FA",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DUI": {
        "0x23EAF899": {
            "name": "CREATE_DUI",
            "params": [
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The initial URL to load in the browser."
                },
                {
                    "name": "width",
                    "type": "int",
                    "description": "The width of the backing surface."
                },
                {
                    "name": "height",
                    "type": "int",
                    "description": "The height of the backing surface."
                }
            ],
            "return_type": "long",
            "description": "Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.",
            "examples": [],
            "hash": "0x23EAF899",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A DUI object."
        },
        "0xA085CB10": {
            "name": "DESTROY_DUI",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "void",
            "description": "Destroys a DUI browser.",
            "examples": [],
            "hash": "0xA085CB10",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1655D41D": {
            "name": "GET_DUI_HANDLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the NUI window handle for a specified DUI browser object.",
            "examples": [],
            "hash": "0x1655D41D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The NUI window handle, for use in e.g. CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
        },
        "0x7AAC3B4C": {
            "name": "IS_DUI_AVAILABLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not a browser is created for a specified DUI browser object.",
            "examples": [],
            "hash": "0x7AAC3B4C",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A boolean indicating TRUE if the browser is created."
        },
        "0xCD380DA9": {
            "name": "SEND_DUI_MESSAGE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "jsonString",
                    "type": "const char*",
                    "description": "The message, encoded as JSON."
                }
            ],
            "return_type": "void",
            "description": "Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.",
            "examples": [],
            "hash": "0xCD380DA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5D01F191": {
            "name": "SEND_DUI_MOUSE_DOWN",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x5D01F191",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD9D7A0AA": {
            "name": "SEND_DUI_MOUSE_MOVE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The mouse X position."
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The mouse Y position."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.",
            "examples": [],
            "hash": "0xD9D7A0AA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1D735B93": {
            "name": "SEND_DUI_MOUSE_UP",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x1D735B93",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x2D62133A": {
            "name": "SEND_DUI_MOUSE_WHEEL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "deltaY",
                    "type": "int",
                    "description": "The wheel Y delta."
                },
                {
                    "name": "deltaX",
                    "type": "int",
                    "description": "The wheel X delta."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse wheel' event for a DUI object.",
            "examples": [],
            "hash": "0x2D62133A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF761D9F3": {
            "name": "SET_DUI_URL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The new URL."
                }
            ],
            "return_type": "void",
            "description": "Navigates the specified DUI browser to a different URL.",
            "examples": [],
            "hash": "0xF761D9F3",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "KVP": {
        "0x3CC98B25": {
            "name": "GET_EXTERNAL_KVP_FLOAT",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*",
                    "description": "The resource to fetch from."
                },
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938), but for a specified resource.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetExternalKvpFloat('drugs', 'mollis') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x3CC98B25",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A float that contains the value stored in the Kvp or nil/null if none."
        },
        "0x12B8D689": {
            "name": "GET_EXTERNAL_KVP_INT",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*",
                    "description": "The resource to fetch from."
                },
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "int",
            "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8), but for a specified resource.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetExternalKvpInt('food', 'bananabread') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x12B8D689",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A int that contains the value stored in the Kvp or nil/null if none."
        },
        "0x9080363A": {
            "name": "GET_EXTERNAL_KVP_STRING",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*",
                    "description": "The resource to fetch from."
                },
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "const char*",
            "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B), but for a specified resource.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetExternalKvpString('food', 'codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x9080363A",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A string that contains the value stored in the Kvp or nil/null if none."
        },
        "0x8F2EECC3": {
            "name": "START_FIND_EXTERNAL_KVP",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource to try finding the key/values for"
                },
                {
                    "name": "prefix",
                    "type": "const char*",
                    "description": "A prefix match"
                }
            ],
            "return_type": "int",
            "description": "Equivalent of [START_FIND_KVP](#\\_0xDD379006), but for another resource than the current one.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpHandle = StartFindExternalKvp('drugs', 'mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil not key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nelse\r\n\tprint('No KVPs found')\r\nend"
                }
            ],
            "hash": "0x8F2EECC3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
        },
        "0xB3210203": {
            "name": "END_FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3210203",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xBD7BEBC5": {
            "name": "FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xBD7BEBC5",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xDD379006": {
            "name": "START_FIND_KVP",
            "params": [
                {
                    "name": "prefix",
                    "type": "const char*",
                    "description": "A prefix match"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis:2', 'should be taken with alcohol')\r\nSetResourceKvp('mollis:1', 'vesuvius citrate')\r\nSetResourceKvp('mollis:manufacturer', 'Betta Pharmaceuticals')\r\n\r\nlocal kvpHandle = StartFindKvp('mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil not key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nelse\r\n\tprint('No KVPs found')\r\nend"
                }
            ],
            "hash": "0xDD379006",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
        }
    },
    "MUMBLE": {
        "0xC79F44BF": {
            "name": "MUMBLE_ADD_VOICE_CHANNEL_LISTEN",
            "params": [
                {
                    "name": "channel",
                    "type": "int",
                    "description": "A game voice channel ID."
                }
            ],
            "return_type": "void",
            "description": "Starts listening to the specified channel, when available.",
            "examples": [],
            "hash": "0xC79F44BF",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x4D386C9E": {
            "name": "MUMBLE_ADD_VOICE_TARGET_CHANNEL",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "channel",
                    "type": "int",
                    "description": "A game voice channel ID."
                }
            ],
            "return_type": "void",
            "description": "Adds the specified channel to the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x4D386C9E",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x32C5355A": {
            "name": "MUMBLE_ADD_VOICE_TARGET_PLAYER",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "player",
                    "type": "Player",
                    "description": "A game player index."
                }
            ],
            "return_type": "void",
            "description": "Adds the specified player to the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x32C5355A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x25F2B65F": {
            "name": "MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server id."
                }
            ],
            "return_type": "void",
            "description": "Adds the specified player to the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x25F2B65F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xBF847807": {
            "name": "MUMBLE_CLEAR_VOICE_CHANNEL",
            "params": [],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBF847807",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x8555DCBA": {
            "name": "MUMBLE_CLEAR_VOICE_TARGET",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                }
            ],
            "return_type": "void",
            "description": "Clears the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x8555DCBA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5EA72E76": {
            "name": "MUMBLE_CLEAR_VOICE_TARGET_CHANNELS",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                }
            ],
            "return_type": "void",
            "description": "Clears channels from the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x5EA72E76",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x912E21DA": {
            "name": "MUMBLE_CLEAR_VOICE_TARGET_PLAYERS",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                }
            ],
            "return_type": "void",
            "description": "Clears players from the target list for the specified Mumble voice target ID.",
            "examples": [],
            "hash": "0x912E21DA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCC8CA25": {
            "name": "MUMBLE_DOES_CHANNEL_EXIST",
            "params": [
                {
                    "name": "channel",
                    "type": "int",
                    "description": "A game voice channel ID."
                }
            ],
            "return_type": "BOOL",
            "description": "Check whether specified channel exists on the Mumble server.",
            "examples": [],
            "hash": "0xCC8CA25",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True if the specific channel exists. False otherwise."
        },
        "0x84E02A32": {
            "name": "MUMBLE_GET_TALKER_PROXIMITY",
            "params": [],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x84E02A32",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Talker proximity value."
        },
        "0x221C09F1": {
            "name": "MUMBLE_GET_VOICE_CHANNEL_FROM_SERVER_ID",
            "params": [
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server id."
                }
            ],
            "return_type": "int",
            "description": "Returns the mumble voice channel from a player's server id.",
            "examples": [],
            "hash": "0x221C09F1",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Int representing the identifier of the voice channel."
        },
        "0xE820BC10": {
            "name": "MUMBLE_IS_ACTIVE",
            "params": [],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xE820BC10",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True if the player has enabled voice chat."
        },
        "0xB816370A": {
            "name": "MUMBLE_IS_CONNECTED",
            "params": [],
            "return_type": "BOOL",
            "description": "This native will return true if the user succesfully connected to the voice server.\r\nIf the user disabled the voice-chat setting it will return false.",
            "examples": [],
            "hash": "0xB816370A",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True if the player is connected to a mumble server."
        },
        "0x33EEF97F": {
            "name": "MUMBLE_IS_PLAYER_TALKING",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The target player."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x33EEF97F",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Whether or not the player is talking."
        },
        "0x231523B7": {
            "name": "MUMBLE_REMOVE_VOICE_CHANNEL_LISTEN",
            "params": [
                {
                    "name": "channel",
                    "type": "int",
                    "description": "A game voice channel ID."
                }
            ],
            "return_type": "void",
            "description": "Stops listening to the specified channel.",
            "examples": [],
            "hash": "0x231523B7",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x268DB867": {
            "name": "MUMBLE_REMOVE_VOICE_TARGET_CHANNEL",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "channel",
                    "type": "int",
                    "description": "The game voice channel ID to remove from the target."
                }
            ],
            "return_type": "void",
            "description": "Removes the specified voice channel from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_CHANNEL](#\\_0x4D386C9E)",
            "examples": [],
            "hash": "0x268DB867",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x88CD646F": {
            "name": "MUMBLE_REMOVE_VOICE_TARGET_PLAYER",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "player",
                    "type": "Player",
                    "description": "The player index to remove from the target."
                }
            ],
            "return_type": "void",
            "description": "Removes the specified player from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER](#\\_0x32C5355A)",
            "examples": [],
            "hash": "0x88CD646F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x930BD34B": {
            "name": "MUMBLE_REMOVE_VOICE_TARGET_PLAYER_BY_SERVER_ID",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive)."
                },
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server id to remove from the target."
                }
            ],
            "return_type": "void",
            "description": "Removes the specified player from the user's voice targets.\n\nPerforms the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID](#\\_0x25F2B65F)",
            "examples": [],
            "hash": "0x930BD34B",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD932A3F3": {
            "name": "MUMBLE_SET_ACTIVE",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Voice chat state."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xD932A3F3",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1B1052E2": {
            "name": "MUMBLE_SET_AUDIO_INPUT_DISTANCE",
            "params": [
                {
                    "name": "distance",
                    "type": "float",
                    "description": "The input distance."
                }
            ],
            "return_type": "void",
            "description": "Sets the current input distance. The player will be able to talk to other players within this distance.",
            "examples": [],
            "hash": "0x1B1052E2",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x6383526B": {
            "name": "MUMBLE_SET_AUDIO_INPUT_INTENT",
            "params": [
                {
                    "name": "intentHash",
                    "type": "Hash",
                    "description": "The intent hash."
                }
            ],
            "return_type": "void",
            "description": "Use this native to disable noise suppression and high pass filters.\n\nThe possible intents for this are as follows (backticks are used to represent hashes):\n\n| Index | Description |\r\n|-|-|\r\n| \\`speech\\` | Default intent |\r\n| \\`music\\` | Disable noise suppression and high pass filter |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- disable noise suppression and high pass filter\r\nMumbleSetAudioInputIntent(`music`)\r\n\r\n-- set the default intent (enable noise suppression and high pass filter)\r\nMumbleSetAudioInputIntent(`speech`)"
                }
            ],
            "hash": "0x6383526B",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x74C597D9": {
            "name": "MUMBLE_SET_AUDIO_OUTPUT_DISTANCE",
            "params": [
                {
                    "name": "distance",
                    "type": "float",
                    "description": "The output distance."
                }
            ],
            "return_type": "void",
            "description": "Sets the current output distance. The player will be able to hear other players talking within this distance.",
            "examples": [],
            "hash": "0x74C597D9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xE6EB2CD8": {
            "name": "MUMBLE_SET_SERVER_ADDRESS",
            "params": [
                {
                    "name": "address",
                    "type": "const char*",
                    "description": "The address of the mumble server."
                },
                {
                    "name": "port",
                    "type": "int",
                    "description": "The port of the mumble server."
                }
            ],
            "return_type": "void",
            "description": "Changes the Mumble server address to connect to, and reconnects to the new address.\n\nSetting the address to an empty string and the port to -1 will reset to the built in FXServer Mumble Implementation.",
            "examples": [],
            "hash": "0xE6EB2CD8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xFE3A3054": {
            "name": "MUMBLE_SET_SUBMIX_FOR_SERVER_ID",
            "params": [
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server ID."
                },
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix ID."
                }
            ],
            "return_type": "void",
            "description": "Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality.",
            "examples": [],
            "hash": "0xFE3A3054",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x74E927B0": {
            "name": "MUMBLE_SET_TALKER_PROXIMITY",
            "params": [
                {
                    "name": "value",
                    "type": "float",
                    "description": "Proximity value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x74E927B0",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x8737EEE8": {
            "name": "MUMBLE_SET_VOICE_CHANNEL",
            "params": [
                {
                    "name": "channel",
                    "type": "int",
                    "description": "A game voice channel ID."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x8737EEE8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x960A4A95": {
            "name": "MUMBLE_SET_VOICE_TARGET",
            "params": [
                {
                    "name": "targetId",
                    "type": "int",
                    "description": "A Mumble voice target ID, ranging from 1..30 (inclusive). 0 disables voice targets, and 31 is server loopback."
                }
            ],
            "return_type": "void",
            "description": "Sets the current Mumble voice target ID to broadcast voice to.",
            "examples": [],
            "hash": "0x960A4A95",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x61C309E3": {
            "name": "MUMBLE_SET_VOLUME_OVERRIDE",
            "params": [
                {
                    "name": "player",
                    "type": "Player",
                    "description": "A game player index."
                },
                {
                    "name": "volume",
                    "type": "float",
                    "description": "The volume, ranging from 0.0 to 1.0 (or above)."
                }
            ],
            "return_type": "void",
            "description": "Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.\n\nSet to -1.0 to reset the Volume override.",
            "examples": [],
            "hash": "0x61C309E3",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCE8E25B4": {
            "name": "MUMBLE_SET_VOLUME_OVERRIDE_BY_SERVER_ID",
            "params": [
                {
                    "name": "serverId",
                    "type": "int",
                    "description": "The player's server id."
                },
                {
                    "name": "volume",
                    "type": "float",
                    "description": "The volume, ranging from 0.0 to 1.0 (or above)."
                }
            ],
            "return_type": "void",
            "description": "Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.",
            "examples": [],
            "hash": "0xCE8E25B4",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x262663C5": {
            "name": "MUMBLE_CREATE_CHANNEL",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "ID of the channel."
                }
            ],
            "return_type": "void",
            "description": "Create a permanent voice channel.",
            "examples": [],
            "hash": "0x262663C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x1D5D50C2": {
            "name": "MUMBLE_IS_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to get the mute state for"
                }
            ],
            "return_type": "BOOL",
            "description": "Checks if the player is currently muted",
            "examples": [],
            "hash": "0x1D5D50C2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the player is muted"
        },
        "0xCC6C2EB1": {
            "name": "MUMBLE_SET_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to set the mute state of"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to mute or unmute the player"
                }
            ],
            "return_type": "void",
            "description": "Mutes or unmutes the specified player",
            "examples": [],
            "hash": "0xCC6C2EB1",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "NUI": {
        "0xBDBA226F": {
            "name": "GET_NUI_CURSOR_POSITION",
            "params": [
                {
                    "name": "x",
                    "type": "int*"
                },
                {
                    "name": "y",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDBA226F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x98545E6D": {
            "name": "IS_NUI_FOCUSED",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.",
            "examples": [],
            "hash": "0x98545E6D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0x39C9DC92": {
            "name": "IS_NUI_FOCUS_KEEPING_INPUT",
            "params": [],
            "return_type": "BOOL",
            "description": "Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.",
            "examples": [],
            "hash": "0x39C9DC92",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0xC59B980C": {
            "name": "REGISTER_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "func"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC59B980C",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCD03CDA9": {
            "name": "REGISTER_NUI_CALLBACK_TYPE",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD03CDA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xA8AE9C2F": {
            "name": "REGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "func"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8AE9C2F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x78608ACB": {
            "name": "SEND_NUI_MESSAGE",
            "params": [
                {
                    "name": "jsonString",
                    "type": "char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78608ACB",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x1722C938": {
            "name": "SET_MANUAL_SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [
                {
                    "name": "manualShutdown",
                    "type": "BOOL",
                    "description": "TRUE to manually shut down the loading screen NUI."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.",
            "examples": [],
            "hash": "0x1722C938",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5B98AE30": {
            "name": "SET_NUI_FOCUS",
            "params": [
                {
                    "name": "hasFocus",
                    "type": "BOOL"
                },
                {
                    "name": "hasCursor",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B98AE30",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3FF5E5F8": {
            "name": "SET_NUI_FOCUS_KEEP_INPUT",
            "params": [
                {
                    "name": "keepInput",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FF5E5F8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3734AAFF": {
            "name": "SET_NUI_ZINDEX",
            "params": [
                {
                    "name": "zIndex",
                    "type": "int",
                    "description": "New z-index value."
                }
            ],
            "return_type": "void",
            "description": "Set the z-index of the NUI resource.",
            "examples": [],
            "hash": "0x3734AAFF",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB9234AFB": {
            "name": "SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [],
            "return_type": "void",
            "description": "Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.",
            "examples": [],
            "hash": "0xB9234AFB",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x7FB46432": {
            "name": "UNREGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*",
                    "description": "The callback type to target"
                }
            ],
            "return_type": "void",
            "description": "Will unregister and cleanup a registered NUI callback handler.\n\nUse along side the REGISTER_RAW_NUI_CALLBACK native.",
            "examples": [],
            "hash": "0x7FB46432",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "OBJECT": {
        "0xF65BBA4B": {
            "name": "DOOR_SYSTEM_GET_ACTIVE",
            "params": [],
            "return_type": "Object",
            "description": "Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\\_0x6F8838D03D1DC226)) and its object handle.\n\nThe data returned adheres to the following layout:\n\n```\n[{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]\n```",
            "examples": [],
            "hash": "0xF65BBA4B",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "An object containing a list of door system entries."
        },
        "0x237613B3": {
            "name": "DOOR_SYSTEM_GET_SIZE",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x237613B3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The number of doors registered in the system"
        },
        "0x2F7AA05C": {
            "name": "CREATE_OBJECT",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component, 'ground level'."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\\_0x509D5878EB39E842).**",
            "examples": [],
            "hash": "0x2F7AA05C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x58040420": {
            "name": "CREATE_OBJECT_NO_OFFSET",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model centered at the specified position.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\\_0x9A294B2138ABB884).**",
            "examples": [],
            "hash": "0x58040420",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x6886C3FE": {
            "name": "GET_ALL_OBJECTS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [],
            "hash": "0x6886C3FE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of object handles."
        }
    },
    "PAD": {
        "0x8BCF0014": {
            "name": "DISABLE_RAW_KEY_THIS_FRAME",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Disables the specified `rawKeyIndex`, making it not trigger the regular `IS_RAW_KEY_*` natives.\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local KEY_SPACE = 32\r\nDisableRawKeyThisFrame(KEY_SPACE)\r\n-- This will not get triggered this frame\r\nif IsRawKeyDown(KEY_SPACE) then\r\n\tprint(\"unreachable :(\")\r\nend\r\n-- this will get triggered\r\nif IsDisabledRawKeyDown(KEY_SPACE) then\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x8BCF0014",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x36366EC3": {
            "name": "IS_DISABLED_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x36366EC3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x1F7CBBAA": {
            "name": "IS_DISABLED_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x1F7CBBAA",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0x72B66C09": {
            "name": "IS_DISABLED_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was released, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0x72B66C09",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x2C033875": {
            "name": "IS_DISABLED_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x2C033875",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        },
        "0xD95A7387": {
            "name": "IS_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0xD95A7387",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x69F7C29E": {
            "name": "IS_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x69F7C29E",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0xEAA50861": {
            "name": "IS_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was just released on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0xEAA50861",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x36F4E505": {
            "name": "IS_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up  on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x36F4E505",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        }
    },
    "SOCIAL": {
        "0x7BDCBD45": {
            "name": "SET_RICH_PRESENCE",
            "params": [
                {
                    "name": "presenceState",
                    "type": "const char*",
                    "description": "The rich presence string to set."
                }
            ],
            "return_type": "void",
            "description": "Sets the player's rich presence detail state for social platform providers to a specified string.",
            "examples": [],
            "hash": "0x7BDCBD45",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "RESOURCE": {
        "0xE27C97A0": {
            "name": "FLUSH_RESOURCE_KVP",
            "params": [],
            "return_type": "void",
            "description": "Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.\n\nThis native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Bulk write many <key, value> pairs to the resource KVP.\r\nlocal key = \"bug_%d\"\r\nlocal value = \"unintended_feature_%d\"\r\nfor i=1,10000 do\r\n\tSetResourceKvpNoSync(key:format(i), value:format(i))\r\nend\r\n\r\n-- Ensure all data is synchronized to the filesystem\r\nFlushResourceKvp()"
                }
            ],
            "hash": "0xE27C97A0",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x61DCF017": {
            "name": "GET_RESOURCE_PATH",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the physical on-disk path of the specified resource.",
            "examples": [],
            "hash": "0x61DCF017",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The resource directory name, possibly without trailing slash."
        },
        "0x9862B266": {
            "name": "REGISTER_RESOURCE_ASSET",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource to add the asset to."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "A file name in the resource."
                }
            ],
            "return_type": "const char*",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.",
            "examples": [],
            "hash": "0x9862B266",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A cache string to pass to `REGISTER_STREAMING_FILE_FROM_CACHE` on the client."
        },
        "0x285B43CA": {
            "name": "REGISTER_RESOURCE_BUILD_TASK_FACTORY",
            "params": [
                {
                    "name": "factoryId",
                    "type": "const char*",
                    "description": "The identifier for the build task."
                },
                {
                    "name": "factoryFn",
                    "type": "func",
                    "description": "The factory function."
                }
            ],
            "return_type": "void",
            "description": "Registers a build task factory for resources.\r\nThe function should return an object (msgpack map) with the following fields:\n\n```\n{\r\n// returns whether the specific resource should be built\r\nshouldBuild = func(resourceName: string): bool,\r\n\r\n// asynchronously start building the specific resource.\r\n// call cb when completed\r\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\r\n}\n```",
            "examples": [],
            "hash": "0x285B43CA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA09E7E7B": {
            "name": "SAVE_RESOURCE_FILE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The name of the file."
                },
                {
                    "name": "data",
                    "type": "const char*",
                    "description": "The data to write to the file."
                },
                {
                    "name": "dataLength",
                    "type": "int",
                    "description": "The length of the written data."
                }
            ],
            "return_type": "BOOL",
            "description": "Writes the specified data to a file in the specified resource.\r\nUsing a length of `-1` will automatically detect the length assuming the data is a C string.",
            "examples": [],
            "hash": "0xA09E7E7B",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A value indicating if the write succeeded."
        },
        "0x636F097F": {
            "name": "SCAN_RESOURCE_ROOT",
            "params": [
                {
                    "name": "rootPath",
                    "type": "const char*",
                    "description": "The resource directory to scan."
                },
                {
                    "name": "callback",
                    "type": "func",
                    "description": "A callback that will receive an object with results."
                }
            ],
            "return_type": "void",
            "description": "Scans the resources in the specified resource root. This function is only available in the 'monitor mode' process and is\r\nnot available for user resources.",
            "examples": [],
            "hash": "0x636F097F",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB88A73AD": {
            "name": "SCHEDULE_RESOURCE_TICK",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource to tick."
                }
            ],
            "return_type": "void",
            "description": "Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.",
            "examples": [],
            "hash": "0xB88A73AD",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x29B440DC": {
            "name": "START_RESOURCE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x29B440DC",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x21783161": {
            "name": "STOP_RESOURCE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x21783161",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x7389B5DF": {
            "name": "DELETE_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "DeleteResourceKvp('liberty_city')"
                }
            ],
            "hash": "0x7389B5DF",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x4152C90": {
            "name": "DELETE_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x4152C90",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xE5E9EBBB": {
            "name": "GET_CURRENT_RESOURCE_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the name of the currently executing resource.",
            "examples": [],
            "hash": "0xE5E9EBBB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The name of the resource."
        },
        "0x4D52FE5B": {
            "name": "GET_INVOKING_RESOURCE",
            "params": [],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x4D52FE5B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x863F27B": {
            "name": "GET_NUM_RESOURCES",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x863F27B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x776E864": {
            "name": "GET_NUM_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key to look up in the resource manifest."
                }
            ],
            "return_type": "int",
            "description": "Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x776E864",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x387246B7": {
            "name": "GET_RESOURCE_BY_FIND_INDEX",
            "params": [
                {
                    "name": "findIndex",
                    "type": "int",
                    "description": "The index of the resource (starting at 0)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local resourceList = {}\r\nfor i = 0, GetNumResources(), 1 do\r\n  local resource_name = GetResourceByFindIndex(i)\r\n  if resource_name and GetResourceState(resource_name) == \"started\" then\r\n    table.insert(resourceList, resource_name)\r\n  end\r\nend\r\nprint(table.unpack(resourceList))"
                }
            ],
            "hash": "0x387246B7",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource name as a `string`"
        },
        "0x97628584": {
            "name": "GET_RESOURCE_COMMANDS",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*"
                }
            ],
            "return_type": "Object",
            "description": "Returns all commands registered by the specified resource.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\",\r\n\"resource\": \"example_resource\",\r\n\"arity\" = -1,\r\n},\r\n{\r\n\"name\": \"command1\"\r\n\"resource\": \"example_resource2\",\r\n\"arity\" = -1,\r\n}\r\n]\n```",
            "examples": [],
            "hash": "0x97628584",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An object containing registered commands."
        },
        "0x35BDCEEA": {
            "name": "GET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpFloat('mollis')\r\nif kvpValue ~= 0.0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x35BDCEEA",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The floating-point value stored under the specified key, or 0.0 if not found."
        },
        "0x557B586A": {
            "name": "GET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "int",
            "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpInt('bananabread') \r\nif kvpValue ~= 0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x557B586A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The integer value stored under the specified key, or 0 if not found."
        },
        "0x5240DA5A": {
            "name": "GET_RESOURCE_KVP_STRING",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "const char*",
            "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpString('codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x5240DA5A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The string value stored under the specified key, or nil/null if not found."
        },
        "0x964BAB1D": {
            "name": "GET_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key in the resource manifest."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1]."
                }
            ],
            "return_type": "const char*",
            "description": "Gets the metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x964BAB1D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x4039B485": {
            "name": "GET_RESOURCE_STATE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the current state of the specified resource.",
            "examples": [],
            "hash": "0x4039B485",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`."
        },
        "0x76A9EE1F": {
            "name": "LOAD_RESOURCE_FILE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The file in the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`",
            "examples": [],
            "hash": "0x76A9EE1F",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The file contents"
        },
        "0xD233A168": {
            "name": "REGISTER_RESOURCE_AS_EVENT_HANDLER",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*",
                    "description": "An event name, or \"\\*\" to disable HLL event filtering for this resource."
                }
            ],
            "return_type": "void",
            "description": "An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.",
            "examples": [],
            "hash": "0xD233A168",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x21C7A35B": {
            "name": "SET_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis', 'vesuvius citrate')"
                }
            ],
            "hash": "0x21C7A35B",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x9ADD2938": {
            "name": "SET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42.5\r\nSetResourceKvpFloat('bananabread', lickMy)"
                }
            ],
            "hash": "0x9ADD2938",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x3517BFBE": {
            "name": "SET_RESOURCE_KVP_FLOAT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x3517BFBE",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x6A2B1E8": {
            "name": "SET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42\r\nSetResourceKvp('bananabread', lickMy)"
                }
            ],
            "hash": "0x6A2B1E8",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x26AEB707": {
            "name": "SET_RESOURCE_KVP_INT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x26AEB707",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xCF9A2FF": {
            "name": "SET_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0xCF9A2FF",
            "ns": "CFX",
            "apiset": "shared"
        }
    },
    "TASK": {
        "0xDE3316AB": {
            "name": "CLEAR_PED_TASKS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id. Use PlayerPedId() for your own character."
                }
            ],
            "return_type": "void",
            "description": "Clear a ped's tasks. Stop animations and other tasks created by scripts.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\\_0xE1EF3C1216AFF2CD).**",
            "examples": [],
            "hash": "0xDE3316AB",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xBC045625": {
            "name": "CLEAR_PED_TASKS_IMMEDIATELY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id."
                }
            ],
            "return_type": "void",
            "description": "Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\\_0xAAA34F8A7CB32098).**",
            "examples": [],
            "hash": "0xBC045625",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCB0D8932": {
            "name": "TASK_COMBAT_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "p2",
                    "type": "int"
                },
                {
                    "name": "p3",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nMakes the specified ped attack the target ped.\r\np2 should be 0\r\np3 should be 16\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\\_0xF166E48407BAC484).**",
            "examples": [],
            "hash": "0xCB0D8932",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2B84D1C4": {
            "name": "TASK_DRIVE_BY",
            "params": [
                {
                    "name": "driverPed",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "targetVehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "targetX",
                    "type": "float"
                },
                {
                    "name": "targetY",
                    "type": "float"
                },
                {
                    "name": "targetZ",
                    "type": "float"
                },
                {
                    "name": "distanceToShoot",
                    "type": "float"
                },
                {
                    "name": "pedAccuracy",
                    "type": "int"
                },
                {
                    "name": "p8",
                    "type": "BOOL"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nExample:\r\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\r\nNeeds working example. Doesn't seem to do anything.\r\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\r\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\r\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\\_0x2F8AF0E82773A171).**",
            "examples": [],
            "hash": "0x2B84D1C4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB8689B4E": {
            "name": "TASK_ENTER_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "timeout",
                    "type": "int"
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "flag",
                    "type": "int"
                },
                {
                    "name": "p6",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "```\nspeed 1.0 = walk, 2.0 = run\r\np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle\r\np6 is always 0\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\\_0xC20E50AA46D09CA8).**",
            "examples": [],
            "hash": "0xB8689B4E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC1971F30": {
            "name": "TASK_EVERYONE_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "void",
            "description": "TASK_EVERYONE_LEAVE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\\_0x7F93691AB4B92272).**",
            "examples": [],
            "hash": "0xC1971F30",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x80A9E7A7": {
            "name": "TASK_GO_STRAIGHT_TO_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The ped movement speed."
                },
                {
                    "name": "timeout",
                    "type": "int",
                    "description": "\\-1 , other values appear to break the ped movement."
                },
                {
                    "name": "targetHeading",
                    "type": "float",
                    "description": "The heading you want the ped to be on x,y,z coord."
                },
                {
                    "name": "distanceToSlide",
                    "type": "float",
                    "description": "The distance from x,y,z where the ped will start sliding."
                }
            ],
            "return_type": "void",
            "description": "TASK_GO_STRAIGHT_TO_COORD\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\\_0xD76B57B44F1E6F8B).**",
            "examples": [],
            "hash": "0x80A9E7A7",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF91DF93B": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The `Ped` Handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "fMoveBlendRatio",
                    "type": "float",
                    "description": "0.0 = still, 1.0 = walk, 2.0 = run, 3.0 = sprint."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "If defined, the pedestrian will only move if said vehicle exists. If you don't want any sort of association, just set it to `0`."
                },
                {
                    "name": "bUseLongRangeVehiclePathing",
                    "type": "BOOL",
                    "description": "Setting to `true` tells the vehicle to use longrange vehicle pathing."
                },
                {
                    "name": "drivingFlags",
                    "type": "int",
                    "description": "See `eDrivingMode` enum."
                },
                {
                    "name": "fMaxRangeToShootTargets",
                    "type": "float",
                    "description": "Determines the maximum distance at which the `Ped` will engage in combat with threatening targets."
                }
            ],
            "return_type": "void",
            "description": "Tells a ped to go to a coord by any means.\n\n```cpp\nenum eDrivingMode {\r\nDF_StopForCars = 1,\r\nDF_StopForPeds = 2,\r\nDF_SwerveAroundAllCars = 4,\r\nDF_SteerAroundStationaryCars = 8,\r\nDF_SteerAroundPeds = 16,\r\nDF_SteerAroundObjects = 32,\r\nDF_DontSteerAroundPlayerPed = 64,\r\nDF_StopAtLights = 128,\r\nDF_GoOffRoadWhenAvoiding = 256,\r\nDF_DriveIntoOncomingTraffic = 512,\r\nDF_DriveInReverse = 1024,\r\n// If pathfinding fails, cruise randomly instead of going on a straight line\r\nDF_UseWanderFallbackInsteadOfStraightLine = 2048,\r\nDF_AvoidRestrictedAreas = 4096,\r\n// These only work on MISSION_CRUISE\r\nDF_PreventBackgroundPathfinding = 8192,\r\nDF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,\r\nDF_UseShortCutLinks =  262144,\r\nDF_ChangeLanesAroundObstructions = 524288,\r\n// cruise tasks ignore this anyway--only used for goto's\r\nDF_UseSwitchedOffNodes =  2097152,\r\n// if you're going to be primarily driving off road\r\nDF_PreferNavmeshRoute =  4194304,\r\n// Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly\r\nDF_PlaneTaxiMode =  8388608,\r\nDF_ForceStraightLine = 16777216,\r\nDF_UseStringPullingAtJunctions = 33554432,\r\nDF_AvoidHighways = 536870912,\r\nDF_ForceJoinInRoadDirection = 1073741824,\r\n// Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions\r\nDRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\t\t// Obey lights too\r\n// Like the above, but doesn't steer around anything in its way - will only wait instead.\r\nDRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch.\r\n// Default \"alerted\" driving mode. drives around everything, doesn't obey lights\r\nDRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars,\r\n// Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering\r\nDRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\r\n// Smashes through everything\r\nDRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks\r\n// Drives normally except for the fact that it ignores lights\r\nDRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions\r\n// Try to swerve around everything, but stop for lights if necessary\r\nDRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n// Swerve around cars, be careful around peds, and stop for lights\r\nDRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\\_0x5BC448CB78FA3E88).**",
            "examples": [],
            "hash": "0xF91DF93B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x374827C2": {
            "name": "TASK_GO_TO_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "distance",
                    "type": "float"
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "p5",
                    "type": "float"
                },
                {
                    "name": "p6",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\r\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\r\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\r\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\\_0x6A071245EB0D1882).**",
            "examples": [],
            "hash": "0x374827C2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DCC19C5": {
            "name": "TASK_HANDS_UP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "facingPed",
                    "type": "Ped"
                },
                {
                    "name": "p3",
                    "type": "int"
                },
                {
                    "name": "p4",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "```\nIn the scripts, p3 was always -1.\r\np3 seems to be duration or timeout of turn animation.\r\nAlso facingPed can be 0 or -1 so ped will just raise hands up.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\\_0xF2EAB31979A7F910).**",
            "examples": [],
            "hash": "0x8DCC19C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xDBDD79FA": {
            "name": "TASK_LEAVE_ANY_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "p1",
                    "type": "int"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\\_0x504D54DF3F6F2247).**",
            "examples": [],
            "hash": "0xDBDD79FA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7B1141C6": {
            "name": "TASK_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nFlags from decompiled scripts:\r\n0 = normal exit and closes door.\r\n1 = normal exit and closes door.\r\n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\r\n64 = normal exit and closes door, maybe a bit slower animation than 0.\r\n256 = normal exit but does not close the door.\r\n4160 = ped is throwing himself out, even when the vehicle is still.\r\n262144 = ped moves to passenger seat first, then exits normally\r\nOthers to be tried out: 320, 512, 131072.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\\_0xD3DBCE61A490BE02).**",
            "examples": [],
            "hash": "0x7B1141C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x5AB552C6": {
            "name": "TASK_PLAY_ANIM",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "The animation flags (see enum)"
                },
                {
                    "name": "playbackRate",
                    "type": "float",
                    "description": "The playback rate (between 0.0 and 1.0)"
                },
                {
                    "name": "lockX",
                    "type": "BOOL"
                },
                {
                    "name": "lockY",
                    "type": "BOOL"
                },
                {
                    "name": "lockZ",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```cpp\nenum eScriptedAnimFlags\r\n{\r\nAF_LOOPING = 1,\r\nAF_HOLD_LAST_FRAME = 2,\r\nAF_REPOSITION_WHEN_FINISHED = 4,\r\nAF_NOT_INTERRUPTABLE = 8,\r\nAF_UPPERBODY = 16,\r\nAF_SECONDARY = 32,\r\nAF_REORIENT_WHEN_FINISHED = 64,\r\nAF_ABORT_ON_PED_MOVEMENT = 128,\r\nAF_ADDITIVE = 256,\r\nAF_TURN_OFF_COLLISION = 512,\r\nAF_OVERRIDE_PHYSICS = 1024,\r\nAF_IGNORE_GRAVITY = 2048,\r\nAF_EXTRACT_INITIAL_OFFSET = 4096,\r\nAF_EXIT_AFTER_INTERRUPTED = 8192,\r\nAF_TAG_SYNC_IN = 16384,\r\nAF_TAG_SYNC_OUT = 32768,\r\nAF_TAG_SYNC_CONTINUOUS = 65536,\r\nAF_FORCE_START = 131072,\r\nAF_USE_KINEMATIC_PHYSICS = 262144,\r\nAF_USE_MOVER_EXTRACTION = 524288,\r\nAF_HIDE_WEAPON = 1048576,\r\nAF_ENDS_IN_DEAD_POSE = 2097152,\r\nAF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304,\r\nAF_DONT_EXIT_ON_DEATH = 8388608,\r\nAF_ABORT_ON_WEAPON_DAMAGE = 16777216,\r\nAF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432,\r\nAF_PROCESS_ATTACHMENTS_ON_START = 67108864,\r\nAF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728,\r\nAF_USE_ALTERNATIVE_FP_ANIM = 268435456,\r\nAF_BLENDOUT_WRT_LAST_FRAME = 536870912,\r\nAF_USE_FULL_BLENDING = 1073741824\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\\_0xEA47FE3719165B94).**",
            "examples": [],
            "hash": "0x5AB552C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x3DDEB0E6": {
            "name": "TASK_PLAY_ANIM_ADVANCED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Initial X position of the task"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Initial Y position of the task"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "Initial Z position of the task"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Initial X rotation of the task"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Initial Y rotation of the task"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Initial Z rotation of the task"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "Any",
                    "description": "See [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94)"
                },
                {
                    "name": "animTime",
                    "type": "float",
                    "description": "Value between 0.0 and 1.0, lets you start an animation from the given point"
                },
                {
                    "name": "p14",
                    "type": "Any"
                },
                {
                    "name": "p15",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "Similar in functionality to [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94), except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified.\r\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\\_0x83CDB10EA29B370B).**",
            "examples": [],
            "hash": "0x3DDEB0E6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8A632BD8": {
            "name": "TASK_REACT_AND_FLEE_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "fleeTarget",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "TASK_REACT_AND_FLEE_PED\n\n**This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\\_0x72C896464915D1B1).**",
            "examples": [],
            "hash": "0x8A632BD8",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x601C22E3": {
            "name": "TASK_SHOOT_AT_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\\_0x46A6CC01E0826106).**",
            "examples": [],
            "hash": "0x601C22E3",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xAC0631C9": {
            "name": "TASK_SHOOT_AT_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\r\nEntity aimedentity;\r\nPlayer player = PLAYER::PLAYER_ID();\r\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\r\n//bg is an array of peds\r\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\r\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\r\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\\_0x08DA95E8298AE772).**",
            "examples": [],
            "hash": "0xAC0631C9",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x65D4A35D": {
            "name": "TASK_WARP_PED_INTO_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped to be warped into the vehicle."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle into which the ped will be warped."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "void",
            "description": "```\nNativeDB Introduced: v323\n```\n\nWarp a ped into a vehicle.\r\n**Note**: It's better to use [`TASK_ENTER_VEHICLE`](#\\_0xC20E50AA46D09CA8) with the flag \"warp\" flag instead of this native.\n\n**This is the server-side RPC native equivalent of the client native [TASK_WARP_PED_INTO_VEHICLE](?\\_0x9A7D091411C5F684).**",
            "examples": [],
            "hash": "0x65D4A35D",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "PROFILER": {
        "0xC795A4A9": {
            "name": "PROFILER_ENTER_SCOPE",
            "params": [
                {
                    "name": "scopeName",
                    "type": "const char*",
                    "description": "Scope name."
                }
            ],
            "return_type": "void",
            "description": "Scope entry for profiler.",
            "examples": [],
            "hash": "0xC795A4A9",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xB39CA35C": {
            "name": "PROFILER_EXIT_SCOPE",
            "params": [],
            "return_type": "void",
            "description": "Scope exit for profiler.",
            "examples": [],
            "hash": "0xB39CA35C",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xF8B7D7BB": {
            "name": "PROFILER_IS_RECORDING",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns true if the profiler is active.",
            "examples": [],
            "hash": "0xF8B7D7BB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "True or false."
        }
    }
}