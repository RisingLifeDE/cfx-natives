{
    "AUDIO": {
        "0x8AA1F3C2": {
            "name": "SET_EMITTER_PROBE_LENGTH",
            "params": [
                {
                    "name": "probeLength",
                    "type": "float",
                    "description": "The desired probe length (20.0 - 150.0)"
                }
            ],
            "return_type": "void",
            "description": "Allows StaticEmitter's without a linked entity to make use of environment features like occlusion and reverb even if they are located higher than 20.0 units above any static collision inside interiors.\n\nThis native allows you to extend the probe range up to 150.0 units.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"setEmitterProbeLength\", function(src, args, raw)\r\n    local probeLength = (tonumber(args[1]) + 0.0)\r\n\r\n    print(\"Extending emitter probes to: \", probeLength)\r\n    SetEmitterProbeLength(probeLength)\r\nend)\r\n\r\nRegisterCommand(\"resetEmitterProbeLength\", function()\r\n    print(\"Resetting emitter probes to default settings\")\r\n    SetEmitterProbeLength(20.0)\r\nend)"
                }
            ],
            "hash": "0x8AA1F3C2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "CAMERA": {
        "0x8F57A89D": {
            "name": "GET_CAM_MATRIX",
            "params": [
                {
                    "name": "camera",
                    "type": "Cam"
                },
                {
                    "name": "rightVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "forwardVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "upVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "position",
                    "type": "const Vector3*"
                }
            ],
            "return_type": "void",
            "description": "Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.",
            "examples": [],
            "hash": "0x8F57A89D",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DISCORD": {
        "0x6A02254D": {
            "name": "SET_DISCORD_APP_ID",
            "params": [
                {
                    "name": "appId",
                    "type": "const char*",
                    "description": "A valid Discord API App Id, can be generated at https://discordapp.com/developers/applications/"
                }
            ],
            "return_type": "void",
            "description": "This native sets the app id for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x6A02254D",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCBBC3FAC": {
            "name": "SET_DISCORD_RICH_PRESENCE_ACTION",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "The button index, either 0 or 1."
                },
                {
                    "name": "label",
                    "type": "const char*",
                    "description": "The text to display on the button."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The URL to open when clicking the button. This has to start with `fivem://connect/` or `https://`."
                }
            ],
            "return_type": "void",
            "description": "Sets a clickable button to be displayed in a player's Discord rich presence.",
            "examples": [],
            "hash": "0xCBBC3FAC",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x53DFD530": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x53DFD530",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF61D04C4": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. Note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xF61D04C4",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x35E62B6A": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over small image asset. Note that you must also set a valid small image asset using the SET_DISCORD_RICH_PRESENCE_ASSET_SMALL native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x35E62B6A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB029D2FA": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over image asset. Note that you must also set a valid image asset using the SET_DISCORD_RICH_PRESENCE_ASSET native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xB029D2FA",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DUI": {
        "0x23EAF899": {
            "name": "CREATE_DUI",
            "params": [
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The initial URL to load in the browser."
                },
                {
                    "name": "width",
                    "type": "int",
                    "description": "The width of the backing surface."
                },
                {
                    "name": "height",
                    "type": "int",
                    "description": "The height of the backing surface."
                }
            ],
            "return_type": "long",
            "description": "Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.",
            "examples": [],
            "hash": "0x23EAF899",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A DUI object."
        },
        "0xA085CB10": {
            "name": "DESTROY_DUI",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "void",
            "description": "Destroys a DUI browser.",
            "examples": [],
            "hash": "0xA085CB10",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1655D41D": {
            "name": "GET_DUI_HANDLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the NUI window handle for a specified DUI browser object.",
            "examples": [],
            "hash": "0x1655D41D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The NUI window handle, for use in e.g. CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
        },
        "0x7AAC3B4C": {
            "name": "IS_DUI_AVAILABLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not a browser is created for a specified DUI browser object.",
            "examples": [],
            "hash": "0x7AAC3B4C",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A boolean indicating TRUE if the browser is created."
        },
        "0xCD380DA9": {
            "name": "SEND_DUI_MESSAGE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "jsonString",
                    "type": "const char*",
                    "description": "The message, encoded as JSON."
                }
            ],
            "return_type": "void",
            "description": "Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.",
            "examples": [],
            "hash": "0xCD380DA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5D01F191": {
            "name": "SEND_DUI_MOUSE_DOWN",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x5D01F191",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD9D7A0AA": {
            "name": "SEND_DUI_MOUSE_MOVE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The mouse X position."
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The mouse Y position."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.",
            "examples": [],
            "hash": "0xD9D7A0AA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1D735B93": {
            "name": "SEND_DUI_MOUSE_UP",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x1D735B93",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x2D62133A": {
            "name": "SEND_DUI_MOUSE_WHEEL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "deltaY",
                    "type": "int",
                    "description": "The wheel Y delta."
                },
                {
                    "name": "deltaX",
                    "type": "int",
                    "description": "The wheel X delta."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse wheel' event for a DUI object.",
            "examples": [],
            "hash": "0x2D62133A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF761D9F3": {
            "name": "SET_DUI_URL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The new URL."
                }
            ],
            "return_type": "void",
            "description": "Navigates the specified DUI browser to a different URL.",
            "examples": [],
            "hash": "0xF761D9F3",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "ENTITY": {
        "0xEDBE6ADD": {
            "name": "IS_ENTITY_POSITION_FROZEN",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to check for"
                }
            ],
            "return_type": "BOOL",
            "description": "A getter for [FREEZE_ENTITY_POSITION](#\\_0x428CA6DBD1094446).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local isFrozen = IsEntityPositionFrozen(PlayerPedId())"
                },
                {
                    "lang": "js",
                    "code": "const isFrozen = IsEntityPositionFrozen(PlayerPedId());"
                }
            ],
            "hash": "0xEDBE6ADD",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "Boolean stating if it is frozen or not."
        }
    },
    "GRAPHICS": {
        "0xDD76B263": {
            "name": "CLEAR_DRAW_ORIGIN",
            "params": [],
            "return_type": "void",
            "description": "Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\\_0xE10198D5) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\\_0xE10198D5) for further information.",
            "examples": [],
            "hash": "0xDD76B263",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x8B25BC20": {
            "name": "DOES_TEXTURE_EXIST",
            "params": [
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "texture id created by `0xC5E7204F322E49EB`."
                }
            ],
            "return_type": "BOOL",
            "description": "In compare to `0x31DC8D3F216D8509` return true if texture its created when `0x31DC8D3F216D8509` return true if you put there any id in valid range",
            "examples": [],
            "hash": "0x8B25BC20",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xCD4D9DD5": {
            "name": "DRAW_BOX",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD4D9DD5",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xB3426BCC": {
            "name": "DRAW_LINE",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3426BCC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xABD19253": {
            "name": "DRAW_POLY",
            "params": [
                {
                    "name": "x1",
                    "type": "float"
                },
                {
                    "name": "y1",
                    "type": "float"
                },
                {
                    "name": "z1",
                    "type": "float"
                },
                {
                    "name": "x2",
                    "type": "float"
                },
                {
                    "name": "y2",
                    "type": "float"
                },
                {
                    "name": "z2",
                    "type": "float"
                },
                {
                    "name": "x3",
                    "type": "float"
                },
                {
                    "name": "y3",
                    "type": "float"
                },
                {
                    "name": "z3",
                    "type": "float"
                },
                {
                    "name": "red",
                    "type": "int"
                },
                {
                    "name": "green",
                    "type": "int"
                },
                {
                    "name": "blue",
                    "type": "int"
                },
                {
                    "name": "alpha",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xABD19253",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x2CA8F641": {
            "name": "GET_ASPECT_RATIO",
            "params": [],
            "return_type": "float",
            "description": "Gets the current aspect ratio\n\n```lua\nlocal ratio = GetAspectRatio()\r\nprint(string.format(\"%.2f\", ratio))\n```",
            "examples": [],
            "hash": "0x2CA8F641",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x337F0116": {
            "name": "GET_CURRENT_SCREEN_RESOLUTION",
            "params": [
                {
                    "name": "width",
                    "type": "int*"
                },
                {
                    "name": "height",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "Gets the current screen resolution.\n\n```lua\nlocal  width, height = GetCurrentScreenResolution()\r\nprint(string.format(\"Current screen resolution: %dx%d\", width, height))\r\n\n```",
            "examples": [],
            "hash": "0x337F0116",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x1582C7F2": {
            "name": "REMOVE_TEXTURE",
            "params": [
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "texture id created by `0xC5E7204F322E49EB`."
                }
            ],
            "return_type": "void",
            "description": "Removes the specified texture and remove it from the ped.\r\nUnlike `0x6BEFAA907B076859` which only marks the texture as \"can be reused\" (and keeps it until will be reused), this function deletes it right away. Can fix some sync issues. `DOES_TEXTURE_EXIST` can be use to wait until fully unloaded by game\n\n```lua\nRemoveTexture(textureId)\r\nwhile DoesTextureExist(textureId) do \r\n    Wait(0)\r\nend\n```",
            "examples": [],
            "hash": "0x1582C7F2",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xE10198D5": {
            "name": "SET_DRAW_ORIGIN",
            "params": [
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                },
                {
                    "name": "is2d",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Sets the on-screen drawing origin for draw-functions in world coordinates.\n\nThe effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\\_0xDD76B263) and is limited to 32 different origins each frame.",
            "examples": [],
            "hash": "0xE10198D5",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xADA9255D": {
            "name": "SET_TEXT_FONT_FOR_CURRENT_COMMAND",
            "params": [
                {
                    "name": "fontId",
                    "type": "int",
                    "description": "The index of the font."
                }
            ],
            "return_type": "void",
            "description": "Sets the text font for the current text drawing command.",
            "examples": [],
            "hash": "0xADA9255D",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x68CDFA60": {
            "name": "SET_TEXT_JUSTIFICATION",
            "params": [
                {
                    "name": "justifyType",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x68CDFA60",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x6F60AB54": {
            "name": "SET_TEXT_WRAP",
            "params": [
                {
                    "name": "start",
                    "type": "float"
                },
                {
                    "name": "end",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x6F60AB54",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        }
    },
    "KVP": {
        "0xB3210203": {
            "name": "END_FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3210203",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xBD7BEBC5": {
            "name": "FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xBD7BEBC5",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xDD379006": {
            "name": "START_FIND_KVP",
            "params": [
                {
                    "name": "prefix",
                    "type": "const char*",
                    "description": "A prefix match"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis:2', 'should be taken with alcohol')\r\nSetResourceKvp('mollis:1', 'vesuvius citrate')\r\nSetResourceKvp('mollis:manufacturer', 'Betta Pharmaceuticals')\r\n\r\nlocal kvpHandle = StartFindKvp('mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil not key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nelse\r\n\tprint('No KVPs found')\r\nend"
                }
            ],
            "hash": "0xDD379006",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
        }
    },
    "MISC": {
        "0x49C1F6DC": {
            "name": "REGISTER_RAW_KEYMAP",
            "params": [
                {
                    "name": "keymapName",
                    "type": "const char*",
                    "description": "A **unique** name that the keymap will be bound to, duplicates will result in the keymap not being registered."
                },
                {
                    "name": "onKeyDown",
                    "type": "Function",
                    "description": "The function to run when the key is being pressed, or `nil`."
                },
                {
                    "name": "onKeyUp",
                    "type": "Function",
                    "description": "The function to run when the key is no longer being pressed, or `nil`."
                },
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "The virtual key to bind this keymap to, see a list [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)"
                },
                {
                    "name": "canBeDisabled",
                    "type": "BOOL",
                    "description": "If calls to [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014) will disable this keymap, if a keymap was disabled when the key was pressed down it will still call `onKeyUp` on release."
                }
            ],
            "return_type": "void",
            "description": "Registers a keymap that will be triggered whenever `rawKeyIndex` is pressed or released.\n\n`onKeyUp` and `onKeyDown` will not provide any arguments.\n\n```ts\nfunction onStateChange();\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "function on_key_up()\r\n\tprint(\"key no longer pressed\")\r\nend\r\n\r\nfunction on_key_down()\r\n\tprint(\"key is pressed\")\r\nend\r\n\r\nlocal KEY_E = 69\r\nlocal canBeDisabled = false\r\n\r\n\r\nRegisterRawKeymap(\"our_keymap\", on_key_up, on_key_down, KEY_E, canBeDisabled)"
                }
            ],
            "hash": "0x49C1F6DC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x6E38C1B9": {
            "name": "REMAP_RAW_KEYMAP",
            "params": [
                {
                    "name": "keymapName",
                    "type": "const char*",
                    "description": "the name given to the keymap in [REGISTER_RAW_KEYMAP](#\\_0x49C1F6DC)"
                },
                {
                    "name": "newRawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "void",
            "description": "Remaps the keymap bound to `keymapName` to `newRawKeyIndex`\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "\r\nfunction on_key_up()\r\n\tprint(\"key no longer pressed\")\r\nend\r\n\r\nfunction on_key_down()\r\n\tprint(\"key is pressed\")\r\nend\r\n\r\nlocal KEY_SPACE = 32\r\nlocal canBeDisabled = false\r\n\r\nlocal KEY_E = 69\r\n\r\nRegisterRawKeymap(\"our_keymap\", on_key_up, on_key_down, KEY_SPACE, canBeDisabled)\r\n\r\nRemapRawKeymap(\"our_keymap\", KEY_E)"
                }
            ],
            "hash": "0x6E38C1B9",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0xC44C2F44": {
            "name": "SET_BACKFACECULLING",
            "params": [
                {
                    "name": "toggle",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC44C2F44",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x8A7A8DAC": {
            "name": "SET_CURSOR_LOCATION",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "X position."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Y position."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x8A7A8DAC",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "A boolean."
        },
        "0x85A10FFD": {
            "name": "SET_IGNORE_VEHICLE_OWNERSHIP_FOR_STOWING",
            "params": [
                {
                    "name": "ignore",
                    "type": "BOOL",
                    "description": "true to let the local player stow carriables on any hunting wagon, false to use the default behaviour."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.",
            "examples": [],
            "hash": "0x85A10FFD",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        }
    },
    "MUMBLE": {
        "0x262663C5": {
            "name": "MUMBLE_CREATE_CHANNEL",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "ID of the channel."
                }
            ],
            "return_type": "void",
            "description": "Create a permanent voice channel.",
            "examples": [],
            "hash": "0x262663C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x1D5D50C2": {
            "name": "MUMBLE_IS_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to get the mute state for"
                }
            ],
            "return_type": "BOOL",
            "description": "Checks if the player is currently muted",
            "examples": [],
            "hash": "0x1D5D50C2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the player is muted"
        },
        "0xCC6C2EB1": {
            "name": "MUMBLE_SET_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to set the mute state of"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to mute or unmute the player"
                }
            ],
            "return_type": "void",
            "description": "Mutes or unmutes the specified player",
            "examples": [],
            "hash": "0xCC6C2EB1",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "NUI": {
        "0xBDBA226F": {
            "name": "GET_NUI_CURSOR_POSITION",
            "params": [
                {
                    "name": "x",
                    "type": "int*"
                },
                {
                    "name": "y",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDBA226F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x98545E6D": {
            "name": "IS_NUI_FOCUSED",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.",
            "examples": [],
            "hash": "0x98545E6D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0x39C9DC92": {
            "name": "IS_NUI_FOCUS_KEEPING_INPUT",
            "params": [],
            "return_type": "BOOL",
            "description": "Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.",
            "examples": [],
            "hash": "0x39C9DC92",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0xC59B980C": {
            "name": "REGISTER_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "Function"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC59B980C",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCD03CDA9": {
            "name": "REGISTER_NUI_CALLBACK_TYPE",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD03CDA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xA8AE9C2F": {
            "name": "REGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "Function"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8AE9C2F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x78608ACB": {
            "name": "SEND_NUI_MESSAGE",
            "params": [
                {
                    "name": "jsonString",
                    "type": "char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78608ACB",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x1722C938": {
            "name": "SET_MANUAL_SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [
                {
                    "name": "manualShutdown",
                    "type": "BOOL",
                    "description": "TRUE to manually shut down the loading screen NUI."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.",
            "examples": [],
            "hash": "0x1722C938",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5B98AE30": {
            "name": "SET_NUI_FOCUS",
            "params": [
                {
                    "name": "hasFocus",
                    "type": "BOOL"
                },
                {
                    "name": "hasCursor",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B98AE30",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3FF5E5F8": {
            "name": "SET_NUI_FOCUS_KEEP_INPUT",
            "params": [
                {
                    "name": "keepInput",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FF5E5F8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3734AAFF": {
            "name": "SET_NUI_ZINDEX",
            "params": [
                {
                    "name": "zIndex",
                    "type": "int",
                    "description": "New z-index value."
                }
            ],
            "return_type": "void",
            "description": "Set the z-index of the NUI resource.",
            "examples": [],
            "hash": "0x3734AAFF",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB9234AFB": {
            "name": "SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [],
            "return_type": "void",
            "description": "Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.",
            "examples": [],
            "hash": "0xB9234AFB",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x7FB46432": {
            "name": "UNREGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*",
                    "description": "The callback type to target"
                }
            ],
            "return_type": "void",
            "description": "Will unregister and cleanup a registered NUI callback handler.\n\nUse along side the REGISTER_RAW_NUI_CALLBACK native.",
            "examples": [],
            "hash": "0x7FB46432",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "OBJECT": {
        "0x2F7AA05C": {
            "name": "CREATE_OBJECT",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component, 'ground level'."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\\_0x509D5878EB39E842).**",
            "examples": [],
            "hash": "0x2F7AA05C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x58040420": {
            "name": "CREATE_OBJECT_NO_OFFSET",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model centered at the specified position.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\\_0x9A294B2138ABB884).**",
            "examples": [],
            "hash": "0x58040420",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x6886C3FE": {
            "name": "GET_ALL_OBJECTS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [],
            "hash": "0x6886C3FE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of object handles."
        }
    },
    "PAD": {
        "0x8BCF0014": {
            "name": "DISABLE_RAW_KEY_THIS_FRAME",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Disables the specified `rawKeyIndex`, making it not trigger the regular `IS_RAW_KEY_*` natives.\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local KEY_SPACE = 32\r\nDisableRawKeyThisFrame(KEY_SPACE)\r\n-- This will not get triggered this frame\r\nif IsRawKeyDown(KEY_SPACE) then\r\n\tprint(\"unreachable :(\")\r\nend\r\n-- this will get triggered\r\nif IsDisabledRawKeyDown(KEY_SPACE) then\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x8BCF0014",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x36366EC3": {
            "name": "IS_DISABLED_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x36366EC3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x1F7CBBAA": {
            "name": "IS_DISABLED_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x1F7CBBAA",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0x72B66C09": {
            "name": "IS_DISABLED_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was released, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0x72B66C09",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x2C033875": {
            "name": "IS_DISABLED_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x2C033875",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        },
        "0xD95A7387": {
            "name": "IS_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0xD95A7387",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x69F7C29E": {
            "name": "IS_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x69F7C29E",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0xEAA50861": {
            "name": "IS_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was just released on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0xEAA50861",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x36F4E505": {
            "name": "IS_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up  on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x36F4E505",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        }
    },
    "PLAYER": {
        "0x8689A825": {
            "name": "GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032).",
            "examples": [],
            "hash": "0x8689A825",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "Returns player melee weapon damage modifier value."
        },
        "0x2A3D7CDA": {
            "name": "GET_PLAYER_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3).",
            "examples": [],
            "hash": "0x2A3D7CDA",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon damage modifier."
        },
        "0xF1543251": {
            "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C).",
            "examples": [],
            "hash": "0xF1543251",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon defense modifier."
        },
        "0x986B65FF": {
            "name": "GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2",
            "params": [
                {
                    "name": "playerId",
                    "type": "Player",
                    "description": "The player index."
                }
            ],
            "return_type": "float",
            "description": "A getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC).",
            "examples": [],
            "hash": "0x986B65FF",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The value of player weapon defense modifier 2."
        }
    },
    "SOCIAL": {
        "0x7BDCBD45": {
            "name": "SET_RICH_PRESENCE",
            "params": [
                {
                    "name": "presenceState",
                    "type": "const char*",
                    "description": "The rich presence string to set."
                }
            ],
            "return_type": "void",
            "description": "Sets the player's rich presence detail state for social platform providers to a specified string.",
            "examples": [],
            "hash": "0x7BDCBD45",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "STREAMING": {
        "0x322B1192": {
            "name": "GET_INTERIOR_ENTITIES_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "bbMinX",
                    "type": "float*"
                },
                {
                    "name": "bbMinY",
                    "type": "float*"
                },
                {
                    "name": "bbMinZ",
                    "type": "float*"
                },
                {
                    "name": "bbMaxX",
                    "type": "float*"
                },
                {
                    "name": "bbMaxY",
                    "type": "float*"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorEntitiesExtents(interiorId, roomId)\r\n  print(\"current entities extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
                }
            ],
            "hash": "0x322B1192",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior entities extents."
        },
        "0xF772BB2C": {
            "name": "GET_INTERIOR_PORTAL_CORNER_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "cornerIndex",
                    "type": "int",
                    "description": "Portal's corner index."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n  local cornerIndex = 0\r\n\r\n  local x, y, z = GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex)\r\n  print(\"position of portal \" .. portalIndex .. \"corner index \" .. cornerIndex .. \" is: \" .. vec(x, y, z))\r\nend"
                }
            ],
            "hash": "0xF772BB2C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal corner position."
        },
        "0xD05BB8B1": {
            "name": "GET_INTERIOR_PORTAL_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" portals\")\r\nend"
                }
            ],
            "hash": "0xD05BB8B1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of portals in interior."
        },
        "0x9A0E1700": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_ARCHETYPE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local archetype = GetInteriorPortalEntityArchetype(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" archetype is: \" .. archetype)\r\n  end\r\nend"
                }
            ],
            "hash": "0x9A0E1700",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity archetype."
        },
        "0xC68021B": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  print(\"portal \" .. portalIndex ..\" entity count is: \" .. count)\r\nend"
                }
            ],
            "hash": "0xC68021B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity count."
        },
        "0x9DA2E811": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local flag = GetInteriorPortalEntityFlag(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" flag is: \" .. flag)\r\n  end\r\nend"
                }
            ],
            "hash": "0x9DA2E811",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity flag."
        },
        "0x9B7AB83C": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z = GetInteriorPortalEntityPosition(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" position is: \" .. vec3(x, y, z))\r\n  end\r\nend"
                }
            ],
            "hash": "0x9B7AB83C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity position."
        },
        "0x9F9CEB63": {
            "name": "GET_INTERIOR_PORTAL_ENTITY_ROTATION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "rotX",
                    "type": "float*"
                },
                {
                    "name": "rotY",
                    "type": "float*"
                },
                {
                    "name": "rotZ",
                    "type": "float*"
                },
                {
                    "name": "rotW",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    local x, y, z, w = GetInteriorPortalEntityRotation(interiorId, portalIndex, i)\r\n    print(\"portal \" .. portalIndex ..\" entity \" .. i .. \" rotation is: \" .. vec4(x, y, z, w))\r\n  end\r\nend"
                }
            ],
            "hash": "0x9F9CEB63",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal entity rotation."
        },
        "0xC74DA47C": {
            "name": "GET_INTERIOR_PORTAL_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalFlag = GetInteriorPortalFlag(interiorId, 0)\r\n  print(\"portal 0 flag is: \" .. portalRoomFrom)\r\nend"
                }
            ],
            "hash": "0xC74DA47C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's flag."
        },
        "0xAA9C141D": {
            "name": "GET_INTERIOR_PORTAL_ROOM_FROM",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomFrom = GetInteriorPortalRoomFrom(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room FROM is: \" .. portalRoomFrom)\r\nend"
                }
            ],
            "hash": "0xAA9C141D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's room FROM index."
        },
        "0x3F47F0E8": {
            "name": "GET_INTERIOR_PORTAL_ROOM_TO",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomTo = GetInteriorPortalRoomTo(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room TO is: \" .. portalRoomTo)\r\nend"
                }
            ],
            "hash": "0x3F47F0E8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Portal's room TO index."
        },
        "0x77A435B0": {
            "name": "GET_INTERIOR_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "posX",
                    "type": "float*"
                },
                {
                    "name": "posY",
                    "type": "float*"
                },
                {
                    "name": "posZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z = GetInteriorPosition(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" position is: \" .. vec(x, y, z))\r\nend"
                }
            ],
            "hash": "0x77A435B0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior position."
        },
        "0xA2737C2C": {
            "name": "GET_INTERIOR_ROOM_COUNT",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorRoomCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" rooms\")\r\nend"
                }
            ],
            "hash": "0xA2737C2C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of rooms in interior."
        },
        "0xF9E795DD": {
            "name": "GET_INTERIOR_ROOM_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "bbMinX",
                    "type": "float*"
                },
                {
                    "name": "bbMinY",
                    "type": "float*"
                },
                {
                    "name": "bbMinZ",
                    "type": "float*"
                },
                {
                    "name": "bbMaxX",
                    "type": "float*"
                },
                {
                    "name": "bbMaxY",
                    "type": "float*"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorRoomExtents(interiorId, roomId)\r\n  print(\"current room extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"
                }
            ],
            "hash": "0xF9E795DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room extents."
        },
        "0x6B7AF743": {
            "name": "GET_INTERIOR_ROOM_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomFlag = GetInteriorRoomFlag(interiorId, roomId)\r\n  print(\"current room flag is: \" .. roomFlag)\r\nend"
                }
            ],
            "hash": "0x6B7AF743",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's flag."
        },
        "0xE0EE05F8": {
            "name": "GET_INTERIOR_ROOM_INDEX_BY_HASH",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomHash",
                    "type": "int",
                    "description": "Interior room hash."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  print(\"current room index is: \" .. roomId)\r\nend"
                }
            ],
            "hash": "0xE0EE05F8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room index, -1 if failed."
        },
        "0x11755DF2": {
            "name": "GET_INTERIOR_ROOM_NAME",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomName = GetInteriorRoomName(interiorId, roomId)\r\n  print(\"current room name is: \" .. roomName)\r\nend"
                }
            ],
            "hash": "0x11755DF2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's name."
        },
        "0x82BA3F88": {
            "name": "GET_INTERIOR_ROOM_TIMECYCLE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomTimecycle = GetInteriorRoomTimecycle(interiorId, roomId)\r\n  print(\"current room timecycle hash is: \" .. roomTimecycle)\r\nend"
                }
            ],
            "hash": "0x82BA3F88",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Room's timecycle hash."
        },
        "0x5A039998": {
            "name": "GET_INTERIOR_ROTATION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "rotx",
                    "type": "float*"
                },
                {
                    "name": "rotY",
                    "type": "float*"
                },
                {
                    "name": "rotZ",
                    "type": "float*"
                },
                {
                    "name": "rotW",
                    "type": "float*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z, w = GetInteriorRotation(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" rotation is: \" .. vec(x, y, z, w))\r\nend"
                }
            ],
            "hash": "0x5A039998",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Interior rotation in quaternion."
        },
        "0x87F43553": {
            "name": "SET_INTERIOR_PORTAL_CORNER_POSITION",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "cornerIndex",
                    "type": "int",
                    "description": "Interior corner index."
                },
                {
                    "name": "posX",
                    "type": "float"
                },
                {
                    "name": "posY",
                    "type": "float"
                },
                {
                    "name": "posZ",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalCount = GetInteriorPortalCount(interiorId)\r\n\r\n  -- rip portals\r\n  for portalIndex = 0, portalCount - 1 do\r\n    for cornerIndex = 0, 3 do -- 4 corners\r\n      SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, 0.0, 0.0, 0.0)\r\n    end\r\n  end\r\n  \r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x87F43553",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x8349CD76": {
            "name": "SET_INTERIOR_PORTAL_ENTITY_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "entityIndex",
                    "type": "int",
                    "description": "Portal entity index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal portalIndex = 0\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalEntityCount(interiorId, portalIndex)\r\n  for i=0, count-1 do\r\n    SetInteriorPortalEntityFlag(interiorId, portalIndex, i, 0)\r\n  end\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x8349CD76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x88B2355E": {
            "name": "SET_INTERIOR_PORTAL_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalFlag(interiorId, portalIndex, 1)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x88B2355E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x298FC783": {
            "name": "SET_INTERIOR_PORTAL_ROOM_FROM",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "roomFrom",
                    "type": "int",
                    "description": "New value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomFrom(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x298FC783",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x58982680": {
            "name": "SET_INTERIOR_PORTAL_ROOM_TO",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "portalIndex",
                    "type": "int",
                    "description": "Interior portal index."
                },
                {
                    "name": "roomTo",
                    "type": "int",
                    "description": "New value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomTo(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x58982680",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x423F7E39": {
            "name": "SET_INTERIOR_PROBE_LENGTH",
            "params": [
                {
                    "name": "probeLength",
                    "type": "float",
                    "description": "The desired probe length (0.0 - 150.0)"
                }
            ],
            "return_type": "void",
            "description": "Overwrite the games default CPortalTracker interior detection range.\r\nThis fixes potentially unwanted behaviour in the base game and allows you to build custom interiors with larger ceiling heights without running into graphical glitches.\n\nBy default CPortalTracker will probe 4 units downward trying to reach collisions that are part of the interior the entity is in.\r\nIf no collision can be found 16 units are used in some circumstances.\n\nThere are 30+ hard coded special cases, only some of them exposed via script (for example `ENABLE_STADIUM_PROBES_THIS_FRAME`).\n\nThis native allows you to extend the probe range up to 150 units which is the same value the game uses for the `xs_arena_interior`",
            "examples": [
                {
                    "lang": "lua",
                    "code": "RegisterCommand(\"setInteriorProbeLength\", function(src, args, raw)\r\n    local probeLength = (tonumber(args[1]) + 0.0)\r\n\r\n    print(\"Extending interior detection probes to: \", probeLength)\r\n    SetInteriorProbeLength(probeLength)\r\nend)\r\n\r\nRegisterCommand(\"resetInteriorProbeLength\", function()\r\n    print(\"Resetting interior detection probes to default settings\")\r\n    SetInteriorProbeLength(0.0)\r\nend)"
                }
            ],
            "hash": "0x423F7E39",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4FDCF51E": {
            "name": "SET_INTERIOR_ROOM_EXTENTS",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "bbMinX",
                    "type": "float"
                },
                {
                    "name": "bbMinY",
                    "type": "float"
                },
                {
                    "name": "bbMinZ",
                    "type": "float"
                },
                {
                    "name": "bbMaxX",
                    "type": "float"
                },
                {
                    "name": "bbMaxY",
                    "type": "float"
                },
                {
                    "name": "bbMaxZ",
                    "type": "float"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  SetInteriorRoomExtents(interiorId, 0, -999.0, -999.0, -100.0, 999.0, 999.0, 100.0) -- 0 is a limbo usually\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x4FDCF51E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x5518D60B": {
            "name": "SET_INTERIOR_ROOM_FLAG",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "New flag value."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  SetInteriorRoomFlag(interiorId, roomId, 64)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x5518D60B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x31C9A848": {
            "name": "SET_INTERIOR_ROOM_TIMECYCLE",
            "params": [
                {
                    "name": "interiorId",
                    "type": "int",
                    "description": "The target interior."
                },
                {
                    "name": "roomIndex",
                    "type": "int",
                    "description": "Interior room index."
                },
                {
                    "name": "timecycleHash",
                    "type": "int",
                    "description": "Timecycle hash."
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local timecycleHash = GetHashKey(\"scanline_cam\")\r\n  SetInteriorRoomTimecycle(interiorId, roomId, timecycleHash)\r\n  RefreshInterior(interiorId)\r\nend"
                }
            ],
            "hash": "0x31C9A848",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xFC52CB91": {
            "name": "UPDATE_MAPDATA_ENTITY",
            "params": [
                {
                    "name": "mapdata",
                    "type": "int",
                    "description": "A fwMapData index from GET_MAPDATA_FROM_HASH_KEY."
                },
                {
                    "name": "entity",
                    "type": "int",
                    "description": "An entity index from GET_ENTITY_INDEX_FROM_MAPDATA."
                },
                {
                    "name": "entityDef",
                    "type": "Object",
                    "description": "The new entity definition in fwEntityDef format."
                }
            ],
            "return_type": "void",
            "description": "Transiently updates the entity with the specified mapdata index and entity index.\r\nThis function supports SDK infrastructure and is not intended to be used directly from your code.",
            "examples": [],
            "hash": "0xFC52CB91",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "VEHICLE": {
        "0x77CC80DC": {
            "name": "DOES_TRAIN_STOP_AT_STATIONS",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x77CC80DC",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "True if the train stops at stations. False otherwise"
        },
        "0xA4921EF5": {
            "name": "GET_TRAIN_CRUISE_SPEED",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "float",
            "description": "Gets the trains desired speed.",
            "examples": [],
            "hash": "0xA4921EF5",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The desired cruise speed of the train. Not the speed the train is currently traveling at"
        },
        "0x8DAF79B6": {
            "name": "GET_TRAIN_DIRECTION",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets the direction the train is facing",
            "examples": [],
            "hash": "0x8DAF79B6",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "True if the train is moving forward on the track, False otherwise"
        },
        "0x81B50033": {
            "name": "GET_TRAIN_STATE",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x81B50033",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The trains current state```cpp\nenum eTrainState\r\n{\r\n    MOVING = 0,\r\n    ENTERING_STATION,\r\n    OPENING_DOORS,\r\n    STOPPED,\r\n    CLOSING_DOORS,\r\n    LEAVING_STATION,\r\n}\n```"
        },
        "0x9AA339D": {
            "name": "GET_TRAIN_TRACK_INDEX",
            "params": [
                {
                    "name": "train",
                    "type": "Vehicle",
                    "description": "The train handle"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9AA339D",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": "The track index the train is currently on."
        },
        "0x483B013C": {
            "name": "GET_VEHICLE_HANDBRAKE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x483B013C",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0x1382FCEA": {
            "name": "GET_VEHICLE_STEERING_ANGLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x1382FCEA",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        },
        "0xBB340D04": {
            "name": "IS_VEHICLE_ENGINE_STARTING",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xBB340D04",
            "ns": "CFX",
            "apiset": "shared",
            "game": "gta5",
            "resultsDescription": ""
        }
    },
    "HUD": {
        "0xA6FF71C9": {
            "name": "GET_MINIMAP_TYPE",
            "params": [],
            "return_type": "int",
            "description": "Get the minimap type:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```",
            "examples": [],
            "hash": "0xA6FF71C9",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        },
        "0x5FB53015": {
            "name": "SET_MINIMAP_TYPE",
            "params": [
                {
                    "name": "type",
                    "type": "int",
                    "description": "Type to set the minimap to."
                }
            ],
            "return_type": "void",
            "description": "Possible Types:\n\n```\n0 = Off,\r\n1 = Regular,\r\n2 = Expanded,\r\n3 = Simple,\n```",
            "examples": [],
            "hash": "0x5FB53015",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3"
        }
    },
    "NETWORK": {
        "0x1E2E3177": {
            "name": "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID",
            "params": [
                {
                    "name": "netId",
                    "type": "int",
                    "description": "The network id to check"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x1E2E3177",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "Returns `true` if both the network id exist, and the network id has a game object."
        }
    },
    "PED": {
        "0x9C5E7C9C": {
            "name": "GET_PED_BONE_MATRIX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "boneId",
                    "type": "int"
                },
                {
                    "name": "forwardVector",
                    "type": "Vector3*"
                },
                {
                    "name": "rightVector",
                    "type": "Vector3*"
                },
                {
                    "name": "upVector",
                    "type": "Vector3*"
                },
                {
                    "name": "position",
                    "type": "Vector3*"
                }
            ],
            "return_type": "void",
            "description": "Returns the bone matrix of the specified bone id. usefull for entity attachment",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local fowardVector, rightVector, upVector, position = GetPedBoneMatrix(PlayerPedId(),boneId)"
                }
            ],
            "hash": "0x9C5E7C9C",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "*   **forwardVector**:\n*   **rightVector**:\n*   **upVector**:\n*   **position**:"
        }
    },
    "RESOURCE": {
        "0x7389B5DF": {
            "name": "DELETE_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "DeleteResourceKvp('liberty_city')"
                }
            ],
            "hash": "0x7389B5DF",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x4152C90": {
            "name": "DELETE_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x4152C90",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xE5E9EBBB": {
            "name": "GET_CURRENT_RESOURCE_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the name of the currently executing resource.",
            "examples": [],
            "hash": "0xE5E9EBBB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The name of the resource."
        },
        "0x4D52FE5B": {
            "name": "GET_INVOKING_RESOURCE",
            "params": [],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x4D52FE5B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x863F27B": {
            "name": "GET_NUM_RESOURCES",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x863F27B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x776E864": {
            "name": "GET_NUM_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key to look up in the resource manifest."
                }
            ],
            "return_type": "int",
            "description": "Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x776E864",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x387246B7": {
            "name": "GET_RESOURCE_BY_FIND_INDEX",
            "params": [
                {
                    "name": "findIndex",
                    "type": "int",
                    "description": "The index of the resource (starting at 0)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local resourceList = {}\r\nfor i = 0, GetNumResources(), 1 do\r\n  local resource_name = GetResourceByFindIndex(i)\r\n  if resource_name and GetResourceState(resource_name) == \"started\" then\r\n    table.insert(resourceList, resource_name)\r\n  end\r\nend\r\nprint(table.unpack(resourceList))"
                }
            ],
            "hash": "0x387246B7",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource name as a `string`"
        },
        "0x97628584": {
            "name": "GET_RESOURCE_COMMANDS",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*"
                }
            ],
            "return_type": "Object",
            "description": "Returns all commands registered by the specified resource.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\",\r\n\"resource\": \"example_resource\",\r\n\"arity\" = -1,\r\n},\r\n{\r\n\"name\": \"command1\"\r\n\"resource\": \"example_resource2\",\r\n\"arity\" = -1,\r\n}\r\n]\n```",
            "examples": [],
            "hash": "0x97628584",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An object containing registered commands."
        },
        "0x35BDCEEA": {
            "name": "GET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpFloat('mollis')\r\nif kvpValue ~= 0.0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x35BDCEEA",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The floating-point value stored under the specified key, or 0.0 if not found."
        },
        "0x557B586A": {
            "name": "GET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "int",
            "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpInt('bananabread') \r\nif kvpValue ~= 0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x557B586A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The integer value stored under the specified key, or 0 if not found."
        },
        "0x5240DA5A": {
            "name": "GET_RESOURCE_KVP_STRING",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "const char*",
            "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpString('codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x5240DA5A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The string value stored under the specified key, or nil/null if not found."
        },
        "0x964BAB1D": {
            "name": "GET_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key in the resource manifest."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1]."
                }
            ],
            "return_type": "const char*",
            "description": "Gets the metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x964BAB1D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x4039B485": {
            "name": "GET_RESOURCE_STATE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the current state of the specified resource.",
            "examples": [],
            "hash": "0x4039B485",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`."
        },
        "0x76A9EE1F": {
            "name": "LOAD_RESOURCE_FILE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The file in the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`",
            "examples": [],
            "hash": "0x76A9EE1F",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The file contents"
        },
        "0xD233A168": {
            "name": "REGISTER_RESOURCE_AS_EVENT_HANDLER",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*",
                    "description": "An event name, or \"\\*\" to disable HLL event filtering for this resource."
                }
            ],
            "return_type": "void",
            "description": "An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.",
            "examples": [],
            "hash": "0xD233A168",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x21C7A35B": {
            "name": "SET_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis', 'vesuvius citrate')"
                }
            ],
            "hash": "0x21C7A35B",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x9ADD2938": {
            "name": "SET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42.5\r\nSetResourceKvpFloat('bananabread', lickMy)"
                }
            ],
            "hash": "0x9ADD2938",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x3517BFBE": {
            "name": "SET_RESOURCE_KVP_FLOAT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x3517BFBE",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x6A2B1E8": {
            "name": "SET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42\r\nSetResourceKvp('bananabread', lickMy)"
                }
            ],
            "hash": "0x6A2B1E8",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x26AEB707": {
            "name": "SET_RESOURCE_KVP_INT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x26AEB707",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xCF9A2FF": {
            "name": "SET_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0xCF9A2FF",
            "ns": "CFX",
            "apiset": "shared"
        }
    },
    "TASK": {
        "0xDE3316AB": {
            "name": "CLEAR_PED_TASKS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id. Use PlayerPedId() for your own character."
                }
            ],
            "return_type": "void",
            "description": "Clear a ped's tasks. Stop animations and other tasks created by scripts.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\\_0xE1EF3C1216AFF2CD).**",
            "examples": [],
            "hash": "0xDE3316AB",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xBC045625": {
            "name": "CLEAR_PED_TASKS_IMMEDIATELY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id."
                }
            ],
            "return_type": "void",
            "description": "Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\\_0xAAA34F8A7CB32098).**",
            "examples": [],
            "hash": "0xBC045625",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCB0D8932": {
            "name": "TASK_COMBAT_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "p2",
                    "type": "int"
                },
                {
                    "name": "p3",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nMakes the specified ped attack the target ped.\r\np2 should be 0\r\np3 should be 16\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\\_0xF166E48407BAC484).**",
            "examples": [],
            "hash": "0xCB0D8932",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2B84D1C4": {
            "name": "TASK_DRIVE_BY",
            "params": [
                {
                    "name": "driverPed",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "targetVehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "targetX",
                    "type": "float"
                },
                {
                    "name": "targetY",
                    "type": "float"
                },
                {
                    "name": "targetZ",
                    "type": "float"
                },
                {
                    "name": "distanceToShoot",
                    "type": "float"
                },
                {
                    "name": "pedAccuracy",
                    "type": "int"
                },
                {
                    "name": "p8",
                    "type": "BOOL"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nExample:\r\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\r\nNeeds working example. Doesn't seem to do anything.\r\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\r\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\r\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\\_0x2F8AF0E82773A171).**",
            "examples": [],
            "hash": "0x2B84D1C4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB8689B4E": {
            "name": "TASK_ENTER_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "timeout",
                    "type": "int"
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "flag",
                    "type": "int"
                },
                {
                    "name": "p6",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "```\nspeed 1.0 = walk, 2.0 = run\r\np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle\r\np6 is always 0\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\\_0xC20E50AA46D09CA8).**",
            "examples": [],
            "hash": "0xB8689B4E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC1971F30": {
            "name": "TASK_EVERYONE_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "void",
            "description": "TASK_EVERYONE_LEAVE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\\_0x7F93691AB4B92272).**",
            "examples": [],
            "hash": "0xC1971F30",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x80A9E7A7": {
            "name": "TASK_GO_STRAIGHT_TO_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The ped movement speed."
                },
                {
                    "name": "timeout",
                    "type": "int",
                    "description": "\\-1 , other values appear to break the ped movement."
                },
                {
                    "name": "targetHeading",
                    "type": "float",
                    "description": "The heading you want the ped to be on x,y,z coord."
                },
                {
                    "name": "distanceToSlide",
                    "type": "float",
                    "description": "The distance from x,y,z where the ped will start sliding."
                }
            ],
            "return_type": "void",
            "description": "TASK_GO_STRAIGHT_TO_COORD\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\\_0xD76B57B44F1E6F8B).**",
            "examples": [],
            "hash": "0x80A9E7A7",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF91DF93B": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The `Ped` Handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "fMoveBlendRatio",
                    "type": "float",
                    "description": "0.0 = still, 1.0 = walk, 2.0 = run, 3.0 = sprint."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "If defined, the pedestrian will only move if said vehicle exists. If you don't want any sort of association, just set it to `0`."
                },
                {
                    "name": "bUseLongRangeVehiclePathing",
                    "type": "BOOL",
                    "description": "Setting to `true` tells the vehicle to use longrange vehicle pathing."
                },
                {
                    "name": "drivingFlags",
                    "type": "int",
                    "description": "See `eDrivingMode` enum."
                },
                {
                    "name": "fMaxRangeToShootTargets",
                    "type": "float",
                    "description": "Determines the maximum distance at which the `Ped` will engage in combat with threatening targets."
                }
            ],
            "return_type": "void",
            "description": "Tells a ped to go to a coord by any means.\n\n```cpp\nenum eDrivingMode {\r\nDF_StopForCars = 1,\r\nDF_StopForPeds = 2,\r\nDF_SwerveAroundAllCars = 4,\r\nDF_SteerAroundStationaryCars = 8,\r\nDF_SteerAroundPeds = 16,\r\nDF_SteerAroundObjects = 32,\r\nDF_DontSteerAroundPlayerPed = 64,\r\nDF_StopAtLights = 128,\r\nDF_GoOffRoadWhenAvoiding = 256,\r\nDF_DriveIntoOncomingTraffic = 512,\r\nDF_DriveInReverse = 1024,\r\n// If pathfinding fails, cruise randomly instead of going on a straight line\r\nDF_UseWanderFallbackInsteadOfStraightLine = 2048,\r\nDF_AvoidRestrictedAreas = 4096,\r\n// These only work on MISSION_CRUISE\r\nDF_PreventBackgroundPathfinding = 8192,\r\nDF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,\r\nDF_UseShortCutLinks =  262144,\r\nDF_ChangeLanesAroundObstructions = 524288,\r\n// cruise tasks ignore this anyway--only used for goto's\r\nDF_UseSwitchedOffNodes =  2097152,\r\n// if you're going to be primarily driving off road\r\nDF_PreferNavmeshRoute =  4194304,\r\n// Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly\r\nDF_PlaneTaxiMode =  8388608,\r\nDF_ForceStraightLine = 16777216,\r\nDF_UseStringPullingAtJunctions = 33554432,\r\nDF_AvoidHighways = 536870912,\r\nDF_ForceJoinInRoadDirection = 1073741824,\r\n// Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions\r\nDRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\t\t// Obey lights too\r\n// Like the above, but doesn't steer around anything in its way - will only wait instead.\r\nDRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch.\r\n// Default \"alerted\" driving mode. drives around everything, doesn't obey lights\r\nDRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars,\r\n// Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering\r\nDRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\r\n// Smashes through everything\r\nDRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks\r\n// Drives normally except for the fact that it ignores lights\r\nDRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions\r\n// Try to swerve around everything, but stop for lights if necessary\r\nDRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n// Swerve around cars, be careful around peds, and stop for lights\r\nDRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\\_0x5BC448CB78FA3E88).**",
            "examples": [],
            "hash": "0xF91DF93B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x374827C2": {
            "name": "TASK_GO_TO_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "distance",
                    "type": "float"
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "p5",
                    "type": "float"
                },
                {
                    "name": "p6",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\r\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\r\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\r\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\\_0x6A071245EB0D1882).**",
            "examples": [],
            "hash": "0x374827C2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DCC19C5": {
            "name": "TASK_HANDS_UP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "facingPed",
                    "type": "Ped"
                },
                {
                    "name": "p3",
                    "type": "int"
                },
                {
                    "name": "p4",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "```\nIn the scripts, p3 was always -1.\r\np3 seems to be duration or timeout of turn animation.\r\nAlso facingPed can be 0 or -1 so ped will just raise hands up.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\\_0xF2EAB31979A7F910).**",
            "examples": [],
            "hash": "0x8DCC19C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xDBDD79FA": {
            "name": "TASK_LEAVE_ANY_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "p1",
                    "type": "int"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\\_0x504D54DF3F6F2247).**",
            "examples": [],
            "hash": "0xDBDD79FA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7B1141C6": {
            "name": "TASK_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nFlags from decompiled scripts:\r\n0 = normal exit and closes door.\r\n1 = normal exit and closes door.\r\n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\r\n64 = normal exit and closes door, maybe a bit slower animation than 0.\r\n256 = normal exit but does not close the door.\r\n4160 = ped is throwing himself out, even when the vehicle is still.\r\n262144 = ped moves to passenger seat first, then exits normally\r\nOthers to be tried out: 320, 512, 131072.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\\_0xD3DBCE61A490BE02).**",
            "examples": [],
            "hash": "0x7B1141C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x5AB552C6": {
            "name": "TASK_PLAY_ANIM",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "The animation flags (see enum)"
                },
                {
                    "name": "playbackRate",
                    "type": "float",
                    "description": "The playback rate (between 0.0 and 1.0)"
                },
                {
                    "name": "lockX",
                    "type": "BOOL"
                },
                {
                    "name": "lockY",
                    "type": "BOOL"
                },
                {
                    "name": "lockZ",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```cpp\nenum eScriptedAnimFlags\r\n{\r\nAF_LOOPING = 1,\r\nAF_HOLD_LAST_FRAME = 2,\r\nAF_REPOSITION_WHEN_FINISHED = 4,\r\nAF_NOT_INTERRUPTABLE = 8,\r\nAF_UPPERBODY = 16,\r\nAF_SECONDARY = 32,\r\nAF_REORIENT_WHEN_FINISHED = 64,\r\nAF_ABORT_ON_PED_MOVEMENT = 128,\r\nAF_ADDITIVE = 256,\r\nAF_TURN_OFF_COLLISION = 512,\r\nAF_OVERRIDE_PHYSICS = 1024,\r\nAF_IGNORE_GRAVITY = 2048,\r\nAF_EXTRACT_INITIAL_OFFSET = 4096,\r\nAF_EXIT_AFTER_INTERRUPTED = 8192,\r\nAF_TAG_SYNC_IN = 16384,\r\nAF_TAG_SYNC_OUT = 32768,\r\nAF_TAG_SYNC_CONTINUOUS = 65536,\r\nAF_FORCE_START = 131072,\r\nAF_USE_KINEMATIC_PHYSICS = 262144,\r\nAF_USE_MOVER_EXTRACTION = 524288,\r\nAF_HIDE_WEAPON = 1048576,\r\nAF_ENDS_IN_DEAD_POSE = 2097152,\r\nAF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304,\r\nAF_DONT_EXIT_ON_DEATH = 8388608,\r\nAF_ABORT_ON_WEAPON_DAMAGE = 16777216,\r\nAF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432,\r\nAF_PROCESS_ATTACHMENTS_ON_START = 67108864,\r\nAF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728,\r\nAF_USE_ALTERNATIVE_FP_ANIM = 268435456,\r\nAF_BLENDOUT_WRT_LAST_FRAME = 536870912,\r\nAF_USE_FULL_BLENDING = 1073741824\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\\_0xEA47FE3719165B94).**",
            "examples": [],
            "hash": "0x5AB552C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x3DDEB0E6": {
            "name": "TASK_PLAY_ANIM_ADVANCED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Initial X position of the task"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Initial Y position of the task"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "Initial Z position of the task"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Initial X rotation of the task"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Initial Y rotation of the task"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Initial Z rotation of the task"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "Any",
                    "description": "See [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94)"
                },
                {
                    "name": "animTime",
                    "type": "float",
                    "description": "Value between 0.0 and 1.0, lets you start an animation from the given point"
                },
                {
                    "name": "p14",
                    "type": "Any"
                },
                {
                    "name": "p15",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "Similar in functionality to [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94), except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified.\r\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\\_0x83CDB10EA29B370B).**",
            "examples": [],
            "hash": "0x3DDEB0E6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8A632BD8": {
            "name": "TASK_REACT_AND_FLEE_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "fleeTarget",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "TASK_REACT_AND_FLEE_PED\n\n**This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\\_0x72C896464915D1B1).**",
            "examples": [],
            "hash": "0x8A632BD8",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x601C22E3": {
            "name": "TASK_SHOOT_AT_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\\_0x46A6CC01E0826106).**",
            "examples": [],
            "hash": "0x601C22E3",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xAC0631C9": {
            "name": "TASK_SHOOT_AT_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\r\nEntity aimedentity;\r\nPlayer player = PLAYER::PLAYER_ID();\r\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\r\n//bg is an array of peds\r\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\r\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\r\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\\_0x08DA95E8298AE772).**",
            "examples": [],
            "hash": "0xAC0631C9",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x65D4A35D": {
            "name": "TASK_WARP_PED_INTO_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped to be warped into the vehicle."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle into which the ped will be warped."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "void",
            "description": "```\nNativeDB Introduced: v323\n```\n\nWarp a ped into a vehicle.\r\n**Note**: It's better to use [`TASK_ENTER_VEHICLE`](#\\_0xC20E50AA46D09CA8) with the flag \"warp\" flag instead of this native.\n\n**This is the server-side RPC native equivalent of the client native [TASK_WARP_PED_INTO_VEHICLE](?\\_0x9A7D091411C5F684).**",
            "examples": [],
            "hash": "0x65D4A35D",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "WEAPON": {
        "0x5343721": {
            "name": "GET_WEAPON_ACCURACY_SPREAD",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for the accuracy spread of a weapon.",
            "examples": [],
            "hash": "0x5343721",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The accuracy spread of a weapon."
        },
        "0x63ED2E7": {
            "name": "GET_WEAPON_ANIMATION_OVERRIDE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "A getter for [SET_WEAPON_ANIMATION_OVERRIDE](#\\_0x1055AC3A667F09D9).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local weaponAnimation = GetWeaponAnimationOverride(PlayerPedId())"
                }
            ],
            "hash": "0x63ED2E7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The weapon animation override."
        },
        "0xC693E278": {
            "name": "GET_WEAPON_COMPONENT_ACCURACY_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponAccuracyModifier` in a weapon component.",
            "examples": [],
            "hash": "0xC693E278",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component accuracy modifier."
        },
        "0xACB7E68F": {
            "name": "GET_WEAPON_COMPONENT_CAMERA_HASH",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `CameraHash` in a weapon scope component.",
            "examples": [],
            "hash": "0xACB7E68F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The hash of the scope camera."
        },
        "0xE14CF665": {
            "name": "GET_WEAPON_COMPONENT_CLIP_SIZE",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `ClipSize` in a weapon component.",
            "examples": [],
            "hash": "0xE14CF665",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component clip size."
        },
        "0x4A0E3855": {
            "name": "GET_WEAPON_COMPONENT_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponDamageModifier` in a weapon component.",
            "examples": [],
            "hash": "0x4A0E3855",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component damage modifier."
        },
        "0xE134FB8D": {
            "name": "GET_WEAPON_COMPONENT_RANGE_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.",
            "examples": [],
            "hash": "0xE134FB8D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component damage modifier."
        },
        "0x2FD0BC1B": {
            "name": "GET_WEAPON_COMPONENT_RANGE_MODIFIER",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.",
            "examples": [],
            "hash": "0x2FD0BC1B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon component range modifier."
        },
        "0xF9AB9297": {
            "name": "GET_WEAPON_COMPONENT_RETICULE_HASH",
            "params": [
                {
                    "name": "componentHash",
                    "type": "Hash",
                    "description": "Weapon component name hash."
                }
            ],
            "return_type": "int",
            "description": "A getter for `ReticuleHash` in a weapon scope component.",
            "examples": [],
            "hash": "0xF9AB9297",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The hash of the reticule camera."
        },
        "0xD979143": {
            "name": "GET_WEAPON_DAMAGE_MODIFIER",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for [\\_SET_WEAPON_DAMAGE_MODIFIER](#\\_0x4757F00BC6323CFE).",
            "examples": [],
            "hash": "0xD979143",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A weapon damage modifier."
        },
        "0x5E1AF5F": {
            "name": "GET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                }
            ],
            "return_type": "float",
            "description": "A getter for the recoil shake amplitude of a weapon.",
            "examples": [],
            "hash": "0x5E1AF5F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The recoil shake amplitude of a weapon."
        },
        "0xDFD8F6DE": {
            "name": "SET_WEAPONS_NO_AIM_BLOCKING",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables weapons aim blocking due to environment for local player.\r\nFor non-player peds [SET_PED_ENABLE_WEAPON_BLOCKING](#\\_0x97A790315D3831FD) can be used.",
            "examples": [],
            "hash": "0xDFD8F6DE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x311150E5": {
            "name": "SET_WEAPONS_NO_AUTORELOAD",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables the game's built-in auto-reloading.",
            "examples": [],
            "hash": "0x311150E5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x2A7B50E": {
            "name": "SET_WEAPONS_NO_AUTOSWAP",
            "params": [
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "On/Off"
                }
            ],
            "return_type": "void",
            "description": "Disables autoswapping to another weapon when the current weapon runs out of ammo.",
            "examples": [],
            "hash": "0x2A7B50E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x598DD6AE": {
            "name": "SET_WEAPON_ACCURACY_SPREAD",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                },
                {
                    "name": "spread",
                    "type": "float",
                    "description": "Accuracy spread"
                }
            ],
            "return_type": "void",
            "description": "A setter for the accuracy spread of a weapon.",
            "examples": [],
            "hash": "0x598DD6AE",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9864312F": {
            "name": "SET_WEAPON_RECOIL_SHAKE_AMPLITUDE",
            "params": [
                {
                    "name": "weaponHash",
                    "type": "Hash",
                    "description": "Weapon name hash."
                },
                {
                    "name": "amplitude",
                    "type": "float",
                    "description": "Recoil shake amplitude"
                }
            ],
            "return_type": "void",
            "description": "A setter for the recoil shake amplitude of a weapon.",
            "examples": [],
            "hash": "0x9864312F",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "PROFILER": {
        "0xC795A4A9": {
            "name": "PROFILER_ENTER_SCOPE",
            "params": [
                {
                    "name": "scopeName",
                    "type": "const char*",
                    "description": "Scope name."
                }
            ],
            "return_type": "void",
            "description": "Scope entry for profiler.",
            "examples": [],
            "hash": "0xC795A4A9",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xB39CA35C": {
            "name": "PROFILER_EXIT_SCOPE",
            "params": [],
            "return_type": "void",
            "description": "Scope exit for profiler.",
            "examples": [],
            "hash": "0xB39CA35C",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xF8B7D7BB": {
            "name": "PROFILER_IS_RECORDING",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns true if the profiler is active.",
            "examples": [],
            "hash": "0xF8B7D7BB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "True or false."
        }
    },
    "PHYSICS": {
        "0x760A2D67": {
            "name": "GET_ALL_ROPES",
            "params": [],
            "return_type": "Object",
            "description": "Returns all rope handles. The data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```",
            "examples": [],
            "hash": "0x760A2D67",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of all rope handles."
        },
        "0xA80FFE99": {
            "name": "GET_ROPE_FLAGS",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the flags for."
                }
            ],
            "return_type": "int",
            "description": "```cpp\nenum eRopeFlags\r\n{\r\n    DrawShadowEnabled = 2,\r\n\tBreakable = 4,\r\n\tRopeUnwindingFront = 8,\r\n\tRopeWinding = 32\r\n}\n```",
            "examples": [],
            "hash": "0xA80FFE99",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's flags."
        },
        "0x66D70EA3": {
            "name": "GET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the length change rate for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x66D70EA3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's length change rate."
        },
        "0xF341E6CA": {
            "name": "GET_ROPE_TIME_MULTIPLIER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the time multiplier for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF341E6CA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's time multiplier."
        },
        "0x2AB2E0F6": {
            "name": "GET_ROPE_UPDATE_ORDER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the update order for."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2AB2E0F6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's update order."
        },
        "0xF213AE8D": {
            "name": "REGISTER_ROPE_DATA",
            "params": [
                {
                    "name": "numSections",
                    "type": "int"
                },
                {
                    "name": "radius",
                    "type": "float"
                },
                {
                    "name": "diffuseTextureName",
                    "type": "const char*"
                },
                {
                    "name": "normalMapName",
                    "type": "const char*"
                },
                {
                    "name": "distanceMappingScale",
                    "type": "float"
                },
                {
                    "name": "uvScaleX",
                    "type": "float"
                },
                {
                    "name": "uvScaleY",
                    "type": "float"
                },
                {
                    "name": "specularFresnel",
                    "type": "float"
                },
                {
                    "name": "specularFalloff",
                    "type": "float"
                },
                {
                    "name": "specularIntensity",
                    "type": "float"
                },
                {
                    "name": "bumpiness",
                    "type": "float"
                },
                {
                    "name": "color",
                    "type": "int"
                }
            ],
            "return_type": "int",
            "description": "Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference.\r\nReturns a rope type which can be passed into [ADD_ROPE](#\\_0xE832D760399EB220) to use a custom rope design.\r\nOnce a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create a thick steel cable rope above the players head\r\nlocal ropeType = RegisterRopeData(6, 0.15, \"steel_cable\", \"steel_cable_n\", 1.0, 1.0, 8.775, 0.97, 30.0, 0.25, 1.775, 0x00FFFF00)\r\nif ropeType ~= -1 then\r\n    local coords = GetEntityCoords(PlayerPedId()) + vector3(0.0, 0.0, 5.0)\r\n\tAddRope(coords.x, coords.y, coords.z, 0.0, 0.0, 0.0, 25.0, ropeType, 10.0, 0.0, 1.0, false, false, false, 1.0, false, 0)\r\n    RopeLoadTextures()\r\nend"
                }
            ],
            "hash": "0xF213AE8D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a non-negative value on success, or -1 if the rope data could not be registered or an invalid argument is passed."
        },
        "0x6D712937": {
            "name": "RESET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [],
            "return_type": "void",
            "description": "Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.",
            "examples": [],
            "hash": "0x6D712937",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4D3118ED": {
            "name": "SET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [
                {
                    "name": "vehMinSpeed",
                    "type": "float",
                    "description": "Vehicle minimum speed (default 35.0)."
                },
                {
                    "name": "unkMinSpeed",
                    "type": "float",
                    "description": "Unknown minimum speed (default 40.0)."
                },
                {
                    "name": "unkModifier",
                    "type": "float",
                    "description": "Unknown modifier (default 17.0)."
                },
                {
                    "name": "minDamage",
                    "type": "float",
                    "description": "Minimum damage (default 2000.0)."
                }
            ],
            "return_type": "BOOL",
            "description": "Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.",
            "examples": [],
            "hash": "0x4D3118ED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A bool indicating if parameters was set successfully."
        },
        "0xE62FC73": {
            "name": "SET_ROPES_CREATE_NETWORK_WORLD_STATE",
            "params": [
                {
                    "name": "shouldCreate",
                    "type": "BOOL",
                    "description": "Whether to create an underlying network world state"
                }
            ],
            "return_type": "void",
            "description": "Toggles whether the usage of [ADD_ROPE](#\\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.",
            "examples": [],
            "hash": "0xE62FC73",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x69B680A7": {
            "name": "SET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to set the length change rate for."
                },
                {
                    "name": "lengthChangeRate",
                    "type": "float",
                    "description": "The rope's new length change rate."
                }
            ],
            "return_type": "void",
            "description": "Set's the ropes length change rate, which is the speed that rope should wind if started.",
            "examples": [],
            "hash": "0x69B680A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "TRACK": {
        "0x81A08523": {
            "name": "GET_ALL_TRACK_JUNCTIONS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all track junctions on the client\r\nThe data returned adheres to the following structure:\n\n```\n[1, 2, 4, 6, 69, 420]\n```",
            "examples": [],
            "hash": "0x81A08523",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of track junctions ids.```\n```"
        },
        "0x59FC24A7": {
            "name": "GET_CLOSEST_TRACK_NODES",
            "params": [
                {
                    "name": "position",
                    "type": "Vector3",
                    "description": "Get track nodes at position"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Get track nodes within radius"
                }
            ],
            "return_type": "Object",
            "description": "Get all track nodes and their track ids within the radius of the specified coordinates.",
            "examples": [],
            "hash": "0x59FC24A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a list of tracks and node entries: a trackNode and a trackIdThe data returned adheres to the following layout:    [{trackNode1, trackId1}, ..., {trackNodeN, trackIdN}]"
        },
        "0xBF482A5E": {
            "name": "GET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xBF482A5E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The braking distance of the track. Used by trains to determine the point to slow down at when entering a station."
        },
        "0x34EE2BF3": {
            "name": "GET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x34EE2BF3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The max speed of the track"
        },
        "0x1628548E": {
            "name": "GET_TRACK_NODE_COORDS",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The track node"
                },
                {
                    "name": "coords",
                    "type": "Vector3*",
                    "description": "The resulting track node coords"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets the coordinates of a specific track node.",
            "examples": [],
            "hash": "0x1628548E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in getting coords or not"
        },
        "0x896A0C11": {
            "name": "GET_TRACK_NODE_COUNT",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                }
            ],
            "return_type": "int",
            "description": "Gets the specified tracks node count.",
            "examples": [],
            "hash": "0x896A0C11",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of track nodes on the specified track"
        },
        "0x31E695CB": {
            "name": "IS_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SET_TRACK_ENABLED](#\\_0x4B41E84C)",
            "examples": [],
            "hash": "0x31E695CB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track is enabled."
        },
        "0xE0C53765": {
            "name": "IS_TRACK_SWITCHED_OFF",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SWITCH_TRAIN_TRACK](#\\_0xFD813BB7DB977F20). Determines if ambient trains are able to spawn on this track.",
            "examples": [],
            "hash": "0xE0C53765",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track allows ambient trains to spawn"
        },
        "0x35F743B5": {
            "name": "REGISTER_TRACK_JUNCTION",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index a train should be on"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The node a train should be on"
                },
                {
                    "name": "newIndex",
                    "type": "int",
                    "description": "The new track index for a train to be placed on"
                },
                {
                    "name": "newNode",
                    "type": "int",
                    "description": "The new track node for a train to be placed on"
                },
                {
                    "name": "direction",
                    "type": "BOOL",
                    "description": "The direction a train should be traveling for this junction"
                }
            ],
            "return_type": "int",
            "description": "Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node",
            "examples": [],
            "hash": "0x35F743B5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The track junction's handle or -1 if invalid."
        },
        "0x4F3D2B2A": {
            "name": "REMOVE_TRACK_JUNCTION",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                }
            ],
            "return_type": "BOOL",
            "description": "Removes the specified track junction.",
            "examples": [],
            "hash": "0x4F3D2B2A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in removing a junction or not"
        },
        "0x77EB78D0": {
            "name": "SET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "brakingDistance",
                    "type": "float",
                    "description": "The new braking distance"
                }
            ],
            "return_type": "void",
            "description": "Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.",
            "examples": [],
            "hash": "0x77EB78D0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4B41E84C": {
            "name": "SET_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Should this track be enabled"
                }
            ],
            "return_type": "void",
            "description": "Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn",
            "examples": [],
            "hash": "0x4B41E84C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x537B449D": {
            "name": "SET_TRACK_JUNCTION_ACTIVE",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggles the state of the junction"
                }
            ],
            "return_type": "BOOL",
            "description": "Sets the state of a track junction.",
            "examples": [],
            "hash": "0x537B449D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds setting the junctions state or not"
        },
        "0x37BFC732": {
            "name": "SET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "newSpeed",
                    "type": "int",
                    "description": "The tracks new speed"
                }
            ],
            "return_type": "void",
            "description": "Sets the max speed for the train tracks. Used by ambient trains and for station calculations",
            "examples": [],
            "hash": "0x37BFC732",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "WATER": {
        "0xEB1C6DD": {
            "name": "CREATE_DRY_VOLUME",
            "params": [
                {
                    "name": "xMin",
                    "type": "float",
                    "description": "The min X component of the AABB volume where water does not affect the player."
                },
                {
                    "name": "yMin",
                    "type": "float",
                    "description": "The min Y component for the AABB volume."
                },
                {
                    "name": "zMin",
                    "type": "float",
                    "description": "The min Z component for the AABB volume."
                },
                {
                    "name": "xMax",
                    "type": "float",
                    "description": "The max X component for the AABB volume."
                },
                {
                    "name": "yMax",
                    "type": "float",
                    "description": "The max Y component for the AABB volume."
                },
                {
                    "name": "zMax",
                    "type": "float",
                    "description": "The max Z component for the AABB volume."
                }
            ],
            "return_type": "int",
            "description": "Creates a volume where water effects do not apply.\r\nUseful for preventing water collisions from flooding areas underneath them.\r\nThis has no effect on waterquads, only water created from drawables and collisions.\r\nDon't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)",
            "examples": [],
            "hash": "0xEB1C6DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x14088095": {
            "name": "GET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int*",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int*",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int*",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int*",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, a0, a1, a2, a3 = GetWaterQuadAlpha(0)"
                }
            ],
            "hash": "0x14088095",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Alpha values are undefined on failure"
        },
        "0x17321452": {
            "name": "GET_WATER_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a water quad if the given point is inside its bounds.\n\n*If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\\_0xF8E03DB8)*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x17321452",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF8E03DB8": {
            "name": "GET_WATER_QUAD_AT_COORDS_3D",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "int",
            "description": "This alternative implementation of [`GetWaterQuadAtCoords`](#\\_0x17321452) also checks the height of the water level.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y, currentPedPosition.z)"
                }
            ],
            "hash": "0xF8E03DB8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there. Also returns -1 if the given point is above the water level."
        },
        "0x42E9A06A": {
            "name": "GET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaterQuadBounds(1)"
                }
            ],
            "hash": "0x42E9A06A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0xB1884159": {
            "name": "GET_WATER_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waterQuadCount = GetWaterQuadCount()"
                }
            ],
            "hash": "0xB1884159",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of water quads loaded."
        },
        "0x22EA3BD8": {
            "name": "GET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, hasLimitedDepth = GetWaterQuadHasLimitedDepth(0)"
                }
            ],
            "hash": "0x22EA3BD8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has a limited depth."
        },
        "0x1DEDBD77": {
            "name": "GET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, isInvisible = GetWaterQuadIsInvisible(0)"
                }
            ],
            "hash": "0x1DEDBD77",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad is invisible"
        },
        "0x6523816B": {
            "name": "GET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The returned water quad level"
                },
                {
                    "name": "waterQuadLevel",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "*level is defined as \"z\" in water.xml*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, waterQuadLevel = GetWaterQuadLevel(0)"
                }
            ],
            "hash": "0x6523816B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Level is undefined on failure"
        },
        "0x6F4ACBA": {
            "name": "GET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, noStencil = GetWaterQuadNoStencil(0)"
                }
            ],
            "hash": "0x6F4ACBA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has no stencil."
        },
        "0xE2501B8B": {
            "name": "GET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "waterType",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "Valid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, type = GetWaterQuadType(0)"
                }
            ],
            "hash": "0xE2501B8B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Type is undefined on failure"
        },
        "0x865139A3": {
            "name": "GET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "waveQuadAmplitude",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, amplitude = GetWaveQuadAmplitude(1)"
                }
            ],
            "hash": "0x865139A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Amplitude is undefined on failure"
        },
        "0x3F5A61A7": {
            "name": "GET_WAVE_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a wave quad if the given point is inside its bounds.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waveQuadIndex = GetWaveQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x3F5A61A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The wave quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF86136DB": {
            "name": "GET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaveQuadBounds(1)"
                }
            ],
            "hash": "0xF86136DB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0x9250C76": {
            "name": "GET_WAVE_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waveQuadCount = GetWaveQuadCount()"
                }
            ],
            "hash": "0x9250C76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of wave quads loaded."
        },
        "0xCCE49A1C": {
            "name": "GET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float*",
                    "description": "The wave quad X direction"
                },
                {
                    "name": "directionY",
                    "type": "float*",
                    "description": "The wave quad Y direction"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, directionX, directionY = GetWaveQuadDirection(1)"
                }
            ],
            "hash": "0xCCE49A1C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Direction values are undefined on failure"
        },
        "0xF5102568": {
            "name": "LOAD_WATER_FROM_PATH",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource containing your modified water definition"
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The name of the file"
                }
            ],
            "return_type": "BOOL",
            "description": "Define the xml in a resources fxmanifest, under the file(s) section.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = LoadWaterFromPath('my-resource-name', 'water-all-over-the-place.xml')"
                }
            ],
            "hash": "0xF5102568",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x7BCAA6E7": {
            "name": "REMOVE_DRY_VOLUME",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The handle of the dry volume that needs to be removed."
                }
            ],
            "return_type": "void",
            "description": "Removes a dry volume from the game session.\r\nSee CREATE_DRY_VOLUME for more info",
            "examples": [],
            "hash": "0x7BCAA6E7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1DA4791": {
            "name": "RESET_WATER",
            "params": [],
            "return_type": "void",
            "description": "Resets the water to the games default water.xml.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "ResetWater()"
                }
            ],
            "hash": "0x1DA4791",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9FCD2EE6": {
            "name": "SET_WATER_AREA_CLIP_RECT",
            "params": [
                {
                    "name": "minX",
                    "type": "int"
                },
                {
                    "name": "minY",
                    "type": "int"
                },
                {
                    "name": "maxX",
                    "type": "int"
                },
                {
                    "name": "maxY",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)\r\nUsed internally by LOAD_GLOBAL_WATER_FILE",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetWaterAreaClipRect(-4000, -4000, 4500, 8000)"
                }
            ],
            "hash": "0x9FCD2EE6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF49797EB": {
            "name": "SET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadAlpha(0, 5, 5, 5, 5)"
                }
            ],
            "hash": "0xF49797EB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x80AD144C": {
            "name": "SET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadBounds(0, -5000.0, -5000.0, 5000.0, 5000.0)"
                }
            ],
            "hash": "0x80AD144C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xD1FDCFC1": {
            "name": "SET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadHasLimitedDepth(0, true)"
                }
            ],
            "hash": "0xD1FDCFC1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xA387D917": {
            "name": "SET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadIsInvisible(0, true)"
                }
            ],
            "hash": "0xA387D917",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x6292F7A8": {
            "name": "SET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "level",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadLevel(0, 55.0)"
                }
            ],
            "hash": "0x6292F7A8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xC3FF42FF": {
            "name": "SET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadNoStencil(0, true)"
                }
            ],
            "hash": "0xC3FF42FF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x50131EB2": {
            "name": "SET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "type",
                    "type": "int",
                    "description": "The water quad type"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the water quad type.\n\nValid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadType(0, 0)"
                }
            ],
            "hash": "0x50131EB2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xE4174B7B": {
            "name": "SET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "amplitude",
                    "type": "float",
                    "description": "The amplitude value"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadAmplitude(0, 1.0)"
                }
            ],
            "hash": "0xE4174B7B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x1FCC1FAF": {
            "name": "SET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadBounds(0, -5000, -5000, 5000, 5000)"
                }
            ],
            "hash": "0x1FCC1FAF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xFC9341A3": {
            "name": "SET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float",
                    "description": "The minX coordinate"
                },
                {
                    "name": "directionY",
                    "type": "float",
                    "description": "The minY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "directionX/Y should be constrained between -1.0 and 1.0\r\nA positive value will create the wave starting at min and rolling towards max\r\nA negative value will create the wave starting at max and rolling towards min\r\nApplying both values allows you to make diagonal waves",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadDirection(0, 0.3, 0.1)"
                }
            ],
            "hash": "0xFC9341A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        }
    },
    "SHAPETEST": {
        "0x4301E10C": {
            "name": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL",
            "params": [
                {
                    "name": "shapeTestHandle",
                    "type": "int",
                    "description": "A shape test handle."
                },
                {
                    "name": "hit",
                    "type": "BOOL*",
                    "description": "Whether or not the shape test hit any collisions."
                },
                {
                    "name": "endCoords",
                    "type": "Vector3*",
                    "description": "The resulting coordinates where the shape test hit a collision."
                },
                {
                    "name": "surfaceNormal",
                    "type": "Vector3*",
                    "description": "The surface normal of the hit position."
                },
                {
                    "name": "materialHash",
                    "type": "Hash*",
                    "description": "hash of the hit material or surface type, see materialFX.dat"
                },
                {
                    "name": "entityHit",
                    "type": "Entity*",
                    "description": "Any dynamic entity hit by the shape test."
                }
            ],
            "return_type": "int",
            "description": "Returns the result of a shape test, also returning the material of any touched surface.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined.",
            "examples": [],
            "hash": "0x4301E10C",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "`0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated."
        }
    }
}