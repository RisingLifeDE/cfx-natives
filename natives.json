{
    "AUDIO": {
        "0xAC6E290D": {
            "name": "ADD_AUDIO_SUBMIX_OUTPUT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The input submix."
                },
                {
                    "name": "outputSubmixId",
                    "type": "int",
                    "description": "The output submix. Use `0` for the master game submix."
                }
            ],
            "return_type": "void",
            "description": "Adds an output for the specified audio submix.",
            "examples": [],
            "hash": "0xAC6E290D",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x658D2BC8": {
            "name": "CREATE_AUDIO_SUBMIX",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The audio submix name."
                }
            ],
            "return_type": "int",
            "description": "Creates an audio submix with the specified name, or gets the existing audio submix by that name.",
            "examples": [],
            "hash": "0x658D2BC8",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A submix ID, or -1 if the submix could not be created."
        },
        "0x9A209B3C": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_FLOAT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
                },
                {
                    "name": "paramIndex",
                    "type": "int",
                    "description": "The parameter index for the effect."
                },
                {
                    "name": "paramValue",
                    "type": "float",
                    "description": "The parameter value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets a floating-point parameter for a submix effect.",
            "examples": [],
            "hash": "0x9A209B3C",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x77FAE2B8": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_PARAM_INT",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix. It is expected that the effect is set in this slot beforehand."
                },
                {
                    "name": "paramIndex",
                    "type": "int",
                    "description": "The parameter index for the effect."
                },
                {
                    "name": "paramValue",
                    "type": "int",
                    "description": "The parameter value to set."
                }
            ],
            "return_type": "void",
            "description": "Sets an integer parameter for a submix effect.",
            "examples": [],
            "hash": "0x77FAE2B8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xAAA94D53": {
            "name": "SET_AUDIO_SUBMIX_EFFECT_RADIO_FX",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "effectSlot",
                    "type": "int",
                    "description": "The effect slot for the submix."
                }
            ],
            "return_type": "void",
            "description": "Assigns a RadioFX effect to a submix effect slot.\n\nThe parameter values for this effect are as follows (backticks are used to represent hashes):\n\n| Index | Type | Description |\r\n|-|-|-|\r\n| \\`enabled\\` | int | Enables or disables RadioFX on this DSP. |\r\n| \\`default\\` | int | Sets default parameters for the RadioFX DSP and enables it. |\r\n| \\`freq_low\\` | float |  |\r\n| \\`freq_hi\\` | float |  |\r\n| \\`fudge\\` | float |  |\r\n| \\`rm_mod_freq\\` | float |  |\r\n| \\`rm_mix\\` | float |  |\r\n| \\`o_freq_lo\\` | float |  |\r\n| \\`o_freq_hi\\` | float |  |",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- we want to change the master output\r\nlocal submix = 0\r\n\r\n-- add a RadioFX effect to slot 0\r\nSetAudioSubmixEffectRadioFx(submix, 0)\r\n\r\n-- set the default values\r\nSetAudioSubmixEffectParamInt(submix, 0, `default`, 1)"
                }
            ],
            "hash": "0xAAA94D53",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x825DC0D1": {
            "name": "SET_AUDIO_SUBMIX_OUTPUT_VOLUMES",
            "params": [
                {
                    "name": "submixId",
                    "type": "int",
                    "description": "The submix."
                },
                {
                    "name": "outputSlot",
                    "type": "int",
                    "description": "The output slot index."
                },
                {
                    "name": "frontLeftVolume",
                    "type": "float",
                    "description": "The volume for the front left channel."
                },
                {
                    "name": "frontRightVolume",
                    "type": "float",
                    "description": "The volume for the front right channel."
                },
                {
                    "name": "rearLeftVolume",
                    "type": "float",
                    "description": "The volume for the rear left channel."
                },
                {
                    "name": "rearRightVolume",
                    "type": "float",
                    "description": "The volume for the rear right channel."
                },
                {
                    "name": "channel5Volume",
                    "type": "float",
                    "description": "The volume for channel 5."
                },
                {
                    "name": "channel6Volume",
                    "type": "float",
                    "description": "The volume for channel 6."
                }
            ],
            "return_type": "void",
            "description": "Sets the volumes for the sound channels in a submix effect.\r\nValues can be between 0.0 and 1.0.\r\nChannel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.\r\nOutput slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.",
            "examples": [],
            "hash": "0x825DC0D1",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "ENTITY": {
        "0x3BB78F05": {
            "name": "ENSURE_ENTITY_STATE_BAG",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                }
            ],
            "return_type": "void",
            "description": "Internal function for ensuring an entity has a state bag.",
            "examples": [],
            "hash": "0x3BB78F05",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xDFFBA12F": {
            "name": "GET_ENTITIES_IN_RADIUS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate."
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Max distance from coordinate to entity"
                },
                {
                    "name": "entityType",
                    "type": "int",
                    "description": "Entity types see list below"
                },
                {
                    "name": "sortByDistance",
                    "type": "BOOL",
                    "description": "Sort output entites by distance from nearest to farthest"
                },
                {
                    "name": "models",
                    "type": "Object",
                    "description": "List of allowed models its also optional"
                }
            ],
            "return_type": "Object",
            "description": "### Supported types\n\n*   \\[1] : Peds (including animals) and players.\n*   \\[2] : Vehicles.\n*   \\[3] : Objects (props), doors, and projectiles.\n\n### Coordinates need to be send unpacked (x,y,z)\n\n```lua\n\r\n-- Define the allowed model hashes\r\nlocal allowedModelHashes = { GetHashKey(\"p_crate03x\"), GetHashKey(\"p_crate22x\") }\r\n\r\n-- Get the player's current coordinates\r\nlocal playerCoords = GetEntityCoords(PlayerPedId())\r\n\r\n-- Retrieve all entities of type Object (type 3) within a radius of 10.0 units\r\n-- that match the allowed model hashes\r\n-- and sort output entities by distance\r\nlocal entities = GetEntitiesInRadius(playerCoords.x, playerCoords.y, playerCoords.z, 10.0, 3, true, allowedModelHashes)\r\n\r\n-- Iterate through the list of entities and print their ids\r\nfor i = 1, #entities do\r\n    local entity = entities[i]\r\n    print(entity)\r\nend\r\n\n```",
            "examples": [],
            "hash": "0xDFFBA12F",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An array containing entity handles for each entity."
        },
        "0x4BDF1867": {
            "name": "GET_ENTITY_FROM_STATE_BAG_NAME",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "An internal state bag ID from the argument to a state bag change handler."
                }
            ],
            "return_type": "Entity",
            "description": "Returns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](#\\_0x5BA35AAF).",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we were don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity == 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
                }
            ],
            "hash": "0x4BDF1867",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The entity handle or 0 if the state bag name did not refer to an entity, or the entity does not exist."
        }
    },
    "GRAPHICS": {
        "0x15346B4D": {
            "name": "GET_VISUAL_SETTING_FLOAT",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name of the value to get, such as `pedLight.color.red`."
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_VISUAL_SETTING_FLOAT](#\\_0xD1D31681).",
            "examples": [],
            "hash": "0x15346B4D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns the floating point value of the specified visual setting on success."
        },
        "0xD1D31681": {
            "name": "SET_VISUAL_SETTING_FLOAT",
            "params": [
                {
                    "name": "name",
                    "type": "const char*",
                    "description": "The name of the value to set, such as `pedLight.color.red`."
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write."
                }
            ],
            "return_type": "void",
            "description": "Overrides a floating point value from `visualsettings.dat` temporarily.",
            "examples": [],
            "hash": "0xD1D31681",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "HUD": {
        "0xC6F43D0E": {
            "name": "ADD_BLIP_FOR_COORD",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate to create the blip on."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate."
                }
            ],
            "return_type": "Blip",
            "description": "Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_COORD](?\\_0x5A039BB0BCA604B6).**",
            "examples": [],
            "hash": "0xC6F43D0E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A blip handle."
        },
        "0x30822554": {
            "name": "ADD_BLIP_FOR_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity handle to create the blip."
                }
            ],
            "return_type": "Blip",
            "description": "Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\\_0xC6F43D0E) to make it blue (friend).\\\nCan be used for objects, vehicles and peds.\r\nExample of enemy:\r\n![enemy](https://i.imgur.com/fl78svv.png)\r\nExample of friend:\r\n![friend](https://i.imgur.com/Q16ho5d.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_ENTITY](?\\_0x5CDE92C702A8FCE7).**",
            "examples": [],
            "hash": "0x30822554",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A blip handle."
        },
        "0x4626756C": {
            "name": "ADD_BLIP_FOR_RADIUS",
            "params": [
                {
                    "name": "posX",
                    "type": "float",
                    "description": "The x position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "The y position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "The z position of the blip (you can also send a vector3 instead of the bulk coordinates)"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "The number that defines the radius of the blip circle"
                }
            ],
            "return_type": "Blip",
            "description": "Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\\_0xC6F43D0E))\r\nExample image:\r\n![example](https://i.imgur.com/9hQl3DB.png)\n\n**This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_RADIUS](?\\_0x46818D79B1F7499A).**",
            "examples": [],
            "hash": "0x4626756C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The blip handle that can be manipulated with every `SetBlip` natives"
        },
        "0xD8C3C1CD": {
            "name": "REMOVE_BLIP",
            "params": [
                {
                    "name": "blip",
                    "type": "const Blip*",
                    "description": "Blip handle to remove."
                }
            ],
            "return_type": "void",
            "description": "Removes the blip from your map.\r\n**Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see [`SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`](#\\_0x86A652570E5F25DD).\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_BLIP](?\\_0x86A652570E5F25DD).**",
            "examples": [],
            "hash": "0xD8C3C1CD",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DBBB0B9": {
            "name": "SET_BLIP_SPRITE",
            "params": [
                {
                    "name": "blip",
                    "type": "Blip",
                    "description": "The blip to change."
                },
                {
                    "name": "spriteId",
                    "type": "int",
                    "description": "The sprite ID to set."
                }
            ],
            "return_type": "void",
            "description": "Sets the displayed sprite for a specific blip.\r\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.\n\n**This is the server-side RPC native equivalent of the client native [SET_BLIP_SPRITE](?\\_0xDF735600A4696DAF).**",
            "examples": [],
            "hash": "0x8DBBB0B9",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x6228F159": {
            "name": "_ADD_BLIP_FOR_AREA",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate of the center of the blip."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate of the center of the blip."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The Z coordinate of the center of the blip."
                },
                {
                    "name": "width",
                    "type": "float",
                    "description": "The width of the blip."
                },
                {
                    "name": "height",
                    "type": "float",
                    "description": "The height of the blip."
                }
            ],
            "return_type": "Blip",
            "description": "Adds a rectangular blip for the specified coordinates/area.\r\nIt is recommended to use [SET_BLIP_ROTATION](#\\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\r\nBy default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.\r\nExample image:\r\n![minimap](https://i.imgur.com/qLbXWcQ.png)\r\n![big map](https://i.imgur.com/0j7O7Rh.png)\r\n(Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\n\n**This is the server-side RPC native equivalent of the client native [\\_ADD_BLIP_FOR_AREA](?\\_0xCE5D0E5E315DB238).**",
            "examples": [],
            "hash": "0x6228F159",
            "ns": "CFX",
            "aliases": [
                "0xCE5D0E5E315DB238"
            ],
            "apiset": "server",
            "resultsDescription": "A handle to the blip."
        }
    },
    "MISC": {
        "0xAB7F7241": {
            "name": "ADD_CONVAR_CHANGE_LISTENER",
            "params": [
                {
                    "name": "conVarFilter",
                    "type": "const char*",
                    "description": "The Console Variable to listen for, this can be a pattern like \"test:\\*\", or null for any"
                },
                {
                    "name": "handler",
                    "type": "Function",
                    "description": "The handler function."
                }
            ],
            "return_type": "int",
            "description": "Adds a listener for Console Variable changes.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction ConVarChangeListener(conVarName: string, reserved: any);\n```\n\n*   **conVarName**: The ConVar that changed.\n*   **reserved**: Currently unused.",
            "examples": [
                {
                    "lang": "js",
                    "code": "// listen for all convar changes\r\nAddConvarChangeListener(null, (conVarName, reserved) => {\r\n    print(GetConvarInt(conVarName))\r\n})\r\n\r\n// listen to convars that start with \"script:\"\r\nAddConvarChangeListener(\"script:*\", (conVarName, reserved) => {\r\n    print(GetConvarInt(conVarName))\r\n})"
                }
            ],
            "hash": "0xAB7F7241",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A cookie to remove the change handler."
        },
        "0x5BA35AAF": {
            "name": "ADD_STATE_BAG_CHANGE_HANDLER",
            "params": [
                {
                    "name": "keyFilter",
                    "type": "const char*",
                    "description": "The key to check for, or null for no filter."
                },
                {
                    "name": "bagFilter",
                    "type": "const char*",
                    "description": "The bag ID to check for such as `entity:65535`, or null for no filter."
                },
                {
                    "name": "handler",
                    "type": "Function",
                    "description": "The handler function."
                }
            ],
            "return_type": "int",
            "description": "Adds a handler for changes to a state bag.\n\nThe function called expects to match the following signature:\n\n```ts\nfunction StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);\n```\n\n*   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`\r\n    or `localEntity:Handle`.\n*   **key**: The changed key.\n*   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.\n*   **reserved**: Currently unused.\n*   **replicated**: Whether the set is meant to be replicated.\n\nAt this time, the change handler can't opt to reject changes.\n\nIf bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](#\\_0x4BDF1867) to get the entity handle\r\nIf bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](#\\_0xA56135E0) to get the player handle",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null, async (bagName, key, value /* boolean */) => {\r\n    let entity = GetEntityFromStateBagName(bagName);\r\n    // Whoops, we don't have a valid entity!\r\n    if (entity === 0) return;\r\n    // We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while (!HasCollisionLoadedAroundEntity(entity)) {\r\n        // The entity went out of our scope before the collision loaded\r\n        if (!DoesEntityExist(entity)) return;\r\n        await Delay(250);\r\n    }\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", nil, function(bagName, key, value) \r\n    local entity = GetEntityFromStateBagName(bagName)\r\n    -- Whoops, we don't have a valid entity!\r\n    if entity == 0 then return end\r\n    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n    while not HasCollisionLoadedAroundEntity(entity) do\r\n        -- The entity went out of our scope before the collision loaded\r\n        if not DoesEntityExist(entity) then return end\r\n        Wait(250)\r\n    end\r\n    SetEntityInvincible(entity, value)\r\n    FreezeEntityPosition(entity, value)\r\n    TaskSetBlockingOfNonTemporaryEvents(entity, value)\r\nend)"
                },
                {
                    "lang": "cs",
                    "code": "AddStateBagChangeHandler(\"blockTasks\", null,\r\n    new Action<string, string, object, int, bool>\r\n    (async (bagName, key, value, res, rep) =>\r\n    {\r\n        bool val = (bool)value;\r\n\r\n        var entity = GetEntityFromStateBagName(bagName);\r\n        //-- Whoops, we don't have a valid entity!\r\n        if (entity == 0) return;\r\n        //-- We don't want to freeze the entity position if the entity collision hasn't loaded yet\r\n        while (!HasCollisionLoadedAroundEntity(entity))\r\n        {\r\n            //--The entity went out of our scope before the collision loaded\r\n            if (!DoesEntityExist(entity)) return;\r\n\r\n            await Delay(250);\r\n        }\r\n        SetEntityInvincible(entity, val);\r\n        FreezeEntityPosition(entity, val);\r\n        TaskSetBlockingOfNonTemporaryEvents(entity, val);\r\n    }));"
                }
            ],
            "hash": "0x5BA35AAF",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A cookie to remove the change handler."
        },
        "0xFA29D35D": {
            "name": "CANCEL_EVENT",
            "params": [],
            "return_type": "void",
            "description": "Cancels the currently executing event.",
            "examples": [],
            "hash": "0xFA29D35D",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x1E86F206": {
            "name": "DELETE_FUNCTION_REFERENCE",
            "params": [
                {
                    "name": "referenceIdentity",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x1E86F206",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xF4E2079D": {
            "name": "DUPLICATE_FUNCTION_REFERENCE",
            "params": [
                {
                    "name": "referenceIdentity",
                    "type": "const char*"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xF4E2079D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x561C060B": {
            "name": "EXECUTE_COMMAND",
            "params": [
                {
                    "name": "commandString",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "Depending on your use case you may need to use `add_acl resource.<your_resource_name> command.<command_name> allow` to use this native in your resource.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "Citizen.CreateThread(function()\r\n  -- stop the server after 1 minute\r\n  Citizen.Wait(60000)\r\n  ExecuteCommand(\"quit Shortlived\")\r\nend)"
                }
            ],
            "hash": "0x561C060B",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xD70C3BCA": {
            "name": "FORMAT_STACK_TRACE",
            "params": [
                {
                    "name": "traceData",
                    "type": "Object"
                }
            ],
            "return_type": "const char*",
            "description": "An internal function for converting a stack trace object to a string.",
            "examples": [],
            "hash": "0xD70C3BCA",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x6CCD2564": {
            "name": "GET_CONVAR",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "default_",
                    "type": "const char*",
                    "description": "The default value to set if none is found."
                }
            ],
            "return_type": "const char*",
            "description": "Can be used to get a console variable of type `char*`, for example a string.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvar('voice_useNativeAudio', 'false') == 'true' then\r\n    Citizen.Trace('Native Audio is enabled.')\r\nend"
                }
            ],
            "hash": "0x6CCD2564",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x7E8EBFE5": {
            "name": "GET_CONVAR_BOOL",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "defaultValue",
                    "type": "BOOL",
                    "description": "The default value to set if none is found."
                }
            ],
            "return_type": "BOOL",
            "description": "Can be used to get a console variable casted back to `bool`.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvarBool('dev_mode', false) then\r\n    print(\"Dev Mode is eanbled, load dev mode menus\")\r\nend"
                }
            ],
            "hash": "0x7E8EBFE5",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x9E666D": {
            "name": "GET_CONVAR_FLOAT",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to get"
                },
                {
                    "name": "defaultValue",
                    "type": "float",
                    "description": "The default value to set, if none are found."
                }
            ],
            "return_type": "float",
            "description": "This will have floating point inaccuracy.",
            "examples": [],
            "hash": "0x9E666D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the value set in varName, or `default` if none are specified"
        },
        "0x935C0AB2": {
            "name": "GET_CONVAR_INT",
            "params": [
                {
                    "name": "varName",
                    "type": "const char*",
                    "description": "The console variable to look up."
                },
                {
                    "name": "default_",
                    "type": "int",
                    "description": "The default value to set if none is found (variable not set using [SET_CONVAR](#\\_0x341B16D2), or not accessible)."
                }
            ],
            "return_type": "int",
            "description": "Can be used to get a console variable casted back to `int` (an integer value).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if GetConvarInt('remainingRounds', 0) < 900 then\r\n    Citizen.Trace(\"Less than 900 rounds remaining...\")\r\nend"
                }
            ],
            "hash": "0x935C0AB2",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns the convar value if it can be found, otherwise it returns the assigned `default`."
        },
        "0x804B9F7B": {
            "name": "GET_GAME_BUILD_NUMBER",
            "params": [],
            "return_type": "int",
            "description": "Returns the internal build number of the current game being executed.\n\nPossible values:\n\n*   FiveM\n    *   1604\n    *   2060\n    *   2189\n    *   2372\n    *   2545\n    *   2612\n    *   2699\n    *   2802\n    *   2944\n    *   3095\n    *   3258\n    *   3323\n    *   3407\n    *   3570\n*   RedM\n    *   1311\n    *   1355\n    *   1436\n    *   1491\n*   LibertyM\n    *   43\n*   FXServer\n    *   0",
            "examples": [],
            "hash": "0x804B9F7B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The build number, or **0** if no build number is known."
        },
        "0xE8EAA18B": {
            "name": "GET_GAME_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the current game being executed.\n\nPossible values:\n\n| Return value | Meaning                        |\r\n| ------------ | ------------------------------ |\r\n| `fxserver`   | Server-side code ('Duplicity') |\r\n| `fivem`      | FiveM for GTA V                |\r\n| `libertym`   | LibertyM for GTA IV            |\r\n| `redm`       | RedM for Red Dead Redemption 2 |",
            "examples": [],
            "hash": "0xE8EAA18B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The game the script environment is running in."
        },
        "0x2B9D4F50": {
            "name": "GET_GAME_POOL",
            "params": [
                {
                    "name": "poolName",
                    "type": "const char*",
                    "description": "The pool name to get a list of entities from."
                }
            ],
            "return_type": "Object",
            "description": "Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as\r\nfollows:\n\n```json\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```\n\n### Supported pools\n\n*   `CPed`: Peds (including animals) and players.\n*   `CObject`: Objects (props), doors, and projectiles.\n*   `CNetObject`: Networked objects\n*   `CVehicle`: Vehicles.\n*   `CPickup`: Pickups.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local vehiclePool = GetGamePool('CVehicle') -- Get the list of vehicles (entities) from the pool\r\nfor i = 1, #vehiclePool do -- loop through each vehicle (entity)\r\n    if GetPedInVehicleSeat(vehiclePool[i], -1) == 0 then\r\n        DeleteEntity(vehiclePool[i]) -- Delete vehicles (entities) that don't have a driver\r\n    end\r\nend"
                }
            ],
            "hash": "0x2B9D4F50",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An array containing entity handles for each entity in the named pool."
        },
        "0x9F1C4383": {
            "name": "GET_INSTANCE_ID",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x9F1C4383",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0xD4BEF069": {
            "name": "GET_REGISTERED_COMMANDS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all commands that are registered in the command system.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\",\r\n\"resource\": \"resource\",\r\n\"arity\" = -1,\r\n},\r\n{\r\n\"name\": \"command1\"\r\n\"resource\": \"resource_2\",\r\n\"arity\" = -1,\r\n}\r\n]\n```",
            "examples": [],
            "hash": "0xD4BEF069",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An object containing registered commands."
        },
        "0x78D864C7": {
            "name": "GET_STATE_BAG_KEYS",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "The name of the bag."
                }
            ],
            "return_type": "Object",
            "description": "",
            "examples": [],
            "hash": "0x78D864C7",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns an array containing all keys for which the state bag has associated values."
        },
        "0x637F4C75": {
            "name": "GET_STATE_BAG_VALUE",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*"
                },
                {
                    "name": "key",
                    "type": "const char*"
                }
            ],
            "return_type": "Object",
            "description": "Returns the value of a state bag key.",
            "examples": [],
            "hash": "0x637F4C75",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Value."
        },
        "0x7EBB9929": {
            "name": "IS_ACE_ALLOWED",
            "params": [
                {
                    "name": "object",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x7EBB9929",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0xCF24C52E": {
            "name": "IS_DUPLICITY_VERSION",
            "params": [],
            "return_type": "BOOL",
            "description": "Gets whether or not this is the CitizenFX server.",
            "examples": [],
            "hash": "0xCF24C52E",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A boolean value."
        },
        "0x37CF52CE": {
            "name": "IS_PRINCIPAL_ACE_ALLOWED",
            "params": [
                {
                    "name": "principal",
                    "type": "const char*"
                },
                {
                    "name": "object",
                    "type": "const char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x37CF52CE",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x5FA79B0F": {
            "name": "REGISTER_COMMAND",
            "params": [
                {
                    "name": "commandName",
                    "type": "const char*",
                    "description": "The command you want to register."
                },
                {
                    "name": "handler",
                    "type": "Function",
                    "description": "A handler function that gets called whenever the command is executed."
                },
                {
                    "name": "restricted",
                    "type": "BOOL",
                    "description": "If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command."
                }
            ],
            "return_type": "void",
            "description": "Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- (server side script)\r\n-- Registers a command named 'ping'.\r\nRegisterCommand(\"ping\", function(source, args, rawCommand)\r\n    -- If the source is > 0, then that means it must be a player.\r\n    if (source > 0) then\r\n    \r\n        -- result (using the default GTA:O chat theme) https://i.imgur.com/TaCnG09.png\r\n        TriggerClientEvent(\"chat:addMessage\", -1, {\r\n            args = {\r\n                GetPlayerName(source),\r\n                \"PONG!\"\r\n            },\r\n            color = { 5, 255, 255 }\r\n        })\r\n    \r\n    -- If it's not a player, then it must be RCON, a resource, or the server console directly.\r\n    else\r\n        print(\"This command was executed by the server console, RCON client, or a resource.\")\r\n    end\r\nend, false --[[this command is not restricted, everyone can use this.]])"
                },
                {
                    "lang": "cs",
                    "code": "RegisterCommand(\"ping\", new Action<int, List<object>, string>((source, args, rawCommand) =>\r\n{\r\n    if (source > 0) // it's a player.\r\n    {\r\n        // Create a message object.\r\n        dynamic messageObject = new ExpandoObject();\r\n        // Set the message object args (message author, message content)\r\n        messageObject.args = new string[] { GetPlayerName(source.ToString()), \"PONG!\" };\r\n        // Set the message color (r, g, b)\r\n        messageObject.color = new int[] { 5, 255, 255 };\r\n\r\n        // Trigger the client event with the message object on all clients.\r\n        TriggerClientEvent(\"chat:addMessage\", messageObject);\r\n    }\r\n    // It's not a player, so it's the server console, a RCON client, or a resource.\r\n    else\r\n    {\r\n        Debug.WriteLine(\"This command was executed by the server console, RCON client, or a resource.\");\r\n    }\r\n}), false /*This command is also not restricted, anyone can use it.*/ );"
                }
            ],
            "hash": "0x5FA79B0F",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xEAC49841": {
            "name": "REMOVE_CONVAR_CHANGE_LISTENER",
            "params": [
                {
                    "name": "cookie",
                    "type": "int",
                    "description": "The cookie returned from [ADD_CONVAR_CHANGE_LISTENER](#\\_0xAB7F7241)"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xEAC49841",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xD36BE661": {
            "name": "REMOVE_STATE_BAG_CHANGE_HANDLER",
            "params": [
                {
                    "name": "cookie",
                    "type": "int",
                    "description": "The cookie."
                }
            ],
            "return_type": "void",
            "description": "**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRemoves a handler for changes to a state bag.",
            "examples": [],
            "hash": "0xD36BE661",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x8D50E33A": {
            "name": "SET_STATE_BAG_VALUE",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*"
                },
                {
                    "name": "keyName",
                    "type": "const char*"
                },
                {
                    "name": "valueData",
                    "type": "const char*"
                },
                {
                    "name": "valueLength",
                    "type": "int"
                },
                {
                    "name": "replicated",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Internal function for setting a state bag value.",
            "examples": [],
            "hash": "0x8D50E33A",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x12A330": {
            "name": "STATE_BAG_HAS_KEY",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "The name of the bag."
                },
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key used to check data existence."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x12A330",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "Returns true if the data associated with the specified key exists; otherwise, returns false."
        },
        "0x91310870": {
            "name": "TRIGGER_EVENT_INTERNAL",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*"
                },
                {
                    "name": "eventPayload",
                    "type": "const char*"
                },
                {
                    "name": "payloadLength",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "The backing function for TriggerEvent.",
            "examples": [],
            "hash": "0x91310870",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x58382A19": {
            "name": "WAS_EVENT_CANCELED",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns whether or not the currently executing event was canceled.",
            "examples": [],
            "hash": "0x58382A19",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A boolean."
        }
    },
    "PED": {
        "0x70559AC7": {
            "name": "ADD_PED_DECORATION_FROM_HASHES",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "collection",
                    "type": "Hash"
                },
                {
                    "name": "overlay",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.\r\ncollection - PedDecorationCollection filename hash\r\noverlay - Item name hash\r\nExample:\r\nEntry inside \"mpbeach_overlays.xml\" -\r\n<Item>\r\n<uvPos x=\"0.500000\" y=\"0.500000\" />\r\n<scale x=\"0.600000\" y=\"0.500000\" />\r\n<rotation value=\"0.000000\" />\r\n<nameHash>FM_Hair_Fuzz</nameHash>\r\n<txdHash>mp_hair_fuzz</txdHash>\r\n<txtHash>mp_hair_fuzz</txtHash>\r\n<zone>ZONE_HEAD</zone>\r\n<type>TYPE_TATTOO</type>\r\n<faction>FM</faction>\r\n<garment>All</garment>\r\n<gender>GENDER_DONTCARE</gender>\r\n<award />\r\n<awardLevel />\r\n</Item>\r\nCode:\r\nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY(\"mpbeach_overlays\"), MISC::GET_HASH_KEY(\"fm_hair_fuzz\"))\n```\n\n**This is the server-side RPC native equivalent of the client native [ADD_PED_DECORATION_FROM_HASHES](?\\_0x5F5D1665E352A839).**",
            "examples": [],
            "hash": "0x70559AC7",
            "ns": "CFX",
            "aliases": [
                "_APPLY_PED_OVERLAY",
                "_SET_PED_DECORATION"
            ],
            "apiset": "server"
        },
        "0x2D23D743": {
            "name": "CLEAR_PED_PROP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "propId",
                    "type": "int",
                    "description": "The prop id you want to clear from the ped. Refer to [SET_PED_PROP_INDEX](#\\_0x93376B65A266EB5F)."
                }
            ],
            "return_type": "void",
            "description": "CLEAR_PED_PROP\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_PROP](?\\_0x0943E5B8E078E76E).**",
            "examples": [],
            "hash": "0x2D23D743",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA635F451": {
            "name": "CLEAR_PED_SECONDARY_TASK",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "CLEAR_PED_SECONDARY_TASK\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_SECONDARY_TASK](?\\_0x176CECF6F920D707).**",
            "examples": [],
            "hash": "0xA635F451",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x389EF71": {
            "name": "CREATE_PED",
            "params": [
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified."
                },
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model of ped to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "heading",
                    "type": "float",
                    "description": "Heading to face towards, in degrees."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the ped. If false, the ped exists only locally."
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL",
                    "description": "Whether to register the ped as pinned to the script host in the R\\* network model."
                }
            ],
            "return_type": "Entity",
            "description": "Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.\r\nThis ped will initially be owned by the creating script as a mission entity, and the model should be loaded already\r\n(e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED](?\\_0xD49F9B0955C367DE).**",
            "examples": [],
            "hash": "0x389EF71",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created."
        },
        "0x3000F092": {
            "name": "CREATE_PED_INSIDE_VEHICLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "pedType",
                    "type": "int",
                    "description": "See [`CREATE_PED`](#\\_0xD49F9B0955C367DE)"
                },
                {
                    "name": "modelHash",
                    "type": "Hash"
                },
                {
                    "name": "seat",
                    "type": "int"
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL"
                },
                {
                    "name": "bScriptHostPed",
                    "type": "BOOL"
                }
            ],
            "return_type": "Entity",
            "description": "CREATE_PED_INSIDE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [CREATE_PED_INSIDE_VEHICLE](?\\_0x7DD959874C1FD534).**",
            "examples": [],
            "hash": "0x3000F092",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xB8584FEF": {
            "name": "GET_ALL_PEDS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all peds handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- This example prints information of every ped that has an owner.\r\n\r\nfor i, ped in ipairs(GetAllPeds()) do\r\n    local pedOwner = NetworkGetEntityOwner(ped)\r\n    if pedOwner > 0 then\r\n       local playerName = GetPlayerName(pedOwner)\r\n       local pedModel = GetEntityModel(ped)\r\n       local pedArmour = GetPedArmour(ped)\r\n       print(\"Ped : \"..ped..\" | Owner name : \"..playerName..\" | Model : \"..pedModel..\" | Armour : \"..pedArmour)\r\n    end\r\nend"
                }
            ],
            "hash": "0xB8584FEF",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of peds handles."
        },
        "0xB0237302": {
            "name": "GET_CURRENT_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "Returns the hash of weapon the Ped is currently using.",
            "examples": [],
            "hash": "0xB0237302",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The weapon hash."
        },
        "0xF7C6792D": {
            "name": "GET_LAST_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "Entity",
            "description": "",
            "examples": [],
            "hash": "0xF7C6792D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The last ped in the specified seat of the passed vehicle. Returns 0 if the specified seat was never occupied or the last ped does not exist anymore."
        },
        "0x2CE311A7": {
            "name": "GET_PED_ARMOUR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2CE311A7",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x63458C27": {
            "name": "GET_PED_CAUSE_OF_DEATH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "Hash",
            "description": "",
            "examples": [],
            "hash": "0x63458C27",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0xC182F76E": {
            "name": "GET_PED_DESIRED_HEADING",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xC182F76E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Returns ped's desired heading."
        },
        "0x388FDE9A": {
            "name": "GET_PED_IN_VEHICLE_SEAT",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "Entity",
            "description": "",
            "examples": [],
            "hash": "0x388FDE9A",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The ped in the specified seat of the passed vehicle. Returns 0 if the specified seat is not occupied."
        },
        "0xA45B6C8D": {
            "name": "GET_PED_MAX_HEALTH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0xA45B6C8D",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": ""
        },
        "0x354F283C": {
            "name": "GET_PED_RELATIONSHIP_GROUP_HASH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Hash",
            "description": "Gets the current relationship group hash of a ped.",
            "examples": [],
            "hash": "0x354F283C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The relationship group hash."
        },
        "0x84FE084": {
            "name": "GET_PED_SCRIPT_TASK_COMMAND",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "Gets the script task command currently assigned to the ped.",
            "examples": [],
            "hash": "0x84FE084",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The script task command currently assigned to the ped. A value of 0x811E343C denotes no script task is assigned."
        },
        "0x44B0E5E2": {
            "name": "GET_PED_SCRIPT_TASK_STAGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "int",
            "description": "Gets the stage of the peds scripted task.",
            "examples": [],
            "hash": "0x44B0E5E2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The stage of the ped's scripted task. A value of 3 denotes no script task is assigned."
        },
        "0x535DB43F": {
            "name": "GET_PED_SOURCE_OF_DAMAGE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Entity",
            "description": "Get the last entity that damaged the ped. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x535DB43F",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The entity id. Returns 0 if the ped has not been damaged recently."
        },
        "0x84ADF9EB": {
            "name": "GET_PED_SOURCE_OF_DEATH",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped"
                }
            ],
            "return_type": "Entity",
            "description": "Get the entity that killed the ped. This native is used server side when using OneSync.",
            "examples": [],
            "hash": "0x84ADF9EB",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The entity id. Returns 0 if the ped has no killer."
        },
        "0x7F4563D3": {
            "name": "GET_PED_SPECIFIC_TASK_TYPE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "A zero-based index with a maximum value of 7."
                }
            ],
            "return_type": "int",
            "description": "Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.\r\nA ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.",
            "examples": [],
            "hash": "0x7F4563D3",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The type of the specific task.\r\n1604: A value of 530 denotes no script task is assigned or an invalid input was given.\r\n2060+: A value of 531 denotes no script task is assigned or an invalid input was given."
        },
        "0x40321B83": {
            "name": "GET_PED_STEALTH_MOVEMENT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x40321B83",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is stealthy."
        },
        "0xD240123E": {
            "name": "GET_SELECTED_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "Hash",
            "description": "An alias of [GET_CURRENT_PED_WEAPON](#\\_0xB0237302).\n\nNote, the client-side [GET_SELECTED_PED_WEAPON](#\\_0x0A6DB4965674D243) native returns the weapon selected via the HUD (weapon wheel). This data is not available to FXServer.",
            "examples": [],
            "hash": "0xD240123E",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "The weapon hash."
        },
        "0x25865633": {
            "name": "IS_PED_HANDCUFFED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x25865633",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is handcuffed."
        },
        "0xC833BBE1": {
            "name": "IS_PED_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xC833BBE1",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is ragdolling."
        },
        "0xEFEED13C": {
            "name": "IS_PED_STRAFING",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0xEFEED13C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is strafing."
        },
        "0x5AE7EDA2": {
            "name": "IS_PED_USING_ACTION_MODE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The target ped."
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x5AE7EDA2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the ped is using action mode."
        },
        "0xB8278882": {
            "name": "SET_CURRENT_PED_WEAPON",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "bForceInHand",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "SET_CURRENT_PED_WEAPON\n\n**This is the server-side RPC native equivalent of the client native [SET_CURRENT_PED_WEAPON](?\\_0xADF692B254977C0C).**",
            "examples": [],
            "hash": "0xB8278882",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xBF90DF1A": {
            "name": "SET_PED_AMMO",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "ammo",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nNativeDB Added Parameter 4: BOOL p3\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_AMMO](?\\_0x14E56BC5B5DB6A19).**",
            "examples": [],
            "hash": "0xBF90DF1A",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x4E3A0CC4": {
            "name": "SET_PED_ARMOUR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "amount",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nSets the armor of the specified ped.\r\nped: The Ped to set the armor of.\r\namount: A value between 0 and 100 indicating the value to set the Ped's armor to.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_ARMOUR](?\\_0xCEA04D83135264CC).**",
            "examples": [],
            "hash": "0x4E3A0CC4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCF1384C4": {
            "name": "SET_PED_CAN_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "toggle",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "SET_PED_CAN_RAGDOLL\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CAN_RAGDOLL](?\\_0xB128377056A54E2A).**",
            "examples": [],
            "hash": "0xCF1384C4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD4F7B05C": {
            "name": "SET_PED_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\\_0x27561561732A7842)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\\_0x8F7156A3142A6BAD)."
                },
                {
                    "name": "paletteId",
                    "type": "int",
                    "description": "0 to 3."
                }
            ],
            "return_type": "void",
            "description": "This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of components\n\n**0**: Face\r\n**1**: Mask\r\n**2**: Hair\r\n**3**: Torso\r\n**4**: Leg\r\n**5**: Parachute / bag\r\n**6**: Shoes\r\n**7**: Accessory\r\n**8**: Undershirt\r\n**9**: Kevlar\r\n**10**: Badge\r\n**11**: Torso 2\r\nList of Component IDs\n\n```cpp\n// Components\r\nenum ePedVarComp\r\n{\r\nPV_COMP_INVALID = 0xFFFFFFFF,\r\nPV_COMP_HEAD = 0, // \"HEAD\"\r\nPV_COMP_BERD = 1, // \"BEARD\"\r\nPV_COMP_HAIR = 2, // \"HAIR\"\r\nPV_COMP_UPPR = 3, // \"UPPER\"\r\nPV_COMP_LOWR = 4, // \"LOWER\"\r\nPV_COMP_HAND = 5, // \"HAND\"\r\nPV_COMP_FEET = 6, // \"FEET\"\r\nPV_COMP_TEEF = 7, // \"TEETH\"\r\nPV_COMP_ACCS = 8, // \"ACCESSORIES\"\r\nPV_COMP_TASK = 9, // \"TASK\"\r\nPV_COMP_DECL = 10, // \"DECL\"\r\nPV_COMP_JBIB = 11, // \"JBIB\"\r\nPV_COMP_MAX = 12,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_COMPONENT_VARIATION](?\\_0x262B14F48D29DE80).**",
            "examples": [],
            "hash": "0xD4F7B05C",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9CFBE10D": {
            "name": "SET_PED_CONFIG_FLAG",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "flagId",
                    "type": "int"
                },
                {
                    "name": "value",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "```cpp\n// Potential names and hash collisions included as comments\r\nenum ePedConfigFlags {\r\nCPED_CONFIG_FLAG_CreatedByFactory = 0,\r\nCPED_CONFIG_FLAG_CanBeShotInVehicle = 1,\r\nCPED_CONFIG_FLAG_NoCriticalHits = 2,\r\nCPED_CONFIG_FLAG_DrownsInWater = 3,\r\nCPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4,\r\nCPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5,\r\nCPED_CONFIG_FLAG_HasBulletProofVest = 6,\r\nCPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,\r\nCPED_CONFIG_FLAG_NeverFallOffSkis = 8,\r\nCPED_CONFIG_FLAG_NeverEverTargetThisPed = 9,\r\nCPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10,\r\nCPED_CONFIG_FLAG_TargettableWithNoLos = 11,\r\nCPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12,\r\nCPED_CONFIG_FLAG_NeverLeavesGroup = 13,\r\nCPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14,\r\nCPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15,\r\nCPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16,\r\nCPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,\r\nCPED_CONFIG_FLAG_HasAScriptBrain = 18,\r\nCPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19,\r\nCPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20,\r\nCPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21,\r\nCPED_CONFIG_FLAG_NotAllowedToCrouch = 22,\r\nCPED_CONFIG_FLAG_DeathPickupsPersist = 23,\r\nCPED_CONFIG_FLAG_IgnoreSeenMelee = 24,\r\nCPED_CONFIG_FLAG_ForceDieIfInjured = 25,\r\nCPED_CONFIG_FLAG_DontDragMeOutCar = 26,\r\nCPED_CONFIG_FLAG_StayInCarOnJack = 27,\r\nCPED_CONFIG_FLAG_ForceDieInCar = 28,\r\nCPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,\r\nCPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30,\r\nCPED_CONFIG_FLAG_DontStoreAsPersistent = 31,\r\nCPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32,\r\nCPED_CONFIG_FLAG_DieWhenRagdoll = 33,\r\nCPED_CONFIG_FLAG_HasHelmet = 34,\r\nCPED_CONFIG_FLAG_UseHelmet = 35,\r\nCPED_CONFIG_FLAG_DontTakeOffHelmet = 36,\r\nCPED_CONFIG_FLAG_HideInCutscene = 37,\r\nCPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38,\r\nCPED_CONFIG_FLAG_DisableEvasiveDives = 39,\r\nCPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40,\r\nCPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41,\r\nCPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,\r\nCPED_CONFIG_FLAG_DisablePlayerLockon = 43,\r\nCPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,\r\nCPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,\r\n_0xDB115BFA = 46,\r\nCPED_CONFIG_FLAG_PedBeingDeleted = 47,\r\nCPED_CONFIG_FLAG_BlockWeaponSwitching = 48,\r\nCPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49,\r\nCPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50,\r\nCPED_CONFIG_FLAG_BlippedByScript = 51,\r\nCPED_CONFIG_FLAG_DrawRadarVisualField = 52,\r\nCPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53,\r\nCPED_CONFIG_FLAG_DissableAutoFallOffTests = 54,\r\nCPED_CONFIG_FLAG_SteerAroundDeadBodies = 55,\r\nCPED_CONFIG_FLAG_ConstrainToNavMesh = 56,\r\nCPED_CONFIG_FLAG_SyncingAnimatedProps = 57,\r\nCPED_CONFIG_FLAG_IsFiring = 58,\r\nCPED_CONFIG_FLAG_WasFiring = 59,\r\nCPED_CONFIG_FLAG_IsStanding = 60,\r\nCPED_CONFIG_FLAG_WasStanding = 61,\r\nCPED_CONFIG_FLAG_InVehicle = 62,\r\nCPED_CONFIG_FLAG_OnMount = 63,\r\nCPED_CONFIG_FLAG_AttachedToVehicle = 64,\r\nCPED_CONFIG_FLAG_IsSwimming = 65,\r\nCPED_CONFIG_FLAG_WasSwimming = 66,\r\nCPED_CONFIG_FLAG_IsSkiing = 67,\r\nCPED_CONFIG_FLAG_IsSitting = 68,\r\nCPED_CONFIG_FLAG_KilledByStealth = 69,\r\nCPED_CONFIG_FLAG_KilledByTakedown = 70,\r\nCPED_CONFIG_FLAG_Knockedout = 71,\r\nCPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72,\r\nCPED_CONFIG_FLAG_JustGotOffTrain = 73,\r\nCPED_CONFIG_FLAG_JustGotOnTrain = 74,\r\nCPED_CONFIG_FLAG_UsingCoverPoint = 75,\r\nCPED_CONFIG_FLAG_IsInTheAir = 76,\r\nCPED_CONFIG_FLAG_KnockedUpIntoAir = 77,\r\nCPED_CONFIG_FLAG_IsAimingGun = 78,\r\nCPED_CONFIG_FLAG_HasJustLeftCar = 79,\r\nCPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80,\r\nCPED_CONFIG_FLAG_CurrLeftFootCollNM = 81,\r\nCPED_CONFIG_FLAG_PrevLeftFootCollNM = 82,\r\nCPED_CONFIG_FLAG_CurrRightFootCollNM = 83,\r\nCPED_CONFIG_FLAG_PrevRightFootCollNM = 84,\r\nCPED_CONFIG_FLAG_HasBeenBumpedInCar = 85,\r\nCPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86,\r\nCPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87,\r\nCPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89,\r\nCPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90,\r\nCPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91,\r\nCPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92,\r\nCPED_CONFIG_FLAG_ForcePedLoadCover = 93,\r\nCPED_CONFIG_FLAG_BlockCoweringInCover = 94,\r\nCPED_CONFIG_FLAG_BlockPeekingInCover = 95,\r\nCPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96,\r\nCPED_CONFIG_FLAG_VaultFromCover = 97,\r\nCPED_CONFIG_FLAG_AutoConversationLookAts = 98,\r\nCPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99,\r\nCPED_CONFIG_FLAG_HasDeadPedBeenReported = 100,\r\nCPED_CONFIG_FLAG_ForcedAim = 101,\r\nCPED_CONFIG_FLAG_SteersAroundPeds = 102,\r\nCPED_CONFIG_FLAG_SteersAroundObjects = 103,\r\nCPED_CONFIG_FLAG_OpenDoorArmIK = 104,\r\nCPED_CONFIG_FLAG_ForceReload = 105,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,\r\nCPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111,\r\nCPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112,\r\nCPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,\r\nCPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114,\r\nCPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115,\r\nCPED_CONFIG_FLAG_GetOutBurningVehicle = 116,\r\nCPED_CONFIG_FLAG_BumpedByPlayer = 117,\r\nCPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,\r\nCPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,\r\nCPED_CONFIG_FLAG_IsHandCuffed = 120,\r\nCPED_CONFIG_FLAG_IsAnkleCuffed = 121,\r\nCPED_CONFIG_FLAG_DisableMelee = 122,\r\nCPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,\r\nCPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,\r\nCPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125,\r\nCPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,\r\nCPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,\r\nCPED_CONFIG_FLAG_CanBeAgitated = 128,\r\nCPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,\r\nCPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,\r\nCPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,\r\nCPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,\r\nCPED_CONFIG_FLAG_ForcePedToBeDragged = 133,\r\nCPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,\r\nCPED_CONFIG_FLAG_IsScuba = 135,\r\nCPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,\r\nCPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,\r\nCPED_CONFIG_FLAG_RidingTrain = 138,\r\nCPED_CONFIG_FLAG_ArrestResult = 139,\r\nCPED_CONFIG_FLAG_CanAttackFriendly = 140,\r\nCPED_CONFIG_FLAG_WillJackAnyPlayer = 141,\r\nCPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142,\r\nCPED_CONFIG_FLAG_DodgedPlayerVehicle = 143,\r\nCPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,\r\nCPED_CONFIG_FLAG_NoCopWantedAggro = 145,\r\nCPED_CONFIG_FLAG_DisableLadderClimbing = 146,\r\nCPED_CONFIG_FLAG_StairsDetected = 147,\r\nCPED_CONFIG_FLAG_SlopeDetected = 148,\r\nCPED_CONFIG_FLAG_HelmetHasBeenShot = 149,\r\nCPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,\r\nCPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,\r\nCPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,\r\nCPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,\r\nCPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,\r\nCPED_CONFIG_FLAG_CanPerformArrest = 155,\r\nCPED_CONFIG_FLAG_CanPerformUncuff = 156,\r\nCPED_CONFIG_FLAG_CanBeArrested = 157,\r\nCPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158,\r\nCPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165,\r\nCPED_CONFIG_FLAG_IsInjured = 166,\r\nCPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,\r\nCPED_CONFIG_FLAG_SwimmingTasksRunning = 168,\r\nCPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,\r\nCPED_CONFIG_FLAG_ForceDirectEntry = 170,\r\nCPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,\r\nCPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,\r\nCPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,\r\nCPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,\r\nCPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175,\r\nCPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176,\r\nCPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,\r\nCPED_CONFIG_FLAG_AdditionalRappellingPed = 178,\r\nCPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,\r\nCPED_CONFIG_FLAG_IsInCustody = 180,\r\nCPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,\r\nCPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,\r\nCPED_CONFIG_FLAG_IsAgitated = 183,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,\r\nCPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,\r\nCPED_CONFIG_FLAG_EnableWeaponBlocking = 186,\r\nCPED_CONFIG_FLAG_HasHurtStarted = 187,\r\nCPED_CONFIG_FLAG_DisableHurt = 188,\r\nCPED_CONFIG_FLAG_PlayerIsWeird = 189,\r\nCPED_CONFIG_FLAG_PedHadPhoneConversation = 190,\r\nCPED_CONFIG_FLAG_BeganCrossingRoad = 191,\r\nCPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192,\r\nCPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,\r\nCPED_CONFIG_FLAG_UsingScenario = 194,\r\nCPED_CONFIG_FLAG_VisibleOnScreen = 195,\r\nCPED_CONFIG_FLAG_DontCollideWithKinematic = 196,\r\nCPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197,\r\nCPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198,\r\nCPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,\r\nCPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,\r\nCPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,\r\nCPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,\r\nCPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,\r\nCPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,\r\nCPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207,\r\nCPED_CONFIG_FLAG_DisableExplosionReactions = 208,\r\nCPED_CONFIG_FLAG_DodgedPlayer = 209,\r\nCPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,\r\nCPED_CONFIG_FLAG_ForcedToStayInCover = 211,\r\nCPED_CONFIG_FLAG_GeneratesSoundEvents = 212,\r\nCPED_CONFIG_FLAG_ListensToSoundEvents = 213,\r\nCPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,\r\nCPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,\r\nCPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,\r\nCPED_CONFIG_FLAG_ForceExitToSkyDive = 217,\r\nCPED_CONFIG_FLAG_SteersAroundVehicles = 218,\r\nCPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219,\r\nCPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,\r\nCPED_CONFIG_FLAG_DisableExitToSkyDive = 221,\r\nCPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222,\r\nCPED_CONFIG_FLAG_UseAmbientModelScaling = 223,\r\nCPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224,\r\nCPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,\r\nCPED_CONFIG_FLAG_DisablePedAvoidance = 226,\r\nCPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,\r\nCPED_CONFIG_FLAG_CanLosePropsOnDamage = 228,\r\nCPED_CONFIG_FLAG_DisablePanicInVehicle = 229,\r\nCPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233,\r\nCPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234,\r\nCPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235,\r\nCPED_CONFIG_FLAG_IsHoldingProp = 236,\r\nCPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,\r\nCPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238,\r\nCPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239,\r\nCPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,\r\nCPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,\r\nCPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,\r\nCPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,\r\nCPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,\r\nCPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,\r\nCPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,\r\nCPED_CONFIG_FLAG_InStrafeTransition = 247,\r\nCPED_CONFIG_FLAG_CanPlayInCarIdles = 248,\r\nCPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,\r\nCPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,\r\nCPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,\r\nCPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,\r\nCPED_CONFIG_FLAG_OnStairs = 253,\r\nCPED_CONFIG_FLAG_SimulatingAiming = 254,\r\nCPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,\r\nCPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256,\r\nCPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,\r\nCPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258,\r\nCPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259,\r\nCPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260,\r\nCPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,\r\nCPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262,\r\nCPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263,\r\nCPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264,\r\nCPED_CONFIG_FLAG_PedsFullyInSeat = 265,\r\nCPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266,\r\nCPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267,\r\nCPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,\r\nCPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,\r\nCPED_CONFIG_FLAG_OnStairSlope = 270,\r\nCPED_CONFIG_FLAG_HasPlayedNMGetup = 271,\r\nCPED_CONFIG_FLAG_DontBlipCop = 272,\r\nCPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273,\r\nCPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274,\r\nCPED_CONFIG_FLAG_KillWhenTrapped = 275,\r\nCPED_CONFIG_FLAG_EdgeDetected = 276,\r\nCPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277,\r\nCPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278,\r\nCPED_CONFIG_FLAG_AvoidTearGas = 279,\r\nCPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280,\r\nCPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,\r\nCPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,\r\nCPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283,\r\nCPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284,\r\nCPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,\r\nCPED_CONFIG_FLAG_ShouldChargeNow = 286,\r\nCPED_CONFIG_FLAG_RagdollingOnBoat = 287,\r\nCPED_CONFIG_FLAG_HasBrandishedWeapon = 288,\r\nCPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289,\r\nCPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290,\r\nCPED_CONFIG_FLAG_PedHasBeenSeen = 291,\r\nCPED_CONFIG_FLAG_PedIsInReusePool = 292,\r\nCPED_CONFIG_FLAG_PedWasReused = 293,\r\nCPED_CONFIG_FLAG_DisableShockingEvents = 294,\r\nCPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295,\r\nCPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,\r\nCPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297,\r\nCPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298,\r\nCPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,\r\nCPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300,\r\nCPED_CONFIG_FLAG_DisablePedConstraints = 301,\r\nCPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,\r\nCPED_CONFIG_FLAG_CreatedByDispatch = 303,\r\nCPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304,\r\nCPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308,\r\nCPED_CONFIG_FLAG_DisableQuadrupedSpring = 309,\r\nCPED_CONFIG_FLAG_IsInCluster = 310,\r\nCPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,\r\nCPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,\r\nCPED_CONFIG_FLAG_PreferInjuredGetup = 313,\r\nCPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,\r\nCPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,\r\nCPED_CONFIG_FLAG_JackedAbandonedCar = 316,\r\nCPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,\r\nCPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,\r\nCPED_CONFIG_FLAG_HasPortablePickupAttached = 319,\r\nCPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,\r\nCPED_CONFIG_FLAG_HasClothCollisionBounds = 321,\r\nCPED_CONFIG_FLAG_HasHighHeels = 322,\r\nCPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323,\r\nCPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,\r\nCPED_CONFIG_FLAG_SpawnedAtScenario = 325,\r\nCPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,\r\nCPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,\r\nCPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,\r\nCPED_CONFIG_FLAG_DisableTalkTo = 329,\r\nCPED_CONFIG_FLAG_DontBlip = 330,\r\nCPED_CONFIG_FLAG_IsSwitchingWeapon = 331,\r\nCPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,\r\nCPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333,\r\nCPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334,\r\nCPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335,\r\nCPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336,\r\nCPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337,\r\nCPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338,\r\nCPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,\r\nCPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340,\r\nCPED_CONFIG_FLAG_ForceProneCharacterCloth = 341,\r\nCPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,\r\nCPED_CONFIG_FLAG_InToStrafeTransition = 343,\r\nCPED_CONFIG_FLAG_KilledByStandardMelee = 344,\r\nCPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,\r\nCPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346,\r\nCPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,\r\nCPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,\r\nCPED_CONFIG_FLAG_EquipJetpack = 349,\r\nCPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,\r\nCPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351,\r\nCPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352,\r\nCPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353,\r\nCPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354,\r\nCPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355,\r\nCPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,\r\nCPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,\r\nCPED_CONFIG_FLAG_DontBlipNotSynced = 358,\r\nCPED_CONFIG_FLAG_IsDuckingInVehicle = 359,\r\nCPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,\r\nCPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,\r\nCPED_CONFIG_FLAG_HasReserveParachute = 362,\r\nCPED_CONFIG_FLAG_UseReserveParachute = 363,\r\nCPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,\r\nCPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,\r\nCPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,\r\nCPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367,\r\nCPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368,\r\nCPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369,\r\nCPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370,\r\nCPED_CONFIG_FLAG_InFPSUnholsterTransition = 371,\r\nCPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,\r\nCPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,\r\nCPED_CONFIG_FLAG_NeverLeaveTrain = 374,\r\nCPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,\r\nCPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376,\r\nCPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377,\r\nCPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378,\r\nCPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379,\r\nCPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,\r\nCPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381,\r\nCPED_CONFIG_FLAG_WasPlayingFPSGetup = 382,\r\nCPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383,\r\nCPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384,\r\nCPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385,\r\nCPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386,\r\nCPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387,\r\nCPED_CONFIG_FLAG_IsClimbingLadder = 388,\r\nCPED_CONFIG_FLAG_HasBareFeet = 389,\r\nCPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,\r\nCPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,\r\nCPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,\r\nCPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393,\r\nCPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,\r\nCPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,\r\nCPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,\r\nCPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,\r\nCPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,\r\nCPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,\r\nCPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,\r\nCPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,\r\nCPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,\r\nCPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403,\r\nCPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,\r\nCPED_CONFIG_FLAG_UsingLowriderLeans = 405,\r\nCPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406,\r\nCPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,\r\nCPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,\r\nCPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,\r\nCPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,\r\nCPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,\r\nCPED_CONFIG_FLAG_IsHolsteringWeapon = 413,\r\nCPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,\r\nCPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,\r\nCPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,\r\nCPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,\r\nCPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,\r\nCPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,\r\nCPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420,\r\nCPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,\r\nCPED_CONFIG_FLAG_DisableVehicleCombat = 422,\r\nCPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423,\r\nCPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424,\r\nCPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425,\r\nCPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,\r\nCPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,\r\nCPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,\r\nCPED_CONFIG_FLAG_DisableStartEngine = 429,\r\nCPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,\r\nCPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,\r\nCPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,\r\nCPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,\r\nCPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,\r\nCPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,\r\nCPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,\r\nCPED_CONFIG_FLAG_DontShoutTargetPosition = 437,\r\nCPED_CONFIG_FLAG_DisableHelmetArmor = 438,\r\nCPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439,\r\nCPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440,\r\nCPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,\r\nCPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,\r\nCPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,\r\nCPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,\r\nCPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,\r\nCPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,\r\nCPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,\r\nCPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,\r\nCPED_CONFIG_FLAG_FiresDummyRockets = 449,\r\nCPED_CONFIG_FLAG_PedIsArresting = 450,\r\nCPED_CONFIG_FLAG_IsDecoyPed = 451,\r\nCPED_CONFIG_FLAG_HasEstablishedDecoy = 452,\r\nCPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,\r\nCPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,\r\nCPED_CONFIG_FLAG_HitByTranqWeapon = 455,\r\nCPED_CONFIG_FLAG_CanBeIncapacitated = 456,\r\nCPED_CONFIG_FLAG_ForcedAimFromArrest = 457,\r\nCPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,\r\n_0x4376ABF2 = 459,\r\nCPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460,\r\nCPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461,\r\n_0x262A3B8E = 462,\r\n_0x1AA79A25 = 463,\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_CONFIG_FLAG](?\\_0x1913FE4CBF41C463).**",
            "examples": [],
            "hash": "0x9CFBE10D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC866A984": {
            "name": "SET_PED_DEFAULT_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "```\nSets Ped Default Clothes\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_DEFAULT_COMPONENT_VARIATION](?\\_0x45EEE61580806D63).**",
            "examples": [],
            "hash": "0xC866A984",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA23FE32C": {
            "name": "SET_PED_HAIR_TINT",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped whose hair tint is to be set."
                },
                {
                    "name": "colorID",
                    "type": "int",
                    "description": "The tint index for the primary hair color."
                },
                {
                    "name": "highlightColorID",
                    "type": "int",
                    "description": "The tint index for the hair highlight color."
                }
            ],
            "return_type": "void",
            "description": "Sets the tint index for the hair on the specified ped.\n\n```\nNativeDB Introduced: v323\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HAIR_TINT](?\\_0x4CFFC65454C93A49).**",
            "examples": [],
            "hash": "0xA23FE32C",
            "ns": "CFX",
            "aliases": [
                "_SET_PED_HAIR_COLOR"
            ],
            "apiset": "server"
        },
        "0x60746B88": {
            "name": "SET_PED_HEAD_BLEND_DATA",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "shapeFirstID",
                    "type": "int",
                    "description": "Controls the shape of the first ped's face"
                },
                {
                    "name": "shapeSecondID",
                    "type": "int",
                    "description": "Controls the shape of the second ped's face"
                },
                {
                    "name": "shapeThirdID",
                    "type": "int",
                    "description": "Controls the shape of the third ped's face"
                },
                {
                    "name": "skinFirstID",
                    "type": "int",
                    "description": "Controls the first id's skin tone"
                },
                {
                    "name": "skinSecondID",
                    "type": "int",
                    "description": "Controls the second id's skin tone"
                },
                {
                    "name": "skinThirdID",
                    "type": "int",
                    "description": "Controls the third id's skin tone"
                },
                {
                    "name": "shapeMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (shapeFirstID and shapeSecondID)"
                },
                {
                    "name": "skinMix",
                    "type": "float",
                    "description": "0.0 - 1.0 Of whose characteristics to take Mother -> Father (skinFirstID and skinSecondID)"
                },
                {
                    "name": "thirdMix",
                    "type": "float",
                    "description": "Overrides the others in favor of the third IDs."
                },
                {
                    "name": "isParent",
                    "type": "BOOL",
                    "description": "IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise."
                }
            ],
            "return_type": "void",
            "description": "For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.\r\n**Other information:**\r\nIDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>\r\nThis native function is often called prior to calling natives such as:\n\n*   [`SetPedHairColor`](#\\_0xA23FE32C)\n*   [`SetPedHeadOverlayColor`](#\\_0x78935A27)\n*   [`SetPedHeadOverlay`](#\\_0xD28DBA90)\n*   [`SetPedFaceFeature`](#\\_0x6C8D4458)\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_BLEND_DATA](?\\_0x9414E18B9434C2FE).**",
            "examples": [],
            "hash": "0x60746B88",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xD28DBA90": {
            "name": "SET_PED_HEAD_OVERLAY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "The overlay id displayed up above."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer representing the index (from 0 to `_GET_NUM_OVERLAY_VALUES(overlayID)-1`)"
                },
                {
                    "name": "opacity",
                    "type": "float",
                    "description": "A float ranging from 0.0 to 1.0"
                }
            ],
            "return_type": "void",
            "description": "```\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.\r\noverlayID       Part                  Index, to disable\r\n0               Blemishes             0 - 23, 255\r\n1               Facial Hair           0 - 28, 255\r\n2               Eyebrows              0 - 33, 255\r\n3               Ageing                0 - 14, 255\r\n4               Makeup                0 - 74, 255\r\n5               Blush                 0 - 6, 255\r\n6               Complexion            0 - 11, 255\r\n7               Sun Damage            0 - 10, 255\r\n8               Lipstick              0 - 9, 255\r\n9               Moles/Freckles        0 - 17, 255\r\n10              Chest Hair            0 - 16, 255\r\n11              Body Blemishes        0 - 11, 255\r\n12              Add Body Blemishes    0 - 1, 255\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_OVERLAY](?\\_0x48F44967FA05CC1E).**",
            "examples": [],
            "hash": "0xD28DBA90",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7500C79": {
            "name": "SET_PED_INTO_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669). -2 for the first available seat."
                }
            ],
            "return_type": "void",
            "description": "SET_PED_INTO_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_INTO_VEHICLE](?\\_0xF75B0D629E1C063D).**",
            "examples": [],
            "hash": "0x7500C79",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x829F2E2": {
            "name": "SET_PED_PROP_INDEX",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "componentId",
                    "type": "int",
                    "description": "The component that you want to set. Refer to [SET_PED_COMPONENT_VARIATION](#\\_0x262B14F48D29DE80)."
                },
                {
                    "name": "drawableId",
                    "type": "int",
                    "description": "The drawable id that is going to be set. Refer to [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\\_0x5FAF9754E789FB47)."
                },
                {
                    "name": "textureId",
                    "type": "int",
                    "description": "The texture id of the drawable. Refer to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\\_0xA6E7F1CEB523E171)."
                },
                {
                    "name": "attach",
                    "type": "BOOL",
                    "description": "Attached or not."
                }
            ],
            "return_type": "void",
            "description": "This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.\n\n### MP Freemode list of props\n\n**0**: Hats\r\n**1**: Glasses\r\n**2**: Ears\r\n**6**: Watches\r\n**7**: Bracelets\r\nList of Prop IDs\n\n```cpp\nenum eAnchorPoints\r\n{\r\nANCHOR_HEAD = 0, // \"p_head\"\r\nANCHOR_EYES = 1, // \"p_eyes\"\r\nANCHOR_EARS = 2, // \"p_ears\"\r\nANCHOR_MOUTH = 3, // \"p_mouth\"\r\nANCHOR_LEFT_HAND = 4, // \"p_lhand\"\r\nANCHOR_RIGHT_HAND = 5, // \"p_rhand\"\r\nANCHOR_LEFT_WRIST = 6, // \"p_lwrist\"\r\nANCHOR_RIGHT_WRIST = 7, // \"p_rwrist\"\r\nANCHOR_HIP = 8, // \"p_lhip\"\r\nANCHOR_LEFT_FOOT = 9, // \"p_lfoot\"\r\nANCHOR_RIGHT_FOOT = 10, // \"p_rfoot\"\r\nANCHOR_PH_L_HAND = 11, // \"ph_lhand\"\r\nANCHOR_PH_R_HAND = 12, // \"ph_rhand\"\r\nNUM_ANCHORS = 13,\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_PROP_INDEX](?\\_0x93376B65A266EB5F).**",
            "examples": [],
            "hash": "0x829F2E2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x4111BA46": {
            "name": "SET_PED_RANDOM_COMPONENT_VARIATION",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "p1",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\np1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_COMPONENT_VARIATION](?\\_0xC8A9481A01E63C28).**",
            "examples": [],
            "hash": "0x4111BA46",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xE3318E0E": {
            "name": "SET_PED_RANDOM_PROPS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                }
            ],
            "return_type": "void",
            "description": "SET_PED_RANDOM_PROPS\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_PROPS](?\\_0xC44AA05345C992C6).**",
            "examples": [],
            "hash": "0xE3318E0E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCFF6FF66": {
            "name": "SET_PED_RESET_FLAG",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "flagId",
                    "type": "int"
                },
                {
                    "name": "doReset",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);\r\nKnown values:\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_RESET_FLAG](?\\_0xC1E8A365BF3B29F2).**",
            "examples": [],
            "hash": "0xCFF6FF66",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x83CB5052": {
            "name": "SET_PED_TO_RAGDOLL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to ragdoll."
                },
                {
                    "name": "minTime",
                    "type": "int",
                    "description": "Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1."
                },
                {
                    "name": "maxTime",
                    "type": "int"
                },
                {
                    "name": "ragdollType",
                    "type": "int"
                },
                {
                    "name": "bAbortIfInjured",
                    "type": "BOOL",
                    "description": "unused"
                },
                {
                    "name": "bAbortIfDead",
                    "type": "BOOL",
                    "description": "unused"
                },
                {
                    "name": "bForceScriptControl",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "p4/p5: Unusued in TU27\n\n### Ragdoll Types\n\n**0**: CTaskNMRelax\r\n**1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.\r\n**Else**: CTaskNMBalance\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL](?\\_0xAE99FB955581844A).**",
            "examples": [],
            "hash": "0x83CB5052",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xFA12E286": {
            "name": "SET_PED_TO_RAGDOLL_WITH_FALL",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped to ragdoll."
                },
                {
                    "name": "minTime",
                    "type": "int"
                },
                {
                    "name": "maxTime",
                    "type": "int"
                },
                {
                    "name": "nFallType",
                    "type": "int",
                    "description": "The type of fall."
                },
                {
                    "name": "dirX",
                    "type": "float",
                    "description": "The x direction of the fall."
                },
                {
                    "name": "dirY",
                    "type": "float",
                    "description": "The y direction of the fall."
                },
                {
                    "name": "dirZ",
                    "type": "float",
                    "description": "The z direction of the fall."
                },
                {
                    "name": "fGroundHeight",
                    "type": "float",
                    "description": "The ground height (z)."
                },
                {
                    "name": "grab1X",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab1Y",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab1Z",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2X",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2Y",
                    "type": "float",
                    "description": "unused"
                },
                {
                    "name": "grab2Z",
                    "type": "float",
                    "description": "unused"
                }
            ],
            "return_type": "void",
            "description": "```cpp\nenum eNMFallType {\r\nTYPE_FROM_HIGH = 0,\r\nTYPE_OVER_WALL = 1,\r\nTYPE_DOWN_STAIRS = 2,\r\nTYPE_DIE_TYPES = 3,\r\nTYPE_DIE_FROM_HIGH = 4,\r\nTYPE_DIE_OVER_WALL = 5,\r\nTYPE_DIE_DOWN_STAIRS = 6\r\n}\n```\n\n```\nReturn variable is never used in R*'s scripts.\r\nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.\r\nx, y, and z are coordinates, most likely to where the ped will fall.\r\np7 is probably the force of the fall, but untested, so I left the variable name the same.\r\np8 to p13 are always 0f in R*'s scripts.\r\n(Simplified) Example of the usage of the function from R*'s scripts:\r\nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);\n```\n\n**This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL_WITH_FALL](?\\_0xD76632D99E4966C8).**",
            "examples": [],
            "hash": "0xFA12E286",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xEC09DB1B": {
            "name": "_SET_PED_EYE_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Used for freemode (online) characters.\r\nIndices:\n\n1.  black\n2.  very light blue/green\n3.  dark blue\n4.  brown\n5.  darker brown\n6.  light brown\n7.  blue\n8.  light blue\n9.  pink\n10. yellow\n11. purple\n12. black\n13. dark green\n14. light brown\n15. yellow/black pattern\n16. light colored spiral pattern\n17. shiny red\n18. shiny half blue/half red\n19. half black/half light blue\n20. white/red perimter\n21. green snake\n22. red snake\n23. dark blue snake\n24. dark yellow\n25. bright yellow\n26. all black\n27. red small pupil\n28. devil blue/black\n29. white small pupil\n30. glossed over\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_EYE_COLOR](?\\_0x50B56988B170AFDF).**",
            "examples": [],
            "hash": "0xEC09DB1B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x6C8D4458": {
            "name": "_SET_PED_FACE_FEATURE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "An integer ranging from 0 to 19"
                },
                {
                    "name": "scale",
                    "type": "float",
                    "description": "A float ranging from -1.0 to 1.0"
                }
            ],
            "return_type": "void",
            "description": "Sets the various freemode face features, e.g. nose length, chin shape.\r\n**Indexes (From 0 to 19):**\r\nParentheses indicate morph scale/direction as in (-1.0 to 1.0)\n\n*   **0**: Nose Width (Thin/Wide)\n*   **1**: Nose Peak (Up/Down)\n*   **2**: Nose Length (Long/Short)\n*   **3**: Nose Bone Curveness (Crooked/Curved)\n*   **4**: Nose Tip (Up/Down)\n*   **5**: Nose Bone Twist (Left/Right)\n*   **6**: Eyebrow (Up/Down)\n*   **7**: Eyebrow (In/Out)\n*   **8**: Cheek Bones (Up/Down)\n*   **9**: Cheek Sideways Bone Size (In/Out)\n*   **10**: Cheek Bones Width (Puffed/Gaunt)\n*   **11**: Eye Opening (Both) (Wide/Squinted)\n*   **12**: Lip Thickness (Both) (Fat/Thin)\n*   **13**: Jaw Bone Width (Narrow/Wide)\n*   **14**: Jaw Bone Shape (Round/Square)\n*   **15**: Chin Bone (Up/Down)\n*   **16**: Chin Bone Length (In/Out or Backward/Forward)\n*   **17**: Chin Bone Shape (Pointed/Square)\n*   **18**: Chin Hole (Chin Bum)\n*   **19**: Neck Thickness (Thin/Thick)\r\n    **Note:**\r\n    You may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_FACE_FEATURE](?\\_0x71A5C1DBA060049E).**",
            "examples": [],
            "hash": "0x6C8D4458",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x78935A27": {
            "name": "_SET_PED_HEAD_OVERLAY_COLOR",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "overlayID",
                    "type": "int",
                    "description": "An integer representing the overlay id"
                },
                {
                    "name": "colorType",
                    "type": "int",
                    "description": "1 for eyebrows, beards, makeup, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases."
                },
                {
                    "name": "colorID",
                    "type": "int",
                    "description": "An integer representing the primary color id"
                },
                {
                    "name": "secondColorID",
                    "type": "int",
                    "description": "An integer representing the secondary color id"
                }
            ],
            "return_type": "void",
            "description": "```\nUsed for freemode (online) characters.\r\nCalled after SET_PED_HEAD_OVERLAY().\n```\n\n**Note:**\r\nYou may need to call [`SetPedHeadBlendData`](#\\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.\n\n**This is the server-side RPC native equivalent of the client native [\\_SET_PED_HEAD_OVERLAY_COLOR](?\\_0x497BF74A7B9CB952).**",
            "examples": [],
            "hash": "0x78935A27",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "PHYSICS": {
        "0x760A2D67": {
            "name": "GET_ALL_ROPES",
            "params": [],
            "return_type": "Object",
            "description": "Returns all rope handles. The data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```",
            "examples": [],
            "hash": "0x760A2D67",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of all rope handles."
        },
        "0xA80FFE99": {
            "name": "GET_ROPE_FLAGS",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the flags for."
                }
            ],
            "return_type": "int",
            "description": "```cpp\nenum eRopeFlags\r\n{\r\n    DrawShadowEnabled = 2,\r\n\tBreakable = 4,\r\n\tRopeUnwindingFront = 8,\r\n\tRopeWinding = 32\r\n}\n```",
            "examples": [],
            "hash": "0xA80FFE99",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's flags."
        },
        "0x66D70EA3": {
            "name": "GET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the length change rate for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x66D70EA3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's length change rate."
        },
        "0xF341E6CA": {
            "name": "GET_ROPE_TIME_MULTIPLIER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the time multiplier for."
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xF341E6CA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's time multiplier."
        },
        "0x2AB2E0F6": {
            "name": "GET_ROPE_UPDATE_ORDER",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to get the update order for."
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x2AB2E0F6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The rope's update order."
        },
        "0xF213AE8D": {
            "name": "REGISTER_ROPE_DATA",
            "params": [
                {
                    "name": "numSections",
                    "type": "int"
                },
                {
                    "name": "radius",
                    "type": "float"
                },
                {
                    "name": "diffuseTextureName",
                    "type": "const char*"
                },
                {
                    "name": "normalMapName",
                    "type": "const char*"
                },
                {
                    "name": "distanceMappingScale",
                    "type": "float"
                },
                {
                    "name": "uvScaleX",
                    "type": "float"
                },
                {
                    "name": "uvScaleY",
                    "type": "float"
                },
                {
                    "name": "specularFresnel",
                    "type": "float"
                },
                {
                    "name": "specularFalloff",
                    "type": "float"
                },
                {
                    "name": "specularIntensity",
                    "type": "float"
                },
                {
                    "name": "bumpiness",
                    "type": "float"
                },
                {
                    "name": "color",
                    "type": "int"
                }
            ],
            "return_type": "int",
            "description": "Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference.\r\nReturns a rope type which can be passed into [ADD_ROPE](#\\_0xE832D760399EB220) to use a custom rope design.\r\nOnce a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "-- Create a thick steel cable rope above the players head\r\nlocal ropeType = RegisterRopeData(6, 0.15, \"steel_cable\", \"steel_cable_n\", 1.0, 1.0, 8.775, 0.97, 30.0, 0.25, 1.775, 0x00FFFF00)\r\nif ropeType ~= -1 then\r\n    local coords = GetEntityCoords(PlayerPedId()) + vector3(0.0, 0.0, 5.0)\r\n\tAddRope(coords.x, coords.y, coords.z, 0.0, 0.0, 0.0, 25.0, ropeType, 10.0, 0.0, 1.0, false, false, false, 1.0, false, 0)\r\n    RopeLoadTextures()\r\nend"
                }
            ],
            "hash": "0xF213AE8D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a non-negative value on success, or -1 if the rope data could not be registered or an invalid argument is passed."
        },
        "0x6D712937": {
            "name": "RESET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [],
            "return_type": "void",
            "description": "Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.",
            "examples": [],
            "hash": "0x6D712937",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4D3118ED": {
            "name": "SET_FLY_THROUGH_WINDSCREEN_PARAMS",
            "params": [
                {
                    "name": "vehMinSpeed",
                    "type": "float",
                    "description": "Vehicle minimum speed (default 35.0)."
                },
                {
                    "name": "unkMinSpeed",
                    "type": "float",
                    "description": "Unknown minimum speed (default 40.0)."
                },
                {
                    "name": "unkModifier",
                    "type": "float",
                    "description": "Unknown modifier (default 17.0)."
                },
                {
                    "name": "minDamage",
                    "type": "float",
                    "description": "Minimum damage (default 2000.0)."
                }
            ],
            "return_type": "BOOL",
            "description": "Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.",
            "examples": [],
            "hash": "0x4D3118ED",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "A bool indicating if parameters was set successfully."
        },
        "0xE62FC73": {
            "name": "SET_ROPES_CREATE_NETWORK_WORLD_STATE",
            "params": [
                {
                    "name": "shouldCreate",
                    "type": "BOOL",
                    "description": "Whether to create an underlying network world state"
                }
            ],
            "return_type": "void",
            "description": "Toggles whether the usage of [ADD_ROPE](#\\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.",
            "examples": [],
            "hash": "0xE62FC73",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x69B680A7": {
            "name": "SET_ROPE_LENGTH_CHANGE_RATE",
            "params": [
                {
                    "name": "rope",
                    "type": "int",
                    "description": "The rope to set the length change rate for."
                },
                {
                    "name": "lengthChangeRate",
                    "type": "float",
                    "description": "The rope's new length change rate."
                }
            ],
            "return_type": "void",
            "description": "Set's the ropes length change rate, which is the speed that rope should wind if started.",
            "examples": [],
            "hash": "0x69B680A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "PLAYER": {
        "0xA56135E0": {
            "name": "GET_PLAYER_FROM_STATE_BAG_NAME",
            "params": [
                {
                    "name": "bagName",
                    "type": "const char*",
                    "description": "An internal state bag ID from the argument to a state bag change handler."
                }
            ],
            "return_type": "int",
            "description": "On the server this will return the players source, on the client it will return the player handle.",
            "examples": [
                {
                    "lang": "js",
                    "code": "AddStateBagChangeHandler(\"isDead\", null, async (bagName, key, value /* boolean */) => {\r\n    const ply = GetPlayerFromStateBagName(bagName);\r\n    // The player doesn't exist!\r\n    if (ply === 0) return;\r\n    console.log(`Player: ${GetPlayerName(ply)} ${value ? 'died!' : 'is alive!'`)\r\n})"
                },
                {
                    "lang": "lua",
                    "code": "AddStateBagChangeHandler(\"isDead\", nil, function(bagName, key, value) \r\n    local ply = GetPlayerFromStateBagName(bagName)\r\n    -- The player doesn't exist!\r\n    if ply == 0 then return end\r\n    print(\"Player: \" .. GetPlayerName(ply) .. value and 'died!' or 'is alive!')\r\nend)"
                }
            ],
            "hash": "0xA56135E0",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The player handle or 0 if the state bag name did not refer to a player, or the player does not exist."
        }
    },
    "STREAMING": {
        "0x32CA01C3": {
            "name": "ADD_TEXT_ENTRY",
            "params": [
                {
                    "name": "entryKey",
                    "type": "const char*"
                },
                {
                    "name": "entryText",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x32CA01C3",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x289DA860": {
            "name": "ADD_TEXT_ENTRY_BY_HASH",
            "params": [
                {
                    "name": "entryKey",
                    "type": "Hash"
                },
                {
                    "name": "entryText",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x289DA860",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "TRACK": {
        "0x81A08523": {
            "name": "GET_ALL_TRACK_JUNCTIONS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all track junctions on the client\r\nThe data returned adheres to the following structure:\n\n```\n[1, 2, 4, 6, 69, 420]\n```",
            "examples": [],
            "hash": "0x81A08523",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "An object containing a list of track junctions ids.```\n```"
        },
        "0x59FC24A7": {
            "name": "GET_CLOSEST_TRACK_NODES",
            "params": [
                {
                    "name": "position",
                    "type": "Vector3",
                    "description": "Get track nodes at position"
                },
                {
                    "name": "radius",
                    "type": "float",
                    "description": "Get track nodes within radius"
                }
            ],
            "return_type": "Object",
            "description": "Get all track nodes and their track ids within the radius of the specified coordinates.",
            "examples": [],
            "hash": "0x59FC24A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns a list of tracks and node entries: a trackNode and a trackIdThe data returned adheres to the following layout:    [{trackNode1, trackId1}, ..., {trackNodeN, trackIdN}]"
        },
        "0xBF482A5E": {
            "name": "GET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0xBF482A5E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The braking distance of the track. Used by trains to determine the point to slow down at when entering a station."
        },
        "0x34EE2BF3": {
            "name": "GET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "float",
            "description": "",
            "examples": [],
            "hash": "0x34EE2BF3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The max speed of the track"
        },
        "0x1628548E": {
            "name": "GET_TRACK_NODE_COORDS",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The track node"
                },
                {
                    "name": "coords",
                    "type": "Vector3*",
                    "description": "The resulting track node coords"
                }
            ],
            "return_type": "BOOL",
            "description": "Gets the coordinates of a specific track node.",
            "examples": [],
            "hash": "0x1628548E",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in getting coords or not"
        },
        "0x896A0C11": {
            "name": "GET_TRACK_NODE_COUNT",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index"
                }
            ],
            "return_type": "int",
            "description": "Gets the specified tracks node count.",
            "examples": [],
            "hash": "0x896A0C11",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The amount of track nodes on the specified track"
        },
        "0x31E695CB": {
            "name": "IS_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SET_TRACK_ENABLED](#\\_0x4B41E84C)",
            "examples": [],
            "hash": "0x31E695CB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track is enabled."
        },
        "0xE0C53765": {
            "name": "IS_TRACK_SWITCHED_OFF",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                }
            ],
            "return_type": "BOOL",
            "description": "Getter for [SWITCH_TRAIN_TRACK](#\\_0xFD813BB7DB977F20). Determines if ambient trains are able to spawn on this track.",
            "examples": [],
            "hash": "0xE0C53765",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "If this track allows ambient trains to spawn"
        },
        "0x35F743B5": {
            "name": "REGISTER_TRACK_JUNCTION",
            "params": [
                {
                    "name": "trackIndex",
                    "type": "int",
                    "description": "The track index a train should be on"
                },
                {
                    "name": "trackNode",
                    "type": "int",
                    "description": "The node a train should be on"
                },
                {
                    "name": "newIndex",
                    "type": "int",
                    "description": "The new track index for a train to be placed on"
                },
                {
                    "name": "newNode",
                    "type": "int",
                    "description": "The new track node for a train to be placed on"
                },
                {
                    "name": "direction",
                    "type": "BOOL",
                    "description": "The direction a train should be traveling for this junction"
                }
            ],
            "return_type": "int",
            "description": "Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node",
            "examples": [],
            "hash": "0x35F743B5",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The track junction's handle or -1 if invalid."
        },
        "0x4F3D2B2A": {
            "name": "REMOVE_TRACK_JUNCTION",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                }
            ],
            "return_type": "BOOL",
            "description": "Removes the specified track junction.",
            "examples": [],
            "hash": "0x4F3D2B2A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds in removing a junction or not"
        },
        "0x77EB78D0": {
            "name": "SET_TRACK_BRAKING_DISTANCE",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "brakingDistance",
                    "type": "float",
                    "description": "The new braking distance"
                }
            ],
            "return_type": "void",
            "description": "Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.",
            "examples": [],
            "hash": "0x77EB78D0",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x4B41E84C": {
            "name": "SET_TRACK_ENABLED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "enabled",
                    "type": "BOOL",
                    "description": "Should this track be enabled"
                }
            ],
            "return_type": "void",
            "description": "Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn",
            "examples": [],
            "hash": "0x4B41E84C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x537B449D": {
            "name": "SET_TRACK_JUNCTION_ACTIVE",
            "params": [
                {
                    "name": "junctionIndex",
                    "type": "int",
                    "description": "The junctions index"
                },
                {
                    "name": "state",
                    "type": "BOOL",
                    "description": "Toggles the state of the junction"
                }
            ],
            "return_type": "BOOL",
            "description": "Sets the state of a track junction.",
            "examples": [],
            "hash": "0x537B449D",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if it succeeds setting the junctions state or not"
        },
        "0x37BFC732": {
            "name": "SET_TRACK_MAX_SPEED",
            "params": [
                {
                    "name": "track",
                    "type": "int",
                    "description": "The track id (between 0 - 27)"
                },
                {
                    "name": "newSpeed",
                    "type": "int",
                    "description": "The tracks new speed"
                }
            ],
            "return_type": "void",
            "description": "Sets the max speed for the train tracks. Used by ambient trains and for station calculations",
            "examples": [],
            "hash": "0x37BFC732",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        }
    },
    "VEHICLE": {
        "0xA273060E": {
            "name": "GET_VEHICLE_TYPE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The vehicle's entity handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the type of the passed vehicle.\n\nFor client scripts, reference the more detailed [GET_VEHICLE_TYPE_RAW](#\\_0xDE73BC10) native.\n\n### Vehicle types\n\n*   automobile\n*   bike\n*   boat\n*   heli\n*   plane\n*   submarine\n*   trailer\n*   train",
            "examples": [],
            "hash": "0xA273060E",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "If the entity is a vehicle, the vehicle type. If it is not a vehicle, the return value will be null."
        }
    },
    "WATER": {
        "0xEB1C6DD": {
            "name": "CREATE_DRY_VOLUME",
            "params": [
                {
                    "name": "xMin",
                    "type": "float",
                    "description": "The min X component of the AABB volume where water does not affect the player."
                },
                {
                    "name": "yMin",
                    "type": "float",
                    "description": "The min Y component for the AABB volume."
                },
                {
                    "name": "zMin",
                    "type": "float",
                    "description": "The min Z component for the AABB volume."
                },
                {
                    "name": "xMax",
                    "type": "float",
                    "description": "The max X component for the AABB volume."
                },
                {
                    "name": "yMax",
                    "type": "float",
                    "description": "The max Y component for the AABB volume."
                },
                {
                    "name": "zMax",
                    "type": "float",
                    "description": "The max Z component for the AABB volume."
                }
            ],
            "return_type": "int",
            "description": "Creates a volume where water effects do not apply.\r\nUseful for preventing water collisions from flooding areas underneath them.\r\nThis has no effect on waterquads, only water created from drawables and collisions.\r\nDon't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)",
            "examples": [],
            "hash": "0xEB1C6DD",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x14088095": {
            "name": "GET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int*",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int*",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int*",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int*",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, a0, a1, a2, a3 = GetWaterQuadAlpha(0)"
                }
            ],
            "hash": "0x14088095",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Alpha values are undefined on failure"
        },
        "0x17321452": {
            "name": "GET_WATER_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a water quad if the given point is inside its bounds.\n\n*If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\\_0xF8E03DB8)*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x17321452",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF8E03DB8": {
            "name": "GET_WATER_QUAD_AT_COORDS_3D",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "int",
            "description": "This alternative implementation of [`GetWaterQuadAtCoords`](#\\_0x17321452) also checks the height of the water level.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waterQuadIndex = GetWaterQuadAtCoords(currentPedPosition.x, currentPedPosition.y, currentPedPosition.z)"
                }
            ],
            "hash": "0xF8E03DB8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The water quad index at the given position. Returns -1 if there isn't any there. Also returns -1 if the given point is above the water level."
        },
        "0x42E9A06A": {
            "name": "GET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaterQuadBounds(1)"
                }
            ],
            "hash": "0x42E9A06A",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0xB1884159": {
            "name": "GET_WATER_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waterQuadCount = GetWaterQuadCount()"
                }
            ],
            "hash": "0xB1884159",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of water quads loaded."
        },
        "0x22EA3BD8": {
            "name": "GET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, hasLimitedDepth = GetWaterQuadHasLimitedDepth(0)"
                }
            ],
            "hash": "0x22EA3BD8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has a limited depth."
        },
        "0x1DEDBD77": {
            "name": "GET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, isInvisible = GetWaterQuadIsInvisible(0)"
                }
            ],
            "hash": "0x1DEDBD77",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad is invisible"
        },
        "0x6523816B": {
            "name": "GET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The returned water quad level"
                },
                {
                    "name": "waterQuadLevel",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "*level is defined as \"z\" in water.xml*",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, waterQuadLevel = GetWaterQuadLevel(0)"
                }
            ],
            "hash": "0x6523816B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Level is undefined on failure"
        },
        "0x6F4ACBA": {
            "name": "GET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, noStencil = GetWaterQuadNoStencil(0)"
                }
            ],
            "hash": "0x6F4ACBA",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns if the given water quad has no stencil."
        },
        "0xE2501B8B": {
            "name": "GET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "waterType",
                    "type": "int*"
                }
            ],
            "return_type": "BOOL",
            "description": "Valid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, type = GetWaterQuadType(0)"
                }
            ],
            "hash": "0xE2501B8B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Type is undefined on failure"
        },
        "0x865139A3": {
            "name": "GET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "waveQuadAmplitude",
                    "type": "float*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, amplitude = GetWaveQuadAmplitude(1)"
                }
            ],
            "hash": "0x865139A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Amplitude is undefined on failure"
        },
        "0x3F5A61A7": {
            "name": "GET_WAVE_QUAD_AT_COORDS",
            "params": [
                {
                    "name": "x",
                    "type": "float",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The Y coordinate"
                }
            ],
            "return_type": "int",
            "description": "This native returns the index of a wave quad if the given point is inside its bounds.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local currentPedPosition = GetEntityCoords(PlayerPedId())\r\nlocal waveQuadIndex = GetWaveQuadAtCoords(currentPedPosition.x, currentPedPosition.y)"
                }
            ],
            "hash": "0x3F5A61A7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "The wave quad index at the given position. Returns -1 if there isn't any there."
        },
        "0xF86136DB": {
            "name": "GET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int*",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int*",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int*",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int*",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, minX, minY, maxX, maxY = GetWaveQuadBounds(1)"
                }
            ],
            "hash": "0xF86136DB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Bounds are undefined on failure"
        },
        "0x9250C76": {
            "name": "GET_WAVE_QUAD_COUNT",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local waveQuadCount = GetWaveQuadCount()"
                }
            ],
            "hash": "0x9250C76",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns the amount of wave quads loaded."
        },
        "0xCCE49A1C": {
            "name": "GET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float*",
                    "description": "The wave quad X direction"
                },
                {
                    "name": "directionY",
                    "type": "float*",
                    "description": "The wave quad Y direction"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success, directionX, directionY = GetWaveQuadDirection(1)"
                }
            ],
            "hash": "0xCCE49A1C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success. Direction values are undefined on failure"
        },
        "0xF5102568": {
            "name": "LOAD_WATER_FROM_PATH",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource containing your modified water definition"
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The name of the file"
                }
            ],
            "return_type": "BOOL",
            "description": "Define the xml in a resources fxmanifest, under the file(s) section.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = LoadWaterFromPath('my-resource-name', 'water-all-over-the-place.xml')"
                }
            ],
            "hash": "0xF5102568",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x7BCAA6E7": {
            "name": "REMOVE_DRY_VOLUME",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The handle of the dry volume that needs to be removed."
                }
            ],
            "return_type": "void",
            "description": "Removes a dry volume from the game session.\r\nSee CREATE_DRY_VOLUME for more info",
            "examples": [],
            "hash": "0x7BCAA6E7",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x1DA4791": {
            "name": "RESET_WATER",
            "params": [],
            "return_type": "void",
            "description": "Resets the water to the games default water.xml.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "ResetWater()"
                }
            ],
            "hash": "0x1DA4791",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0x9FCD2EE6": {
            "name": "SET_WATER_AREA_CLIP_RECT",
            "params": [
                {
                    "name": "minX",
                    "type": "int"
                },
                {
                    "name": "minY",
                    "type": "int"
                },
                {
                    "name": "maxX",
                    "type": "int"
                },
                {
                    "name": "maxY",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)\r\nUsed internally by LOAD_GLOBAL_WATER_FILE",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetWaterAreaClipRect(-4000, -4000, 4500, 8000)"
                }
            ],
            "hash": "0x9FCD2EE6",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5"
        },
        "0xF49797EB": {
            "name": "SET_WATER_QUAD_ALPHA",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "a0",
                    "type": "int",
                    "description": "The a0 level"
                },
                {
                    "name": "a1",
                    "type": "int",
                    "description": "The a1 level"
                },
                {
                    "name": "a2",
                    "type": "int",
                    "description": "The a2 level"
                },
                {
                    "name": "a3",
                    "type": "int",
                    "description": "The a3 level"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadAlpha(0, 5, 5, 5, 5)"
                }
            ],
            "hash": "0xF49797EB",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x80AD144C": {
            "name": "SET_WATER_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadBounds(0, -5000.0, -5000.0, 5000.0, 5000.0)"
                }
            ],
            "hash": "0x80AD144C",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xD1FDCFC1": {
            "name": "SET_WATER_QUAD_HAS_LIMITED_DEPTH",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "hasLimitedDepth",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadHasLimitedDepth(0, true)"
                }
            ],
            "hash": "0xD1FDCFC1",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xA387D917": {
            "name": "SET_WATER_QUAD_IS_INVISIBLE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "isInvisible",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadIsInvisible(0, true)"
                }
            ],
            "hash": "0xA387D917",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x6292F7A8": {
            "name": "SET_WATER_QUAD_LEVEL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "level",
                    "type": "float",
                    "description": "The water level inside the water quad"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadLevel(0, 55.0)"
                }
            ],
            "hash": "0x6292F7A8",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xC3FF42FF": {
            "name": "SET_WATER_QUAD_NO_STENCIL",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "noStencil",
                    "type": "BOOL",
                    "description": "Unknown effect"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadNoStencil(0, true)"
                }
            ],
            "hash": "0xC3FF42FF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x50131EB2": {
            "name": "SET_WATER_QUAD_TYPE",
            "params": [
                {
                    "name": "waterQuad",
                    "type": "int",
                    "description": "The water quad index"
                },
                {
                    "name": "type",
                    "type": "int",
                    "description": "The water quad type"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the water quad type.\n\nValid type definitions:\n\n*   **0** Square\n*   **1** Right triangle where the 90 degree angle is at maxX, minY\n*   **2** Right triangle where the 90 degree angle is at minX, minY\n*   **3** Right triangle where the 90 degree angle is at minX, maxY\n*   **4** Right triangle where the 90 degree angle is at maxY, maxY",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaterQuadType(0, 0)"
                }
            ],
            "hash": "0x50131EB2",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xE4174B7B": {
            "name": "SET_WAVE_QUAD_AMPLITUDE",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "amplitude",
                    "type": "float",
                    "description": "The amplitude value"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadAmplitude(0, 1.0)"
                }
            ],
            "hash": "0xE4174B7B",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0x1FCC1FAF": {
            "name": "SET_WAVE_QUAD_BOUNDS",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "minX",
                    "type": "int",
                    "description": "The minX coordinate"
                },
                {
                    "name": "minY",
                    "type": "int",
                    "description": "The minY coordinate"
                },
                {
                    "name": "maxX",
                    "type": "int",
                    "description": "The maxX coordinate"
                },
                {
                    "name": "maxY",
                    "type": "int",
                    "description": "The maxY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "This native allows you to update the bounds of a specified water quad index.",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadBounds(0, -5000, -5000, 5000, 5000)"
                }
            ],
            "hash": "0x1FCC1FAF",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        },
        "0xFC9341A3": {
            "name": "SET_WAVE_QUAD_DIRECTION",
            "params": [
                {
                    "name": "waveQuad",
                    "type": "int",
                    "description": "The wave quad index"
                },
                {
                    "name": "directionX",
                    "type": "float",
                    "description": "The minX coordinate"
                },
                {
                    "name": "directionY",
                    "type": "float",
                    "description": "The minY coordinate"
                }
            ],
            "return_type": "BOOL",
            "description": "directionX/Y should be constrained between -1.0 and 1.0\r\nA positive value will create the wave starting at min and rolling towards max\r\nA negative value will create the wave starting at max and rolling towards min\r\nApplying both values allows you to make diagonal waves",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local success = SetWaveQuadDirection(0, 0.3, 0.1)"
                }
            ],
            "hash": "0xFC9341A3",
            "ns": "CFX",
            "apiset": "client",
            "game": "gta5",
            "resultsDescription": "Returns true on success."
        }
    },
    "WEAPON": {
        "0x3E1E286D": {
            "name": "GIVE_WEAPON_COMPONENT_TO_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "componentHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "GIVE_WEAPON_COMPONENT_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_COMPONENT_TO_PED](?\\_0xD966D51AA5B28BB9).**",
            "examples": [],
            "hash": "0x3E1E286D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC4D88A85": {
            "name": "GIVE_WEAPON_TO_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "ammoCount",
                    "type": "int"
                },
                {
                    "name": "isHidden",
                    "type": "BOOL"
                },
                {
                    "name": "bForceInHand",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "GIVE_WEAPON_TO_PED\n\n**This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_TO_PED](?\\_0xBF0FD6E56C964FCB).**",
            "examples": [],
            "hash": "0xC4D88A85",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xA44CE817": {
            "name": "REMOVE_ALL_PED_WEAPONS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped entity"
                },
                {
                    "name": "p1",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "Parameter `p1` does not seem to be used or referenced in game binaries.\\\n**Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_ALL_PED_WEAPONS](?\\_0xF25DF915FA38C5F3).**",
            "examples": [],
            "hash": "0xA44CE817",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x412AA00D": {
            "name": "REMOVE_WEAPON_COMPONENT_FROM_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                },
                {
                    "name": "componentHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "REMOVE_WEAPON_COMPONENT_FROM_PED\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_COMPONENT_FROM_PED](?\\_0x1E8BE90C74FB4C09).**",
            "examples": [],
            "hash": "0x412AA00D",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x9C37F220": {
            "name": "REMOVE_WEAPON_FROM_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "weaponHash",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nThis native removes a specified weapon from your selected ped.\r\nWeapon Hashes: pastebin.com/0wwDZgkF\r\nExample:\r\nC#:\r\nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);\r\nC++:\r\nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);\r\nThe code above removes the knife from the player.\n```\n\n**This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_FROM_PED](?\\_0x4899CB088EDF59B8).**",
            "examples": [],
            "hash": "0x9C37F220",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "NETWORK": {
        "0x526FEE31": {
            "name": "NETWORK_GET_ENTITY_OWNER",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity",
                    "description": "The entity to get the owner for."
                }
            ],
            "return_type": "int",
            "description": "Returns the owner ID of the specified entity.",
            "examples": [],
            "hash": "0x526FEE31",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner."
        }
    },
    "SHAPETEST": {
        "0x4301E10C": {
            "name": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL",
            "params": [
                {
                    "name": "shapeTestHandle",
                    "type": "int",
                    "description": "A shape test handle."
                },
                {
                    "name": "hit",
                    "type": "BOOL*",
                    "description": "Whether or not the shape test hit any collisions."
                },
                {
                    "name": "endCoords",
                    "type": "Vector3*",
                    "description": "The resulting coordinates where the shape test hit a collision."
                },
                {
                    "name": "surfaceNormal",
                    "type": "Vector3*",
                    "description": "The surface normal of the hit position."
                },
                {
                    "name": "materialHash",
                    "type": "Hash*",
                    "description": "hash of the hit material or surface type, see materialFX.dat"
                },
                {
                    "name": "entityHit",
                    "type": "Entity*",
                    "description": "Any dynamic entity hit by the shape test."
                }
            ],
            "return_type": "int",
            "description": "Returns the result of a shape test, also returning the material of any touched surface.\n\nWhen used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.\n\nUnless the return value is 2, the other return values are undefined.",
            "examples": [],
            "hash": "0x4301E10C",
            "ns": "CFX",
            "apiset": "client",
            "game": "rdr3",
            "resultsDescription": "`0` if the handle is invalid, `1` if the shape test is still pending, or `2` if the shape test has completed, and the handle should be invalidated."
        }
    },
    "CAMERA": {
        "0x8F57A89D": {
            "name": "GET_CAM_MATRIX",
            "params": [
                {
                    "name": "camera",
                    "type": "Cam"
                },
                {
                    "name": "rightVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "forwardVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "upVector",
                    "type": "const Vector3*"
                },
                {
                    "name": "position",
                    "type": "const Vector3*"
                }
            ],
            "return_type": "void",
            "description": "Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.",
            "examples": [],
            "hash": "0x8F57A89D",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DISCORD": {
        "0x6A02254D": {
            "name": "SET_DISCORD_APP_ID",
            "params": [
                {
                    "name": "appId",
                    "type": "const char*",
                    "description": "A valid Discord API App Id, can be generated at https://discordapp.com/developers/applications/"
                }
            ],
            "return_type": "void",
            "description": "This native sets the app id for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x6A02254D",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCBBC3FAC": {
            "name": "SET_DISCORD_RICH_PRESENCE_ACTION",
            "params": [
                {
                    "name": "index",
                    "type": "int",
                    "description": "The button index, either 0 or 1."
                },
                {
                    "name": "label",
                    "type": "const char*",
                    "description": "The text to display on the button."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The URL to open when clicking the button. This has to start with `fivem://connect/` or `https://`."
                }
            ],
            "return_type": "void",
            "description": "Sets a clickable button to be displayed in a player's Discord rich presence.",
            "examples": [],
            "hash": "0xCBBC3FAC",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x53DFD530": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x53DFD530",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF61D04C4": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL",
            "params": [
                {
                    "name": "assetName",
                    "type": "const char*",
                    "description": "The name of a valid asset registered on Discordapp's developer dashboard. Note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xF61D04C4",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x35E62B6A": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_SMALL_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over small image asset. Note that you must also set a valid small image asset using the SET_DISCORD_RICH_PRESENCE_ASSET_SMALL native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the small image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0x35E62B6A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB029D2FA": {
            "name": "SET_DISCORD_RICH_PRESENCE_ASSET_TEXT",
            "params": [
                {
                    "name": "text",
                    "type": "const char*",
                    "description": "Text to be displayed when hovering over image asset. Note that you must also set a valid image asset using the SET_DISCORD_RICH_PRESENCE_ASSET native."
                }
            ],
            "return_type": "void",
            "description": "This native sets the hover text of the image asset for the discord rich presence implementation.",
            "examples": [],
            "hash": "0xB029D2FA",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "DUI": {
        "0x23EAF899": {
            "name": "CREATE_DUI",
            "params": [
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The initial URL to load in the browser."
                },
                {
                    "name": "width",
                    "type": "int",
                    "description": "The width of the backing surface."
                },
                {
                    "name": "height",
                    "type": "int",
                    "description": "The height of the backing surface."
                }
            ],
            "return_type": "long",
            "description": "Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.",
            "examples": [],
            "hash": "0x23EAF899",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A DUI object."
        },
        "0xA085CB10": {
            "name": "DESTROY_DUI",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "void",
            "description": "Destroys a DUI browser.",
            "examples": [],
            "hash": "0xA085CB10",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1655D41D": {
            "name": "GET_DUI_HANDLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the NUI window handle for a specified DUI browser object.",
            "examples": [],
            "hash": "0x1655D41D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "The NUI window handle, for use in e.g. CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
        },
        "0x7AAC3B4C": {
            "name": "IS_DUI_AVAILABLE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                }
            ],
            "return_type": "BOOL",
            "description": "Returns whether or not a browser is created for a specified DUI browser object.",
            "examples": [],
            "hash": "0x7AAC3B4C",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "A boolean indicating TRUE if the browser is created."
        },
        "0xCD380DA9": {
            "name": "SEND_DUI_MESSAGE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "jsonString",
                    "type": "const char*",
                    "description": "The message, encoded as JSON."
                }
            ],
            "return_type": "void",
            "description": "Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.",
            "examples": [],
            "hash": "0xCD380DA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5D01F191": {
            "name": "SEND_DUI_MOUSE_DOWN",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x5D01F191",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xD9D7A0AA": {
            "name": "SEND_DUI_MOUSE_MOVE",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The mouse X position."
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The mouse Y position."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.",
            "examples": [],
            "hash": "0xD9D7A0AA",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x1D735B93": {
            "name": "SEND_DUI_MOUSE_UP",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "button",
                    "type": "const char*",
                    "description": "Either `'left'`, `'middle'` or `'right'`."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.",
            "examples": [],
            "hash": "0x1D735B93",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x2D62133A": {
            "name": "SEND_DUI_MOUSE_WHEEL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "deltaY",
                    "type": "int",
                    "description": "The wheel Y delta."
                },
                {
                    "name": "deltaX",
                    "type": "int",
                    "description": "The wheel X delta."
                }
            ],
            "return_type": "void",
            "description": "Injects a 'mouse wheel' event for a DUI object.",
            "examples": [],
            "hash": "0x2D62133A",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xF761D9F3": {
            "name": "SET_DUI_URL",
            "params": [
                {
                    "name": "duiObject",
                    "type": "long",
                    "description": "The DUI browser handle."
                },
                {
                    "name": "url",
                    "type": "const char*",
                    "description": "The new URL."
                }
            ],
            "return_type": "void",
            "description": "Navigates the specified DUI browser to a different URL.",
            "examples": [],
            "hash": "0xF761D9F3",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "KVP": {
        "0xB3210203": {
            "name": "END_FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xB3210203",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xBD7BEBC5": {
            "name": "FIND_KVP",
            "params": [
                {
                    "name": "handle",
                    "type": "int",
                    "description": "The KVP find handle returned from [START_FIND_KVP](#\\_0xDD379006)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0xBD7BEBC5",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "None."
        },
        "0xDD379006": {
            "name": "START_FIND_KVP",
            "params": [
                {
                    "name": "prefix",
                    "type": "const char*",
                    "description": "A prefix match"
                }
            ],
            "return_type": "int",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis:2', 'should be taken with alcohol')\r\nSetResourceKvp('mollis:1', 'vesuvius citrate')\r\nSetResourceKvp('mollis:manufacturer', 'Betta Pharmaceuticals')\r\n\r\nlocal kvpHandle = StartFindKvp('mollis:')\r\n\r\nif kvpHandle ~= -1 then \r\n\tlocal key\r\n\t\r\n\trepeat\r\n\t\tkey = FindKvp(kvpHandle)\r\n\r\n\t\tif key then\r\n\t\t\tprint(('%s: %s'):format(key, GetResourceKvpString(key)))\r\n\t\tend\r\n\tuntil not key\r\n\r\n\tEndFindKvp(kvpHandle)\r\nelse\r\n\tprint('No KVPs found')\r\nend"
                }
            ],
            "hash": "0xDD379006",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "A KVP find handle to use with [FIND_KVP](#\\_0xBD7BEBC5) and close with [END_FIND_KVP](#\\_0xB3210203)"
        }
    },
    "MUMBLE": {
        "0x262663C5": {
            "name": "MUMBLE_CREATE_CHANNEL",
            "params": [
                {
                    "name": "id",
                    "type": "int",
                    "description": "ID of the channel."
                }
            ],
            "return_type": "void",
            "description": "Create a permanent voice channel.",
            "examples": [],
            "hash": "0x262663C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x1D5D50C2": {
            "name": "MUMBLE_IS_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to get the mute state for"
                }
            ],
            "return_type": "BOOL",
            "description": "Checks if the player is currently muted",
            "examples": [],
            "hash": "0x1D5D50C2",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "Whether or not the player is muted"
        },
        "0xCC6C2EB1": {
            "name": "MUMBLE_SET_PLAYER_MUTED",
            "params": [
                {
                    "name": "playerSrc",
                    "type": "int",
                    "description": "The player to set the mute state of"
                },
                {
                    "name": "toggle",
                    "type": "BOOL",
                    "description": "Whether to mute or unmute the player"
                }
            ],
            "return_type": "void",
            "description": "Mutes or unmutes the specified player",
            "examples": [],
            "hash": "0xCC6C2EB1",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "NUI": {
        "0xBDBA226F": {
            "name": "GET_NUI_CURSOR_POSITION",
            "params": [
                {
                    "name": "x",
                    "type": "int*"
                },
                {
                    "name": "y",
                    "type": "int*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xBDBA226F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x98545E6D": {
            "name": "IS_NUI_FOCUSED",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.",
            "examples": [],
            "hash": "0x98545E6D",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0x39C9DC92": {
            "name": "IS_NUI_FOCUS_KEEPING_INPUT",
            "params": [],
            "return_type": "BOOL",
            "description": "Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.",
            "examples": [],
            "hash": "0x39C9DC92",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "True or false."
        },
        "0xC59B980C": {
            "name": "REGISTER_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "Function"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xC59B980C",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xCD03CDA9": {
            "name": "REGISTER_NUI_CALLBACK_TYPE",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xCD03CDA9",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xA8AE9C2F": {
            "name": "REGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*"
                },
                {
                    "name": "callback",
                    "type": "Function"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0xA8AE9C2F",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x78608ACB": {
            "name": "SEND_NUI_MESSAGE",
            "params": [
                {
                    "name": "jsonString",
                    "type": "char*"
                }
            ],
            "return_type": "BOOL",
            "description": "",
            "examples": [],
            "hash": "0x78608ACB",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": ""
        },
        "0x1722C938": {
            "name": "SET_MANUAL_SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [
                {
                    "name": "manualShutdown",
                    "type": "BOOL",
                    "description": "TRUE to manually shut down the loading screen NUI."
                }
            ],
            "return_type": "void",
            "description": "Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.",
            "examples": [],
            "hash": "0x1722C938",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x5B98AE30": {
            "name": "SET_NUI_FOCUS",
            "params": [
                {
                    "name": "hasFocus",
                    "type": "BOOL"
                },
                {
                    "name": "hasCursor",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x5B98AE30",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3FF5E5F8": {
            "name": "SET_NUI_FOCUS_KEEP_INPUT",
            "params": [
                {
                    "name": "keepInput",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [],
            "hash": "0x3FF5E5F8",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x3734AAFF": {
            "name": "SET_NUI_ZINDEX",
            "params": [
                {
                    "name": "zIndex",
                    "type": "int",
                    "description": "New z-index value."
                }
            ],
            "return_type": "void",
            "description": "Set the z-index of the NUI resource.",
            "examples": [],
            "hash": "0x3734AAFF",
            "ns": "CFX",
            "apiset": "client"
        },
        "0xB9234AFB": {
            "name": "SHUTDOWN_LOADING_SCREEN_NUI",
            "params": [],
            "return_type": "void",
            "description": "Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.",
            "examples": [],
            "hash": "0xB9234AFB",
            "ns": "CFX",
            "apiset": "client"
        },
        "0x7FB46432": {
            "name": "UNREGISTER_RAW_NUI_CALLBACK",
            "params": [
                {
                    "name": "callbackType",
                    "type": "const char*",
                    "description": "The callback type to target"
                }
            ],
            "return_type": "void",
            "description": "Will unregister and cleanup a registered NUI callback handler.\n\nUse along side the REGISTER_RAW_NUI_CALLBACK native.",
            "examples": [],
            "hash": "0x7FB46432",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "OBJECT": {
        "0x2F7AA05C": {
            "name": "CREATE_OBJECT",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component, 'ground level'."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\\_0x509D5878EB39E842).**",
            "examples": [],
            "hash": "0x2F7AA05C",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x58040420": {
            "name": "CREATE_OBJECT_NO_OFFSET",
            "params": [
                {
                    "name": "modelHash",
                    "type": "Hash",
                    "description": "The model to spawn."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "Spawn coordinate X component."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "Spawn coordinate Y component."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "Spawn coordinate Z component."
                },
                {
                    "name": "isNetwork",
                    "type": "BOOL",
                    "description": "Whether to create a network object for the object. If false, the object exists only locally."
                },
                {
                    "name": "netMissionEntity",
                    "type": "BOOL",
                    "description": "Whether to register the object as pinned to the script host in the R\\* network model."
                },
                {
                    "name": "doorFlag",
                    "type": "BOOL",
                    "description": "False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode."
                }
            ],
            "return_type": "Entity",
            "description": "Creates an object (prop) with the specified model centered at the specified position.\r\nThis object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).\n\n**This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\\_0x9A294B2138ABB884).**",
            "examples": [],
            "hash": "0x58040420",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created."
        },
        "0x6886C3FE": {
            "name": "GET_ALL_OBJECTS",
            "params": [],
            "return_type": "Object",
            "description": "Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```",
            "examples": [],
            "hash": "0x6886C3FE",
            "ns": "CFX",
            "apiset": "server",
            "resultsDescription": "An object containing a list of object handles."
        }
    },
    "PAD": {
        "0x8BCF0014": {
            "name": "DISABLE_RAW_KEY_THIS_FRAME",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Disables the specified `rawKeyIndex`, making it not trigger the regular `IS_RAW_KEY_*` natives.\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local KEY_SPACE = 32\r\nDisableRawKeyThisFrame(KEY_SPACE)\r\n-- This will not get triggered this frame\r\nif IsRawKeyDown(KEY_SPACE) then\r\n\tprint(\"unreachable :(\")\r\nend\r\n-- this will get triggered\r\nif IsDisabledRawKeyDown(KEY_SPACE) then\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x8BCF0014",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x36366EC3": {
            "name": "IS_DISABLED_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0x36366EC3",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x1F7CBBAA": {
            "name": "IS_DISABLED_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x1F7CBBAA",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0x72B66C09": {
            "name": "IS_DISABLED_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was released, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0x72B66C09",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x2C033875": {
            "name": "IS_DISABLED_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014).\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsDisabledRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x2C033875",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        },
        "0xD95A7387": {
            "name": "IS_RAW_KEY_DOWN",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed down on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyDown(32) then -- KEY_SPACE\r\n    print(\"Spacebar is down\")\r\nend"
                }
            ],
            "hash": "0xD95A7387",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of down state."
        },
        "0x69F7C29E": {
            "name": "IS_RAW_KEY_PRESSED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is pressed on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyPressed(32) then -- KEY_SPACE\r\n    print(\"Spacebar pressed\")\r\nend"
                }
            ],
            "hash": "0x69F7C29E",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of pressed state."
        },
        "0xEAA50861": {
            "name": "IS_RAW_KEY_RELEASED",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` was just released on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyReleased(32) then -- KEY_SPACE\r\n    print(\"Spacebar released\")\r\nend"
                }
            ],
            "hash": "0xEAA50861",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of released state."
        },
        "0x36F4E505": {
            "name": "IS_RAW_KEY_UP",
            "params": [
                {
                    "name": "rawKeyIndex",
                    "type": "int",
                    "description": "Index of raw key from keyboard."
                }
            ],
            "return_type": "BOOL",
            "description": "Gets if the specified `rawKeyIndex` is up  on the keyboard.\n\nThis will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\\_0x8BCF0014)\n\nVirtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)",
            "examples": [
                {
                    "lang": "lua",
                    "code": "if IsRawKeyUp(32) then -- KEY_SPACE\r\n    print(\"Spacebar is up\")\r\nend"
                }
            ],
            "hash": "0x36F4E505",
            "ns": "CFX",
            "apiset": "client",
            "resultsDescription": "Returns bool value of up state."
        }
    },
    "SOCIAL": {
        "0x7BDCBD45": {
            "name": "SET_RICH_PRESENCE",
            "params": [
                {
                    "name": "presenceState",
                    "type": "const char*",
                    "description": "The rich presence string to set."
                }
            ],
            "return_type": "void",
            "description": "Sets the player's rich presence detail state for social platform providers to a specified string.",
            "examples": [],
            "hash": "0x7BDCBD45",
            "ns": "CFX",
            "apiset": "client"
        }
    },
    "RESOURCE": {
        "0x7389B5DF": {
            "name": "DELETE_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "DeleteResourceKvp('liberty_city')"
                }
            ],
            "hash": "0x7389B5DF",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x4152C90": {
            "name": "DELETE_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to delete"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [DELETE_RESOURCE_KVP](#\\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x4152C90",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xE5E9EBBB": {
            "name": "GET_CURRENT_RESOURCE_NAME",
            "params": [],
            "return_type": "const char*",
            "description": "Returns the name of the currently executing resource.",
            "examples": [],
            "hash": "0xE5E9EBBB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The name of the resource."
        },
        "0x4D52FE5B": {
            "name": "GET_INVOKING_RESOURCE",
            "params": [],
            "return_type": "const char*",
            "description": "",
            "examples": [],
            "hash": "0x4D52FE5B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x863F27B": {
            "name": "GET_NUM_RESOURCES",
            "params": [],
            "return_type": "int",
            "description": "",
            "examples": [],
            "hash": "0x863F27B",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x776E864": {
            "name": "GET_NUM_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key to look up in the resource manifest."
                }
            ],
            "return_type": "int",
            "description": "Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x776E864",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x387246B7": {
            "name": "GET_RESOURCE_BY_FIND_INDEX",
            "params": [
                {
                    "name": "findIndex",
                    "type": "int",
                    "description": "The index of the resource (starting at 0)"
                }
            ],
            "return_type": "const char*",
            "description": "",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local resourceList = {}\r\nfor i = 0, GetNumResources(), 1 do\r\n  local resource_name = GetResourceByFindIndex(i)\r\n  if resource_name and GetResourceState(resource_name) == \"started\" then\r\n    table.insert(resourceList, resource_name)\r\n  end\r\nend\r\nprint(table.unpack(resourceList))"
                }
            ],
            "hash": "0x387246B7",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource name as a `string`"
        },
        "0x97628584": {
            "name": "GET_RESOURCE_COMMANDS",
            "params": [
                {
                    "name": "resource",
                    "type": "const char*"
                }
            ],
            "return_type": "Object",
            "description": "Returns all commands registered by the specified resource.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\",\r\n\"resource\": \"example_resource\",\r\n\"arity\" = -1,\r\n},\r\n{\r\n\"name\": \"command1\"\r\n\"resource\": \"example_resource2\",\r\n\"arity\" = -1,\r\n}\r\n]\n```",
            "examples": [],
            "hash": "0x97628584",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "An object containing registered commands."
        },
        "0x35BDCEEA": {
            "name": "GET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "float",
            "description": "A getter for [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpFloat('mollis')\r\nif kvpValue ~= 0.0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x35BDCEEA",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The floating-point value stored under the specified key, or 0.0 if not found."
        },
        "0x557B586A": {
            "name": "GET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "int",
            "description": "A getter for [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpInt('bananabread') \r\nif kvpValue ~= 0 then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x557B586A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The integer value stored under the specified key, or 0 if not found."
        },
        "0x5240DA5A": {
            "name": "GET_RESOURCE_KVP_STRING",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to fetch"
                }
            ],
            "return_type": "const char*",
            "description": "A getter for [SET_RESOURCE_KVP](#\\_0x21C7A35B).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local kvpValue = GetResourceKvpString('codfish') \r\nif kvpValue then\r\n\t-- do something!\r\nend"
                }
            ],
            "hash": "0x5240DA5A",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The string value stored under the specified key, or nil/null if not found."
        },
        "0x964BAB1D": {
            "name": "GET_RESOURCE_METADATA",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "metadataKey",
                    "type": "const char*",
                    "description": "The key in the resource manifest."
                },
                {
                    "name": "index",
                    "type": "int",
                    "description": "The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1]."
                }
            ],
            "return_type": "const char*",
            "description": "Gets the metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)",
            "examples": [],
            "hash": "0x964BAB1D",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": ""
        },
        "0x4039B485": {
            "name": "GET_RESOURCE_STATE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The name of the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Returns the current state of the specified resource.",
            "examples": [],
            "hash": "0x4039B485",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`."
        },
        "0x76A9EE1F": {
            "name": "LOAD_RESOURCE_FILE",
            "params": [
                {
                    "name": "resourceName",
                    "type": "const char*",
                    "description": "The resource name."
                },
                {
                    "name": "fileName",
                    "type": "const char*",
                    "description": "The file in the resource."
                }
            ],
            "return_type": "const char*",
            "description": "Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`",
            "examples": [],
            "hash": "0x76A9EE1F",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "The file contents"
        },
        "0xD233A168": {
            "name": "REGISTER_RESOURCE_AS_EVENT_HANDLER",
            "params": [
                {
                    "name": "eventName",
                    "type": "const char*",
                    "description": "An event name, or \"\\*\" to disable HLL event filtering for this resource."
                }
            ],
            "return_type": "void",
            "description": "An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.",
            "examples": [],
            "hash": "0xD233A168",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x21C7A35B": {
            "name": "SET_RESOURCE_KVP",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_STRING](#\\_0x5240DA5A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "SetResourceKvp('mollis', 'vesuvius citrate')"
                }
            ],
            "hash": "0x21C7A35B",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x9ADD2938": {
            "name": "SET_RESOURCE_KVP_FLOAT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_FLOAT](#\\_0x35BDCEEA).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42.5\r\nSetResourceKvpFloat('bananabread', lickMy)"
                }
            ],
            "hash": "0x9ADD2938",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x3517BFBE": {
            "name": "SET_RESOURCE_KVP_FLOAT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "float",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x3517BFBE",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x6A2B1E8": {
            "name": "SET_RESOURCE_KVP_INT",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "A setter for [GET_RESOURCE_KVP_INT](#\\_0x557B586A).",
            "examples": [
                {
                    "lang": "lua",
                    "code": "local lickMy = 42\r\nSetResourceKvp('bananabread', lickMy)"
                }
            ],
            "hash": "0x6A2B1E8",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0x26AEB707": {
            "name": "SET_RESOURCE_KVP_INT_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "int",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP_INT](#\\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0x26AEB707",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xCF9A2FF": {
            "name": "SET_RESOURCE_KVP_NO_SYNC",
            "params": [
                {
                    "name": "key",
                    "type": "const char*",
                    "description": "The key to set"
                },
                {
                    "name": "value",
                    "type": "const char*",
                    "description": "The value to write"
                }
            ],
            "return_type": "void",
            "description": "Nonsynchronous [SET_RESOURCE_KVP](#\\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\\_0x5240DA5A).",
            "examples": [],
            "hash": "0xCF9A2FF",
            "ns": "CFX",
            "apiset": "shared"
        }
    },
    "TASK": {
        "0xDE3316AB": {
            "name": "CLEAR_PED_TASKS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id. Use PlayerPedId() for your own character."
                }
            ],
            "return_type": "void",
            "description": "Clear a ped's tasks. Stop animations and other tasks created by scripts.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\\_0xE1EF3C1216AFF2CD).**",
            "examples": [],
            "hash": "0xDE3316AB",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xBC045625": {
            "name": "CLEAR_PED_TASKS_IMMEDIATELY",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "Ped id."
                }
            ],
            "return_type": "void",
            "description": "Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.\n\n**This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\\_0xAAA34F8A7CB32098).**",
            "examples": [],
            "hash": "0xBC045625",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xCB0D8932": {
            "name": "TASK_COMBAT_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "p2",
                    "type": "int"
                },
                {
                    "name": "p3",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nMakes the specified ped attack the target ped.\r\np2 should be 0\r\np3 should be 16\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\\_0xF166E48407BAC484).**",
            "examples": [],
            "hash": "0xCB0D8932",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x2B84D1C4": {
            "name": "TASK_DRIVE_BY",
            "params": [
                {
                    "name": "driverPed",
                    "type": "Ped"
                },
                {
                    "name": "targetPed",
                    "type": "Ped"
                },
                {
                    "name": "targetVehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "targetX",
                    "type": "float"
                },
                {
                    "name": "targetY",
                    "type": "float"
                },
                {
                    "name": "targetZ",
                    "type": "float"
                },
                {
                    "name": "distanceToShoot",
                    "type": "float"
                },
                {
                    "name": "pedAccuracy",
                    "type": "int"
                },
                {
                    "name": "p8",
                    "type": "BOOL"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nExample:\r\nTASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});\r\nNeeds working example. Doesn't seem to do anything.\r\nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.\r\nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.\r\nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\\_0x2F8AF0E82773A171).**",
            "examples": [],
            "hash": "0x2B84D1C4",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xB8689B4E": {
            "name": "TASK_ENTER_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "timeout",
                    "type": "int"
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "flag",
                    "type": "int"
                },
                {
                    "name": "p6",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "```\nspeed 1.0 = walk, 2.0 = run\r\np5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle\r\np6 is always 0\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\\_0xC20E50AA46D09CA8).**",
            "examples": [],
            "hash": "0xB8689B4E",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xC1971F30": {
            "name": "TASK_EVERYONE_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                }
            ],
            "return_type": "void",
            "description": "TASK_EVERYONE_LEAVE_VEHICLE\n\n**This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\\_0x7F93691AB4B92272).**",
            "examples": [],
            "hash": "0xC1971F30",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x80A9E7A7": {
            "name": "TASK_GO_STRAIGHT_TO_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The x coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The y coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The z coordinate."
                },
                {
                    "name": "speed",
                    "type": "float",
                    "description": "The ped movement speed."
                },
                {
                    "name": "timeout",
                    "type": "int",
                    "description": "\\-1 , other values appear to break the ped movement."
                },
                {
                    "name": "targetHeading",
                    "type": "float",
                    "description": "The heading you want the ped to be on x,y,z coord."
                },
                {
                    "name": "distanceToSlide",
                    "type": "float",
                    "description": "The distance from x,y,z where the ped will start sliding."
                }
            ],
            "return_type": "void",
            "description": "TASK_GO_STRAIGHT_TO_COORD\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\\_0xD76B57B44F1E6F8B).**",
            "examples": [],
            "hash": "0x80A9E7A7",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xF91DF93B": {
            "name": "TASK_GO_TO_COORD_ANY_MEANS",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The `Ped` Handle."
                },
                {
                    "name": "x",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "y",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "z",
                    "type": "float",
                    "description": "The goto target coordinate."
                },
                {
                    "name": "fMoveBlendRatio",
                    "type": "float",
                    "description": "0.0 = still, 1.0 = walk, 2.0 = run, 3.0 = sprint."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "If defined, the pedestrian will only move if said vehicle exists. If you don't want any sort of association, just set it to `0`."
                },
                {
                    "name": "bUseLongRangeVehiclePathing",
                    "type": "BOOL",
                    "description": "Setting to `true` tells the vehicle to use longrange vehicle pathing."
                },
                {
                    "name": "drivingFlags",
                    "type": "int",
                    "description": "See `eDrivingMode` enum."
                },
                {
                    "name": "fMaxRangeToShootTargets",
                    "type": "float",
                    "description": "Determines the maximum distance at which the `Ped` will engage in combat with threatening targets."
                }
            ],
            "return_type": "void",
            "description": "Tells a ped to go to a coord by any means.\n\n```cpp\nenum eDrivingMode {\r\nDF_StopForCars = 1,\r\nDF_StopForPeds = 2,\r\nDF_SwerveAroundAllCars = 4,\r\nDF_SteerAroundStationaryCars = 8,\r\nDF_SteerAroundPeds = 16,\r\nDF_SteerAroundObjects = 32,\r\nDF_DontSteerAroundPlayerPed = 64,\r\nDF_StopAtLights = 128,\r\nDF_GoOffRoadWhenAvoiding = 256,\r\nDF_DriveIntoOncomingTraffic = 512,\r\nDF_DriveInReverse = 1024,\r\n// If pathfinding fails, cruise randomly instead of going on a straight line\r\nDF_UseWanderFallbackInsteadOfStraightLine = 2048,\r\nDF_AvoidRestrictedAreas = 4096,\r\n// These only work on MISSION_CRUISE\r\nDF_PreventBackgroundPathfinding = 8192,\r\nDF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,\r\nDF_UseShortCutLinks =  262144,\r\nDF_ChangeLanesAroundObstructions = 524288,\r\n// cruise tasks ignore this anyway--only used for goto's\r\nDF_UseSwitchedOffNodes =  2097152,\r\n// if you're going to be primarily driving off road\r\nDF_PreferNavmeshRoute =  4194304,\r\n// Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly\r\nDF_PlaneTaxiMode =  8388608,\r\nDF_ForceStraightLine = 16777216,\r\nDF_UseStringPullingAtJunctions = 33554432,\r\nDF_AvoidHighways = 536870912,\r\nDF_ForceJoinInRoadDirection = 1073741824,\r\n// Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions\r\nDRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\t\t// Obey lights too\r\n// Like the above, but doesn't steer around anything in its way - will only wait instead.\r\nDRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch.\r\n// Default \"alerted\" driving mode. drives around everything, doesn't obey lights\r\nDRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars,\r\n// Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering\r\nDRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,\r\n// Smashes through everything\r\nDRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks\r\n// Drives normally except for the fact that it ignores lights\r\nDRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions\r\n// Try to swerve around everything, but stop for lights if necessary\r\nDRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n// Swerve around cars, be careful around peds, and stop for lights\r\nDRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars\r\n};\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\\_0x5BC448CB78FA3E88).**",
            "examples": [],
            "hash": "0xF91DF93B",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x374827C2": {
            "name": "TASK_GO_TO_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "distance",
                    "type": "float"
                },
                {
                    "name": "speed",
                    "type": "float"
                },
                {
                    "name": "p5",
                    "type": "float"
                },
                {
                    "name": "p6",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0\r\nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.\r\nExample: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)\r\nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\\_0x6A071245EB0D1882).**",
            "examples": [],
            "hash": "0x374827C2",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8DCC19C5": {
            "name": "TASK_HANDS_UP",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "facingPed",
                    "type": "Ped"
                },
                {
                    "name": "p3",
                    "type": "int"
                },
                {
                    "name": "p4",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "```\nIn the scripts, p3 was always -1.\r\np3 seems to be duration or timeout of turn animation.\r\nAlso facingPed can be 0 or -1 so ped will just raise hands up.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\\_0xF2EAB31979A7F910).**",
            "examples": [],
            "hash": "0x8DCC19C5",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xDBDD79FA": {
            "name": "TASK_LEAVE_ANY_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "p1",
                    "type": "int"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\\_0xD3DBCE61A490BE02)\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\\_0x504D54DF3F6F2247).**",
            "examples": [],
            "hash": "0xDBDD79FA",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x7B1141C6": {
            "name": "TASK_LEAVE_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle"
                },
                {
                    "name": "flags",
                    "type": "int"
                }
            ],
            "return_type": "void",
            "description": "```\nFlags from decompiled scripts:\r\n0 = normal exit and closes door.\r\n1 = normal exit and closes door.\r\n16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)\r\n64 = normal exit and closes door, maybe a bit slower animation than 0.\r\n256 = normal exit but does not close the door.\r\n4160 = ped is throwing himself out, even when the vehicle is still.\r\n262144 = ped moves to passenger seat first, then exits normally\r\nOthers to be tried out: 320, 512, 131072.\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\\_0xD3DBCE61A490BE02).**",
            "examples": [],
            "hash": "0x7B1141C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x5AB552C6": {
            "name": "TASK_PLAY_ANIM",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "int",
                    "description": "The animation flags (see enum)"
                },
                {
                    "name": "playbackRate",
                    "type": "float",
                    "description": "The playback rate (between 0.0 and 1.0)"
                },
                {
                    "name": "lockX",
                    "type": "BOOL"
                },
                {
                    "name": "lockY",
                    "type": "BOOL"
                },
                {
                    "name": "lockZ",
                    "type": "BOOL"
                }
            ],
            "return_type": "void",
            "description": "[Animations list](https://alexguirre.github.io/animations-list/)\n\n```cpp\nenum eScriptedAnimFlags\r\n{\r\nAF_LOOPING = 1,\r\nAF_HOLD_LAST_FRAME = 2,\r\nAF_REPOSITION_WHEN_FINISHED = 4,\r\nAF_NOT_INTERRUPTABLE = 8,\r\nAF_UPPERBODY = 16,\r\nAF_SECONDARY = 32,\r\nAF_REORIENT_WHEN_FINISHED = 64,\r\nAF_ABORT_ON_PED_MOVEMENT = 128,\r\nAF_ADDITIVE = 256,\r\nAF_TURN_OFF_COLLISION = 512,\r\nAF_OVERRIDE_PHYSICS = 1024,\r\nAF_IGNORE_GRAVITY = 2048,\r\nAF_EXTRACT_INITIAL_OFFSET = 4096,\r\nAF_EXIT_AFTER_INTERRUPTED = 8192,\r\nAF_TAG_SYNC_IN = 16384,\r\nAF_TAG_SYNC_OUT = 32768,\r\nAF_TAG_SYNC_CONTINUOUS = 65536,\r\nAF_FORCE_START = 131072,\r\nAF_USE_KINEMATIC_PHYSICS = 262144,\r\nAF_USE_MOVER_EXTRACTION = 524288,\r\nAF_HIDE_WEAPON = 1048576,\r\nAF_ENDS_IN_DEAD_POSE = 2097152,\r\nAF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304,\r\nAF_DONT_EXIT_ON_DEATH = 8388608,\r\nAF_ABORT_ON_WEAPON_DAMAGE = 16777216,\r\nAF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432,\r\nAF_PROCESS_ATTACHMENTS_ON_START = 67108864,\r\nAF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728,\r\nAF_USE_ALTERNATIVE_FP_ANIM = 268435456,\r\nAF_BLENDOUT_WRT_LAST_FRAME = 536870912,\r\nAF_USE_FULL_BLENDING = 1073741824\r\n}\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\\_0xEA47FE3719165B94).**",
            "examples": [],
            "hash": "0x5AB552C6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x3DDEB0E6": {
            "name": "TASK_PLAY_ANIM_ADVANCED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The ped you want to play the animation"
                },
                {
                    "name": "animDictionary",
                    "type": "const char*",
                    "description": "The animation dictionary"
                },
                {
                    "name": "animationName",
                    "type": "const char*",
                    "description": "The animation name"
                },
                {
                    "name": "posX",
                    "type": "float",
                    "description": "Initial X position of the task"
                },
                {
                    "name": "posY",
                    "type": "float",
                    "description": "Initial Y position of the task"
                },
                {
                    "name": "posZ",
                    "type": "float",
                    "description": "Initial Z position of the task"
                },
                {
                    "name": "rotX",
                    "type": "float",
                    "description": "Initial X rotation of the task"
                },
                {
                    "name": "rotY",
                    "type": "float",
                    "description": "Initial Y rotation of the task"
                },
                {
                    "name": "rotZ",
                    "type": "float",
                    "description": "Initial Z rotation of the task"
                },
                {
                    "name": "blendInSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends in. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "blendOutSpeed",
                    "type": "float",
                    "description": "The speed at which the animation blends out. Lower is slower and higher is faster, 1.0 is normal, 8.0 is basically instant"
                },
                {
                    "name": "duration",
                    "type": "int",
                    "description": "The duration of the animation in milliseconds. -1 will play the animation until canceled"
                },
                {
                    "name": "flag",
                    "type": "Any",
                    "description": "See [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94)"
                },
                {
                    "name": "animTime",
                    "type": "float",
                    "description": "Value between 0.0 and 1.0, lets you start an animation from the given point"
                },
                {
                    "name": "p14",
                    "type": "Any"
                },
                {
                    "name": "p15",
                    "type": "Any"
                }
            ],
            "return_type": "void",
            "description": "Similar in functionality to [`TASK_PLAY_ANIM`](#\\_0xEA47FE3719165B94), except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified.\r\n[Animations list](https://alexguirre.github.io/animations-list/)\n\n**This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\\_0x83CDB10EA29B370B).**",
            "examples": [],
            "hash": "0x3DDEB0E6",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x8A632BD8": {
            "name": "TASK_REACT_AND_FLEE_PED",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "fleeTarget",
                    "type": "Ped"
                }
            ],
            "return_type": "void",
            "description": "TASK_REACT_AND_FLEE_PED\n\n**This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\\_0x72C896464915D1B1).**",
            "examples": [],
            "hash": "0x8A632BD8",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x601C22E3": {
            "name": "TASK_SHOOT_AT_COORD",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped"
                },
                {
                    "name": "x",
                    "type": "float"
                },
                {
                    "name": "y",
                    "type": "float"
                },
                {
                    "name": "z",
                    "type": "float"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\\_0x46A6CC01E0826106).**",
            "examples": [],
            "hash": "0x601C22E3",
            "ns": "CFX",
            "apiset": "server"
        },
        "0xAC0631C9": {
            "name": "TASK_SHOOT_AT_ENTITY",
            "params": [
                {
                    "name": "entity",
                    "type": "Entity"
                },
                {
                    "name": "target",
                    "type": "Entity"
                },
                {
                    "name": "duration",
                    "type": "int"
                },
                {
                    "name": "firingPattern",
                    "type": "Hash"
                }
            ],
            "return_type": "void",
            "description": "```\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds\r\nEntity aimedentity;\r\nPlayer player = PLAYER::PLAYER_ID();\r\nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);\r\n//bg is an array of peds\r\nTASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));\r\nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.\r\nFiring Pattern Hash Information: https://pastebin.com/Px036isB\n```\n\n**This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\\_0x08DA95E8298AE772).**",
            "examples": [],
            "hash": "0xAC0631C9",
            "ns": "CFX",
            "apiset": "server"
        },
        "0x65D4A35D": {
            "name": "TASK_WARP_PED_INTO_VEHICLE",
            "params": [
                {
                    "name": "ped",
                    "type": "Ped",
                    "description": "The Ped to be warped into the vehicle."
                },
                {
                    "name": "vehicle",
                    "type": "Vehicle",
                    "description": "The target vehicle into which the ped will be warped."
                },
                {
                    "name": "seatIndex",
                    "type": "int",
                    "description": "See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\\_0x22AC59A870E6A669)."
                }
            ],
            "return_type": "void",
            "description": "```\nNativeDB Introduced: v323\n```\n\nWarp a ped into a vehicle.\r\n**Note**: It's better to use [`TASK_ENTER_VEHICLE`](#\\_0xC20E50AA46D09CA8) with the flag \"warp\" flag instead of this native.\n\n**This is the server-side RPC native equivalent of the client native [TASK_WARP_PED_INTO_VEHICLE](?\\_0x9A7D091411C5F684).**",
            "examples": [],
            "hash": "0x65D4A35D",
            "ns": "CFX",
            "apiset": "server"
        }
    },
    "PROFILER": {
        "0xC795A4A9": {
            "name": "PROFILER_ENTER_SCOPE",
            "params": [
                {
                    "name": "scopeName",
                    "type": "const char*",
                    "description": "Scope name."
                }
            ],
            "return_type": "void",
            "description": "Scope entry for profiler.",
            "examples": [],
            "hash": "0xC795A4A9",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xB39CA35C": {
            "name": "PROFILER_EXIT_SCOPE",
            "params": [],
            "return_type": "void",
            "description": "Scope exit for profiler.",
            "examples": [],
            "hash": "0xB39CA35C",
            "ns": "CFX",
            "apiset": "shared"
        },
        "0xF8B7D7BB": {
            "name": "PROFILER_IS_RECORDING",
            "params": [],
            "return_type": "BOOL",
            "description": "Returns true if the profiler is active.",
            "examples": [],
            "hash": "0xF8B7D7BB",
            "ns": "CFX",
            "apiset": "shared",
            "resultsDescription": "True or false."
        }
    }
}